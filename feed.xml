<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Peter Ritchie's Blog</title>
		<link>http://blog.peterritchie.com/</link>
		<description>Peter Ritchie</description>
		<copyright>2022</copyright>
		<pubDate>Sun, 19 Jun 2022 21:41:58 GMT</pubDate>
		<lastBuildDate>Sun, 19 Jun 2022 21:41:58 GMT</lastBuildDate>
		<item>
			<title>Environment Variables with C# Conditional Compilation Symbols</title>
			<link>http://blog.peterritchie.com/posts/Environment-Variables-with-CSharp-Conditional-Compilation-Symbols</link>
			<description>&lt;p&gt;Have you ever thought, it would be nice to have a symbol like &lt;code&gt;PETERRIT&lt;/code&gt; that is unique to your domain account that you could use for code that YOU maybe working on but don't want to break the build?&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Environment-Variables-with-CSharp-Conditional-Compilation-Symbols</guid>
			<pubDate>Thu, 12 Dec 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Have you ever thought, it would be nice to have a symbol like &lt;code&gt;PETERRIT&lt;/code&gt; that is unique to your domain account that you could use for code that YOU maybe working on but don't want to break the build?&lt;/p&gt;
&lt;p&gt;I occaisionally think I would like to do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#if PETERRIT
   public class ViolatileExperiment()
   {
     //...
   }
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I think of this I go look at the docs or on Stackoverflow, but I never find anything that allows me to do that.&lt;/p&gt;
&lt;p&gt;I had that thought recently and poked around in the Project Settings for a few minutes to see what's going on.  Interestingly &lt;code&gt;&amp;quot;%USERNAME%&amp;quot;&lt;/code&gt; causes and error, but doesn't break the build.&lt;/p&gt;
&lt;p&gt;Damn, I thought.  But % is so... DOS, maybe they use a different delimiter.  So, I stuck in &lt;code&gt;${USERNAME}&lt;/code&gt;.  Nope.  Then I thought, wait, macros in build events have a specific format!  I entered &lt;code&gt;$(USERNAME)&lt;/code&gt; and low-and-behold &lt;strong&gt;it worked!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's a little wonky though, in the Project Settings it shows the expanded variable (&lt;code&gt;PETERRIT&lt;/code&gt;), but in the project file it shows the macro reference. (&lt;code&gt;$(USERNAME)&lt;/code&gt;).  I can see the macro reference getting overwritten from time to time.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>RESTful Versioning</title>
			<link>http://blog.peterritchie.com/posts/RESTful-Versioning</link>
			<description>&lt;p&gt;Versioning is not new.  Versioning seems to be one of those things that people find hard to do or difficult to fully understand, especially with services and APIs.  RESTful versioning seems to be in the realm of Tabs v Spaces, but I want to detail my related observations (mostly of other's writings, but with some added color).&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/RESTful-Versioning</guid>
			<pubDate>Tue, 12 Nov 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Versioning is not new.  Versioning seems to be one of those things that people find hard to do or difficult to fully understand, especially with services and APIs.  RESTful versioning seems to be in the realm of Tabs v Spaces, but I want to detail my related observations (mostly of other's writings, but with some added color).&lt;/p&gt;
&lt;h2 id="what-is-a-version"&gt;What is a Version?&lt;/h2&gt;
&lt;p&gt;Before going further, I find defining terms so their meaning is explicit and understood. &lt;em&gt;Version&lt;/em&gt; is no exception.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;version&lt;/em&gt; recognizes a change to &lt;em&gt;something&lt;/em&gt; already established and assigns it an unique identity.  That identity serves as a moniker for &lt;em&gt;what&lt;/em&gt; changed so that when the &lt;em&gt;something&lt;/em&gt; that changed is processed, it can be differentiated from other &lt;em&gt;somethings&lt;/em&gt; of different versions.&lt;/p&gt;
&lt;h2 id="why-do-we-need-a-version"&gt;Why Do we Need a Version?&lt;/h2&gt;
&lt;p&gt;Based on what a version &lt;em&gt;is&lt;/em&gt;, it may seem easy to at least deduce &lt;em&gt;why&lt;/em&gt;.  That deduction usually &lt;em&gt;to differentiate different versions of things&lt;/em&gt;.  This is &lt;em&gt;what&lt;/em&gt; not &lt;em&gt;why&lt;/em&gt;. This is the part that many people seem to dismiss or let slip by.  In the context the knee-jerk response is &amp;quot;different version of the API&amp;quot; (API Versioning).  But, this simply restating what versioning is.  It's similar to defining &amp;quot;version&amp;quot; as&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;A version is the version of something in relation to other versions of the same thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yeah, using the word you're defining in the definition is &lt;em&gt;helpful&lt;/em&gt;.  &amp;quot;Version&amp;quot; must provide:&lt;/p&gt;
&lt;h3 id="support-for-past-representations"&gt;Support For Past &lt;em&gt;&lt;strong&gt;Representations&lt;/strong&gt;&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;The major reason versioning comes into play is because any one &lt;em&gt;representation&lt;/em&gt; of something evolves over time.  Needs change, understanding improves, technology evolves, imperfections are found, etc. and how something is stored or communicated needs to change to accommodate that evolution.&lt;/p&gt;
&lt;p&gt;&amp;quot;Requirements&amp;quot; are an obvious agent of change, and it would be easy to provide a trivial requirements example but a &lt;em&gt;fixing imperfection&lt;/em&gt; example would be more persuasive.  Humans like to be open-minded but inherently we live in our own worlds (our own mental model of the world).  Some of us are empathic and recognize parts of other worlds of the people around us. Or we know about a set of archetypes for which we can optimized interaction.  But in reality there are really 8+ billion other worlds out there and it's simply not humanly possible to know the intricacies of each.  Which means we make assumptions and trade-offs of what is acceptable to all of those other worlds.  Usually our audience isn't all 8+ billion people, so we're generally more correct than incorrect in our assumptions.  But, being incorrect is inevitable and expected. Much like we need to support many personalities, preferences, and needs; we also need to:&lt;/p&gt;
&lt;h3 id="support-multiple-representations-of-concepts"&gt;Support Multiple &lt;em&gt;Representations&lt;/em&gt; of Concepts&lt;/h3&gt;
&lt;p&gt;An example of this type of imperfection are date/time representations.  We live in our own &lt;em&gt;locus&lt;/em&gt; (which is like a personal &lt;em&gt;locale&lt;/em&gt;) and take for granted things we use or do in our locus from day-to-day, like Date/Time representations.  Local time has been working for each of us for all our lives, we take that for granted and use it in a representation without thinking.&lt;/p&gt;
&lt;p&gt;There are many things that make this problematic and error-prone.  I won't get into detail what  &lt;em&gt;all of those&lt;/em&gt; may be (a blog isn't the place for a tome like that).  The &lt;em&gt;fix&lt;/em&gt; is, of course, to use a &lt;em&gt;different representation&lt;/em&gt;. Implementing that fix and supporting existing representations of complex data means we need to be able to tell different representations of the same data from one another.&lt;/p&gt;
&lt;p&gt;This allows us to know how to translate each representation to the same in-memory structure when we (i.e. our code) encounter these representations; reinforcing that &lt;em&gt;representations&lt;/em&gt; differ from the &lt;em&gt;conceptual&lt;/em&gt; resource &lt;em&gt;and&lt;/em&gt; from the &lt;em&gt;implementation&lt;/em&gt; translation of the representation&lt;/p&gt;
&lt;p&gt;We need the ability to translate &lt;em&gt;multiple representations&lt;/em&gt; because there will be instances of differing representations &lt;em&gt;in the wild&lt;/em&gt; at a time.&lt;/p&gt;
&lt;h3 id="support-multiple-active-representation-versions"&gt;Support Multiple &lt;em&gt;Active&lt;/em&gt; Representation Versions&lt;/h3&gt;
&lt;p&gt;Increasingly we work in asynchronous environments where communication of data is off-loaded to asynchronous communication technology (like queues, topics, and even threads).  And with the drive to 100% availability this means that we perform software updates &lt;em&gt;in situ&lt;/em&gt; or without taking our systems completely off-line (or unavailable).  e.g. &lt;em&gt;indirect&lt;/em&gt; communication through a queue makes communication of the message independent of the processes. Until it reaches and is consumed by the destination, the message can be in a queue with neither process executing. This requires components to support &lt;strong&gt;at least&lt;/strong&gt; two versions of a representation &lt;em&gt;at the same time&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="attributes-of-rest"&gt;Attributes of REST&lt;/h2&gt;
&lt;p&gt;Since we're in the context of &lt;strong&gt;Re&lt;/strong&gt;presentational &lt;strong&gt;S&lt;/strong&gt;tate &lt;strong&gt;T&lt;/strong&gt;ransfer where resource &lt;em&gt;representation&lt;/em&gt; is front-and-center as well as &lt;em&gt;state&lt;/em&gt; of that resource, the following is a review of main features of RESTful services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REST is not a distributed object style &lt;a href="https://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm#sec_5_3_1"&gt;3&lt;/a&gt; &lt;!--(5.2.1-1)--&gt;&lt;/li&gt;
&lt;li&gt;A resource identifier (URI/URN) is a reference to a particular conceptual resource, not to a particular representation of it. &lt;a href="https://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm#sec_5_2_1_1"&gt;1&lt;/a&gt; &lt;!--(5.2.1.1-4)--&gt;&lt;/li&gt;
&lt;li&gt;A representation of a resource is transfered between REST components. &lt;a href="https://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm#sec_5_2_1_1"&gt;1&lt;/a&gt; &lt;!--(5.2.1.1-4)--&gt;&lt;/li&gt;
&lt;li&gt;A resource maps to a set of entities that varies over time, not just the representation at the moment &lt;a href="https://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm#sec_5_2_1_1"&gt;2&lt;/a&gt; &lt;!--(5.2.1.1-2)--&gt;&lt;/li&gt;
&lt;li&gt;The set of entities that are mapped to a resource are considered equal (by resource identifier and/or representation). &lt;a href="https://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm#sec_5_2_1_1"&gt;2&lt;/a&gt; &lt;!--(5.2.1.1-2)--&gt;&lt;/li&gt;
&lt;li&gt;The semantics of mapping a resource to an entity distinguishes one resource from another and is constant. &lt;a href="https://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm#sec_5_2_1_1"&gt;2&lt;/a&gt; &lt;!--(5.2.1.1-2)--&gt;&lt;/li&gt;
&lt;li&gt;Representations are late-bound and based on characteristics of the request. &lt;a href="https://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm#sec_5_2_1_1"&gt;2&lt;/a&gt; &lt;!--(5.2.1.1-4)--&gt;&lt;/li&gt;
&lt;li&gt;An identifier may exist without, or before, any realized representations. &lt;a href="https://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm#sec_5_2_1_1"&gt;2&lt;/a&gt; &lt;!--(5.2.1.1-2)--&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="restful-versioning-options"&gt;&lt;em&gt;RESTful&lt;/em&gt; Versioning Options&lt;/h2&gt;
&lt;p&gt;A quick review of objectives, for any given resource representation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we need to differentiate change independently from unrelated representations&lt;/li&gt;
&lt;li&gt;we need to differentiate different changes to related representations at the same time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are really only two fundamental options for &lt;em&gt;API Versioning&lt;/em&gt; (I didn't use &lt;em&gt;RESTful Versioning&lt;/em&gt; for reasons I hope will become clear):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Version moniker in the URI/URN, or&lt;/li&gt;
&lt;li&gt;Version moniker in the headers (or media-type)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="uriurn"&gt;URI/URN&lt;/h3&gt;
&lt;p&gt;In REST, a URL/URI &lt;strong&gt;only&lt;/strong&gt; identifies a resource, it is not a content-type identifier.  One reason for this is &lt;em&gt;Content Negotiation&lt;/em&gt;.  Content negotiation details that in the &lt;strong&gt;request for any particular resource&lt;/strong&gt;, the &lt;em&gt;representation&lt;/em&gt; of the resource (the response) can be negotiated through headers and responses.  That negotiation occurs through the single URL/URI.&lt;/p&gt;
&lt;p&gt;I.e. the response format does not need to be consistent per URL/URI. &lt;a href="https://tools.ietf.org/html/rfc7231#section-3.4"&gt;4&lt;/a&gt; If it's not clear, supporting multiple representations means there can be &lt;em&gt;many&lt;/em&gt; response formats for any single URI/URN.  Since we've already shown that each representation is independent of other, &lt;strong&gt;multiple versions need to be represented per URL&lt;/strong&gt;. Making something like &lt;code&gt;example.com/picture/v2&lt;/code&gt; for the SVG format meaningless. Therefore URI/URN versioning doesn't support some fundamental REST features.&lt;/p&gt;
&lt;h3 id="media-types-headers"&gt;Media Types (Headers)&lt;/h3&gt;
&lt;p&gt;Media types are monikers for a particular re presentation.  XML and Json or JPEG and PNG are examples of particular representations of the same resource.  But media types are more complex than that.
Media types can consist of a registered type (&lt;code&gt;application&lt;/code&gt;, &lt;code&gt;audio&lt;/code&gt;, &lt;code&gt;example&lt;/code&gt;, &lt;code&gt;font&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt;, &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;multipart&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;, and &lt;code&gt;video&lt;/code&gt;), a subtype (the registered format in the standards tree, or a dot-delimited subtype tree), a suffix (prefixed with &lt;code&gt;+&lt;/code&gt;), and optional parameters (key/optional-value pairs prefixed with &lt;code&gt;;&lt;/code&gt;). Suffixes can be used to specify the underlying &lt;em&gt;structure&lt;/em&gt; of a type/subtype, e.g. JSON and XML.  Formats like SVG can be either textual or binary, so although being a image and SVG, simply specifying &lt;code&gt;image/svg&lt;/code&gt; is not enough to cover both of those structures. The media type for the XML format of SVG ends up being &lt;code&gt;image/svg+xml&lt;/code&gt;.  Application-specific types use the &lt;code&gt;application&lt;/code&gt; type and a subtype in the vendor tree (&lt;code&gt;vnd&lt;/code&gt;).  If a custom application format for a &lt;em&gt;person&lt;/em&gt; resource that uses XML format would have a media type of &lt;code&gt;application/vnd.person+xml&lt;/code&gt;.  If the service also supports JSON it would have another media type &lt;code&gt;application/vnd.person+json&lt;/code&gt;. &lt;code&gt;charset&lt;/code&gt; is a reserved parameter, other parameters have unique meaning defined within the type/subtype.  for example &lt;code&gt;text/html; charset=UTF-8&lt;/code&gt; and &lt;code&gt;application/vnd.person+json; version=2.0.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The take away is that &lt;strong&gt;media-types are independent from the endpoint&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id="wrapping-up"&gt;Wrapping Up&lt;/h1&gt;
&lt;p&gt;It may make sense to think that the resource is changing, but in reality it is the representation that changes.  The resource is abstract, like &lt;em&gt;client&lt;/em&gt;.  Changing Birth Date from local to UTC doesn't change the fact that the &lt;strong&gt;resource is still a &lt;em&gt;client&lt;/em&gt;&lt;/strong&gt;.  If the resource fundamentally changes, that's when you change the URL/URI.  But not with a version identifier, but a new &lt;em&gt;resource&lt;/em&gt;.  If something previously considered a &amp;quot;client&amp;quot; changes so is conceptually no longer a &amp;quot;client&amp;quot;, then a new URI/URN should be used (like &amp;quot;client&amp;quot; to &amp;quot;lead&amp;quot;).  &lt;em&gt;We wouldn't have different versions of clients, merely different representations of client information&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="tldr"&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;A URI/URN is a reference to the single conceptual resource and not to a particular representation.  Since media types &lt;em&gt;are&lt;/em&gt; the data format of the representation and the same conceptual resource has representations that can change, &lt;strong&gt;media type must be used to specify different representations that a single URI/URNs supports&lt;/strong&gt;.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Service-Oriented is Declarative, not Imperative</title>
			<link>http://blog.peterritchie.com/posts/Service-Oriented-is-Declarative-Not-Imperative</link>
			<description>&lt;p&gt;In this post, I'd like to address a challenge that I've witnessed in the understanding of service-oriented and implementations of it.&lt;br&gt;
The issue I've seen in the design approach of services and service-oriented systems.  Programmers and engineers can easily view each service as a function.  Services are perceived as being composed together within a set of functions commanding specific state changes to achieve one of a smaller set of final states.&lt;br&gt;
This is really describing the totality of &lt;em&gt;how&lt;/em&gt; a system does what it does.  At some point, the &lt;em&gt;how&lt;/em&gt; must exist but in order to have a system that isn't one-off and can evolve by responding to change, we need the &lt;em&gt;how&lt;/em&gt; to be encapsulated from one another.&lt;br&gt;
Composition of a system in this way is an &lt;em&gt;imperative&lt;/em&gt; model.  Ideal service-orientation works within a &lt;em&gt;declarative&lt;/em&gt; model.&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Service-Oriented-is-Declarative-Not-Imperative</guid>
			<pubDate>Fri, 28 Jun 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In this post, I'd like to address a challenge that I've witnessed in the understanding of service-oriented and implementations of it.&lt;br /&gt;
The issue I've seen in the design approach of services and service-oriented systems.  Programmers and engineers can easily view each service as a function.  Services are perceived as being composed together within a set of functions commanding specific state changes to achieve one of a smaller set of final states.&lt;br /&gt;
This is really describing the totality of &lt;em&gt;how&lt;/em&gt; a system does what it does.  At some point, the &lt;em&gt;how&lt;/em&gt; must exist but in order to have a system that isn't one-off and can evolve by responding to change, we need the &lt;em&gt;how&lt;/em&gt; to be encapsulated from one another.&lt;br /&gt;
Composition of a system in this way is an &lt;em&gt;imperative&lt;/em&gt; model.  Ideal service-orientation works within a &lt;em&gt;declarative&lt;/em&gt; model.&lt;/p&gt;
&lt;p&gt;im·per·a·tive&lt;br /&gt;
   /əmˈperədiv/&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;uses statements that change a program's state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;de·clar·a·tive&lt;br /&gt;
   /dəˈklerədiv/&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;denoting high-level programming languages which can be used to solve problems without requiring the programmer to specify an exact procedure to be followed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, declarative is declaring the outcomes required and imperative is supplying the commands to change state in order to achieve the outcome required.&lt;/p&gt;
&lt;p&gt;Both are useful and both have benefits.  They're merely different.  One isn't better than the other.  But, they don't work well together.  Supplying a command to something that understands outcomes or supplying outcomes to something that expects command&lt;/p&gt;
&lt;p&gt;Service-orientation involves many things but in the context, it involves the principles of abstraction and autonomy.  Something that is self-contained and is a black box to consumers, represents a repeatable activity with a specific outcome. &lt;sup&gt;&lt;a href="https://www.opengroup.org/soa/source-book/ontologyv2/index.htm"&gt;OG1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;This is different from what most programmers seem to understand, which is to provide an order list of commands or statements to change state.&lt;/p&gt;
&lt;p&gt;Patterns are a good example of this, and the iterator pattern is one of my favorites.  That pattern details that to traverse the elements of a container an iterator object should be used to start at an initial element and progress through the rest through the use of a &amp;quot;&lt;code&gt;next&lt;/code&gt;&amp;quot; method.  This allows any type of sequences, collections, etc. to be iterated over regardless of their implementation.  i.e. &lt;em&gt;give me &lt;em&gt;next&lt;/em&gt;, whatever &lt;em&gt;next&lt;/em&gt; means&lt;/em&gt;.  C# has this built into the language with iterators:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;foreach( var element in theContainer)
{
   Do.Something.With(element);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In other languages/scenarios, the type of the container needs to be known and the unique way to enumerate all elements.  Typically reserved for collection/sequence structures, an array example may look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;for(int i = 0; i &amp;lt; anArray.Length; ++i)
{
   var element = theContainer[i];
   Do.Something.With(element);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-vb"&gt;For i = 1 to aList.Count
   Dim element = theContainer.Item(i)
Next i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of these blocks of code show &lt;em&gt;imperative&lt;/em&gt; commands: &lt;em&gt;get array element&lt;/em&gt; i or &lt;em&gt;get list element&lt;/em&gt; i.&lt;/p&gt;
&lt;p&gt;With C# and the iterator syntax, it's a better description to say &lt;em&gt;give me the outcome of each iteration of a container&lt;/em&gt;.  What the container does to iterate is encapsulated, the container is a black box to the caller.  We can use it the same if that container implementation used an array, a list, or just had hard-coded values.&lt;/p&gt;
&lt;p&gt;Services in Service-Orientation should take this form.  A service is a location where an outcome can be retrieved, usually with parameters.  Thinking in this way allows us to think of the outcomes we want to work with, rather than the details of how those outcomes are produced.  I allow us to (and is recommended) to think about things in our problem domain (or higher-level abstractions).  If we're thinking about a conference, we can think of a session as a container of registered attendees.  I can then model that I want to perform an activity with the information from each registered attendee before I implement something and decide &lt;em&gt;how&lt;/em&gt; that will be implemented.&lt;/p&gt;
&lt;p&gt;In a service, we should not have a contract that details &lt;em&gt;how&lt;/em&gt; an activity should be performed. A service contract should only detail the outcome and what parameters are required to get that outcome.&lt;/p&gt;
&lt;p&gt;Almost all design patterns (that aren't structural patterns) effectively do this: to abstract away implementation details in favor of declaring the outcome desired.  &amp;quot;Declarative&amp;quot; can also be considered &amp;quot;composable&amp;quot;: you're declaring how to compose things rather than the flow of logic.  The messaging library I published, you can effectively declare a producer, a consumer, and a channel/pipe between them.  Once composed like that, the type of channel/pipe used hides how the messages move between the producer and the consumer (in-memory, queue, HTTP endpoint, etc.).  You don't have imperatively create a queue (or a topic, etc) and imperatively connect the consumer and producer to the queue.&lt;/p&gt;
&lt;p&gt;I realize this is very subtle and, in particular, the iterator example. And maybe some advice on naming may help to bring it over the line. What also makes these concepts complex is that they're not digital; i.e. nothing is entirely declarative or entirely imperative, there are degrees of declartiveness/imperativeness.&lt;/p&gt;
&lt;p&gt;Service names should generally be nouns (e.g. the name of the &amp;quot;outcome&amp;quot; of the activity).  REST describes these as resources, which should also be nouns.  Verbs and a dead giveaway that something is imperative (if that wasn't obvious by the use of &lt;em&gt;imperative&lt;/em&gt; :) ).  Inputs in contracts should not contain verbs as well, consider the input/output as resources.&lt;/p&gt;
&lt;p&gt;Additionally, this doesn't mean everything using the outcomes of declarative statements must be declarative.  You can certainly program a set of statements to change state based on what that outcome was.&lt;/p&gt;
&lt;h3 id="traits-and-smells"&gt;Traits and Smells&lt;/h3&gt;
&lt;p&gt;One of the traits of services that are not imperative is that they can be viewed as stateless.  If the need arises to store per-session state or state that shouldn't be available to other consumers of the service, that's a smell to tell you that you're probably more imperative than declarative.  The solution to this is to ensure anything required for the activity to be performed should be supplied in the input.  REST services facilitate this through HATEOS.  There was &lt;em&gt;state&lt;/em&gt; when an activity was requested, and it should be passed back in one or more hyperlinks for stateless services.  e.g. The current total number of resources at an endpoint at that point in time.  You may be paging through resources a page at a time and something could change between requests.  To avoid problems with that the state is effectively &lt;em&gt;stored&lt;/em&gt; in the response via links.  At the time of a request, a service may have 20 resources, if paging 10 at a time the &amp;quot;next&amp;quot; page for page one would be 2. If something changed before page 2 was retrieved, the response for page 2 may include page 3 for &amp;quot;next&amp;quot;.&lt;/p&gt;
&lt;p&gt;Next time, I'll talk about how &amp;quot;declarative&amp;quot; doesn't mean always up front.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.opengroup.org/soa/source-book/ontologyv2/index.htm"&gt;Service-Oriented Architecture Ontology Version 2.0 - The Open Group&lt;/a&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Thoughts on Web Services, REST APIs, and Message Structure</title>
			<link>http://blog.peterritchie.com/posts/Thoughts-Web-Services--REST-APIs--and-Message-Structure</link>
			<description>&lt;p&gt;Love it or hate it, HTTP is ubiquitous.  It's been around for thirty years.
It has evolved alot in those thirty years.  One critical way it has evolved is
to support flexibility. Despite the huge benefits of that flexibility it can
and has lead people away from recommended and expected usage and patterns.&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Thoughts-Web-Services--REST-APIs--and-Message-Structure</guid>
			<pubDate>Tue, 09 Apr 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="part-1-http"&gt;Part 1: HTTP&lt;/h2&gt;
&lt;p&gt;Love it or hate it, HTTP is ubiquitous.  It's been around for thirty years.
It has evolved alot in those thirty years.  One critical way it has evolved is
to support flexibility. Despite the huge benefits of that flexibility it can
and has lead people away from recommended and expected usage and patterns.&lt;/p&gt;
&lt;p&gt;&amp;quot;No big deal&amp;quot;, some say, but being lead away from recommended
usage leads to re-discovery and re-invention and an evolutionary way of
working (i.e. it's never right the first time).  This evolutionary process
is a constraining process, each step must be based on the last and all that
came before it.  That's great when you do have to invent something that never
existed; but when a solution already exists, this process needlessly
constrains progress sometimes to the point of missing the actual
recommendation or expectation.&lt;/p&gt;
&lt;p&gt;The flexibility of HTTP really means that people have to have a deep or broad
knowledge of it to use it properly.  Take the &lt;code&gt;Accept&lt;/code&gt; request header and
media types. It allows a requestor to limit and rank the possible content
format. We typically see this with at least XML and JSON nowadays.  To be
clear this means Web APIs can have different formats of responses. The
Content-Type header field means the inverse, that an API can accept multiple
request content formats.  As flexible as this is, different content formats
have at least some lack of parity of features.  As an example, XML has rich
syntax that includes things like full featured consistent schema definitions.
JSON is working towards things like that, but this is an example where the
two have different semantic structure.  There are things that can be done to
compensate, but at the end of the day neither was designed to work exactly like
the other (that's kinda the point, isn't it?)  This is just one example where
there's possibility of mismatch, mismatch in how two content formats can
represent the same thing.&lt;/p&gt;
&lt;p&gt;You may be thinking, &lt;em&gt;where am I going this with&lt;/em&gt;?  Thanks for the segue. What
this means is there will be times when you &lt;em&gt;change the structure or schema&lt;/em&gt; of
content (request or response) &lt;strong&gt;because it's one type OR the other&lt;/strong&gt;.  Which
leads me back towards media types.  If the schema of a JSON response
changes but the XML doesn't, what does &lt;em&gt;versioning&lt;/em&gt; of APIs mean?  Well, it
means that because there are different formats of content is independently
changing schemas &lt;strong&gt;you cannot reliably the version an API by URI&lt;/strong&gt;.  You can't even use a general
header field that applies to all content because a change to one could be
breaking but unnecessary or non-breaking in the other.  Making versioning
problematic at best.  This means you really &lt;strong&gt;must use media type as the
versioning mechanism&lt;/strong&gt;. (&amp;quot;MTATEOV&amp;quot;: Media Type As The Engine of
Versionability?)&lt;/p&gt;
&lt;p&gt;But, if you've ignored media types and effectively ignored schemas and cause
breaking changes because it just works and breaking changes have been
tolerable.  Of course, being in this situation and let the flexibility
herd you into this corner.  But, it really is fairly easy also ends up
solving these issues as well as open up some opportunities like Web Linking to
content type and version! Let's have a look at the standard format of the media type.&lt;/p&gt;
&lt;p&gt;Media types consist of a &lt;em&gt;type&lt;/em&gt; and a &lt;em&gt;subtype&lt;/em&gt;, separated by a forward slash.&lt;br /&gt;
For example &amp;quot;application/xml&amp;quot;, &amp;quot;application/json&amp;quot;.  The subtype is further
structured in a tree that provides many options.  There are standards subtypes
that are fixed or *standard&amp;quot; like &amp;quot;text/html&amp;quot; and &amp;quot;image/png&amp;quot; which specify a
standard format.  The standards subtypes typically fall under types like
&amp;quot;text&amp;quot;, &amp;quot;image&amp;quot;, etc.&lt;/p&gt;
&lt;p&gt;There can be application-specific subtypes and those fall under the
&amp;quot;application&amp;quot; type.  There is a bit of inconsistency in media types, like
JSON is &amp;quot;application/json&amp;quot; and XML is &amp;quot;text/xml&amp;quot; despite the two content
formats having standard structure and semantics.  But, I'll focus on
application-specific structures because you should only need to version
application-specific structures.&lt;/p&gt;
&lt;p&gt;Despite application-specific, the application-specific parts can be built off
of those standard content structures like XML and JSON to create a custom
subset schema (so to speak).  Media type standard supports that including a
suffix and parameters to the subtype.  The subtype format is essentially
&lt;code&gt;subtype[&amp;quot;+&amp;quot; suffix] [*&amp;quot;;&amp;quot; parameter]&lt;/code&gt; or &amp;quot;subtype&amp;quot; followed by an optional
suffix separated by &amp;quot;+&amp;quot; followed by one or more parameters separated by &amp;quot;;&amp;quot;.&lt;br /&gt;
And each parameter may have an optional value separated by &amp;quot;=&amp;quot;.
So, I could specify that I have HTML text encoding as UTF-8 as
&amp;quot;text/html; charset=UTF-8&amp;quot; or I could specific an application-specific format
(like &amp;quot;gibberish&amp;quot;) that is based on XML like this &amp;quot;application/gibberish+xml&amp;quot;.&lt;/p&gt;
&lt;p&gt;In order to avoid name clashes with other vendors, these media types are
expected to be in the Vendor Tree where standards types fall under the root or
Standards Tree.  Trees are specified with a prefix to the subtype, making
the standard structure of a subtype like this
&lt;code&gt;[tree &amp;quot;.&amp;quot;] subtype[&amp;quot;+&amp;quot; suffix] [*&amp;quot;;&amp;quot; parameter]&lt;/code&gt;.  &lt;em&gt;tree&lt;/em&gt; as the
structure of &lt;code&gt;tree *[&amp;quot;.&amp;quot; subtree]&lt;/code&gt; meaning there can be many trees separated
by &amp;quot;.&amp;quot;.  The standard details that the Vendor Tree starts with the &amp;quot;vnd.&amp;quot;
prefix.  So, our custom type should really have the form
&amp;quot;application/vnd.pri.gibberish+xml&amp;quot;, where &amp;quot;pri&amp;quot; is a vendor-specific name or
identifier.  Or if JSON format is required: &amp;quot;application/vnd.pri.gibberish+xml&amp;quot;.&lt;/p&gt;
&lt;p&gt;Now that we know about custom, vendor application-specific type identifiers,
on to dealing with changes to that content format that may introduce breaking
changes, or &lt;em&gt;versioning&lt;/em&gt;.  Since we're dealing with vendor and application-
specific identifiers within &lt;em&gt;subtype&lt;/em&gt; we deviate into an area not covered
specifically by a standard.  And you're basically free to do anything you want
to specify the version, some have a format like
&amp;quot;application/vnd.pri.gibberish.v2+xml&amp;quot;.  Some use a subtype parameter like
&amp;quot;application/vnd.pri.gibberish+xml;v=2&amp;quot; or
&amp;quot;application/vnd.pri.gibberish+xml;version=2&amp;quot;.  Since what lead us on
this particular journey was the problem of diverging versions between
underlying structures, the parameter route makes more sense because the
version really applies, in that case, to the content with an underlying
structure.  And being a parameter after the prefix, it's less like a version
of the subtype. e.g. &amp;quot;application/vnd.pri.gibberish.v2+xml&amp;quot; could be
interpreted as gibberish version 2 with an underlying XML structure.  But
&amp;quot;application/vnd.pri.gibberish+xml;v=2&amp;quot; is easier to interpret as
gibberish+xml version 2.&lt;/p&gt;
&lt;p&gt;Side note: In the versions I've shown here I've not used a minor version
(like 2.1).  I did that on purpose based on SEMVER that stipulates major
version number increment to signify breaking changes.  Non-breaking changes
in content is achieved with optional values, so client requestors that
don't know the new optional values won't use them and thus minor version
doesn't matter.  Also, if new optional values appear in a response, the
requester shouldn't care either.  You can structure your schema to make such
that a requestor need to care about it, but that is a breaking change and a
major version increment, not a minor version increment.&lt;!-- 2019, April--&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Domain-Oriented Observability: The Decorative Way</title>
			<link>http://blog.peterritchie.com/posts/Domain-Oriented-Observability-The-Decorative-Way</link>
			<description>&lt;p&gt;I read an interesting article by Pete Hodgson on Martin Fowler's blog/site titled &lt;a href="https://martinfowler.com/articles/domain-oriented-observability.html"&gt;Domain-Oriented Observability&lt;/a&gt;.  In this article, Pete suggests separating the responsibility of observability out of a domain class that might initially look like this:&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Domain-Oriented-Observability-The-Decorative-Way</guid>
			<pubDate>Tue, 02 Apr 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I read an interesting article by Pete Hodgson on Martin Fowler's blog/site titled &lt;a href="https://martinfowler.com/articles/domain-oriented-observability.html"&gt;Domain-Oriented Observability&lt;/a&gt;.  In this article, Pete suggests separating the responsibility of observability out of a domain class that might initially look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;  applyDiscountCode(discountCode){
    this.logger.log(&amp;quot;attempting to apply discount code: ${discountCode}&amp;quot;);

    let discount; 
    try {
      discount = this.discountService.lookupDiscount(discountCode);
    } catch (error) {
      this.logger.error(&amp;quot;discount lookup failed&amp;quot;,error);
      this.metrics.increment(
        &amp;quot;discount-lookup-failure&amp;quot;,
        {code:discountCode});
      return 0;
    }
    this.metrics.increment(
      &amp;quot;discount-lookup-success&amp;quot;,
      {code:discountCode});

    const amountDiscounted = discount.applyToCart(this);

    this.logger.log(&amp;quot;Discount applied, of amount: ${amountDiscounted}&amp;quot;);
    this.analytics.track(&amp;quot;Discount Code Applied&amp;quot;,{
      code:discount.code, 
      discount:discount.amount, 
      amountDiscounted:amountDiscounted
    });

    return amountDiscounted;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...into something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;  applyDiscountCode(discountCode){
    this.instrumentation.applyingDiscountCode(discountCode);

    let discount; 
    try {
      discount = this.discountService.lookupDiscount(discountCode);
    } catch (error) {
      this.instrumentation.discountCodeLookupFailed(discountCode,error);
      return 0;
    }
    this.instrumentation.discountCodeLookupSucceeded(discountCode);

    const amountDiscounted = discount.applyToCart(this);
    this.instrumention.discountApplied(discount,amountDiscounted);/*sic*/
    return amountDiscounted;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I applaud the effort to put the responsibility of observability of the applying discounts into a singly-responsible class.  But, the domain-oriented class is still burdened with the responsibility of observability even if it simply delegates to another class.  It's now &lt;em&gt;also&lt;/em&gt; responsible for knowing about another class/interface, and possibly responsible for instantiating it.&lt;/p&gt;
&lt;p&gt;In my mind, this &lt;em&gt;is&lt;/em&gt; better, but really just trades some responsibilities for others.  And if the shopping cart is composed and the instrumentation class abstracted by an interface this &lt;strong&gt;minimizes&lt;/strong&gt; those responsibilities,  but they're still &lt;em&gt;in&lt;/em&gt; the shopping cart.&lt;/p&gt;
&lt;p&gt;When working with team members, my recommendation is to choose composability over mixing responsibilities or concerns in cases like this.  You can do this through the use of the &lt;a href="https://en.wikipedia.org/wiki/Decorator_pattern"&gt;Decorator Pattern&lt;/a&gt;.  For example, if we create a decorating shopping cart that passes through to a production shopping cart, we can &amp;quot;inject&amp;quot; the observability into the use of that production shopping cart without having to clutter up the domain-oriented class (after all, the point was &lt;em&gt;cleaning up the mess&lt;/em&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class InstrumentingShoppingCart : IShoppingCart
{
	private readonly IShoppingCart component;
	private readonly DiscountInstrumentation instrumentation;


	public InstrumentingShoppingCart(IShoppingCart component, DiscountInstrumentation instrumentation)
	{
		this.component = component;
		this.instrumentation = instrumentation;
	}

	public float applyDiscountCode(int discountCode)
	{
		this.instrumentation.applyingDiscountCode(discountCode);
		try
		{
			var discountAmount = component.applyDiscountCode(discountCode);
			this.instrumentation.discountCodeLookupSucceeded(discountCode);
			this.instrumentation.discountApplied(discountAmount);
			return discountAmount;
		}
		catch (Exception error)
		{
			this.instrumentation.discountCodeLookupFailed(discountCode, error);
			return 0;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An &lt;code&gt;InstrumentingShoppingCart&lt;/code&gt; instance can be used where any &lt;code&gt;IShoppingCart&lt;/code&gt; is used and can be composed in whatever fashion is necessary (IoC container, Composition Root, etc.).&lt;/p&gt;
&lt;p&gt;Now we get instrumentation, instrumentation as a responsibility is separated, &lt;em&gt;and&lt;/em&gt; the domain-oriented class is not messed up with other concerns and responsibilities.  For example, the original unincumbered method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Java"&gt;  applyDiscountCode(discountCode){

    let discount; 
    discount = this.discountService.lookupDiscount(discountCode);

    const amountDiscounted = discount.applyToCart(this);
    return amountDiscounted;
  }
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
		</item>
		<item>
			<title>Disabled Browser Copy-to-Clipboard: WTF?</title>
			<link>http://blog.peterritchie.com/posts/Disabled-Browser-Copy-to-Clipboard--WTF</link>
			<description>&lt;p&gt;Seriously, web sites that disable copy-to-clipboard?  What do they think they are protecting?  It's very annoying.&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Disabled-Browser-Copy-to-Clipboard--WTF</guid>
			<pubDate>Thu, 28 Feb 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Seriously, web sites that disable copy-to-clipboard?  What do they think they are protecting?  It's very annoying.&lt;/p&gt;
&lt;p document.oncopy="null;"&gt;The way they actually do that is to override the default &lt;code&gt;oncopy&lt;/code&gt; event handler. But, you know what?  With browsers (at least Chrome),
you can actually modify the document in real-time and remove that new handler.  Better yet, you can create a
bookmarklet on your bookmark bar and re-enable copy-to-clipboard any time you want.  Just drag the following
link to your browser bar and drop:
&lt;a href="javascript: (function () { document.oncopy = null;})();"&gt;javascript: (function () )();&lt;/a&gt;
That creates a button with all that javascript in the name; if you prefer a simpler,
icon-looking button, drag and drop this fist (fight the power) to accomplish the same thing
&lt;a href="javascript: (function () { document.oncopy = null;})();"&gt;✊&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now when you get one of those websites, click that bookmarklet and copy to clipboard All. You. Want.&lt;/p&gt;
&lt;p&gt;If you have any similar tips and tricks, please share with a comment!&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>ASP.NET Core Configuration Recommended Practices</title>
			<link>http://blog.peterritchie.com/posts/ASP.NET%20Core%20Configuration%20Recommended%20Practices</link>
			<description>&lt;p&gt;&lt;em&gt;ASP.NET Core&lt;/em&gt; and &lt;em&gt;ASP.NET Core Configuration&lt;/em&gt; build upon some fundamental and important principles to maintain its vision.  Having worked with some of those principles for years and more recently working with ASP.NET Core Configuration and guiding other team members, I've come up with a recommended practices view of the principles through the eyes of ASP.NET implementation examples.  It has helped me to have a deconstructed view of ASP.NET Core (and many other things) with those principles in mind, I hope it helps you too.&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/ASP.NET%20Core%20Configuration%20Recommended%20Practices</guid>
			<pubDate>Mon, 24 Sep 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;em&gt;ASP.NET Core&lt;/em&gt; and &lt;em&gt;ASP.NET Core Configuration&lt;/em&gt; build upon some fundamental and important principles to maintain its vision.  Having worked with some of those principles for years and more recently working with ASP.NET Core Configuration and guiding other team members, I've come up with a recommended practices view of the principles through the eyes of ASP.NET implementation examples.  It has helped me to have a deconstructed view of ASP.NET Core (and many other things) with those principles in mind, I hope it helps you too.&lt;/p&gt;
&lt;p&gt;Some of the principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Separation of Concerns&lt;/li&gt;
&lt;li&gt;Loose coupling&lt;/li&gt;
&lt;li&gt;Interface Segregation&lt;/li&gt;
&lt;li&gt;Single Responsibility&lt;/li&gt;
&lt;li&gt;Dependency Inversion&lt;/li&gt;
&lt;li&gt;Don't Repeat Yourself&lt;/li&gt;
&lt;li&gt;Explicit Dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="compartmentalization-sections-are-your-friends"&gt;1. Compartmentalization: Sections Are Your Friends&lt;/h2&gt;
&lt;h3 id="do-separate-independent-configuration-groups-by-sections"&gt;&lt;span id=1-1&gt;1.1&lt;/span&gt; &lt;strong&gt;Do&lt;/strong&gt; separate independent configuration groups by sections&lt;/h3&gt;
&lt;p&gt;One big chunk of configuration (essentially a big chunk of key-value pairs) as the configuration for all the individual components of your application has maintainability issues.  It Works™, but that means that every component that is individually configurable within your application is more tightly-coupled to all the others because there is no explicit abstraction between their settings data.  Something more maintainable is to separate the component configurations from one another by a section in the configuration.  An appsettings.json example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-JSON"&gt;{
  &amp;quot;Logging&amp;quot; {
    &amp;quot;Debug&amp;quot;: {
      &amp;quot;LogLevel&amp;quot;: {
        &amp;quot;Default&amp;quot;: &amp;quot;Warning&amp;quot;
      }
    }
  }, 
  &amp;quot;ConnectionStrings&amp;quot;: {
    &amp;quot;BloggingDatabase&amp;quot;: &amp;quot;Server=(localdb)\\mssqllocaldb;Database=EFGetStarted.ConsoleApp.NewDb;Trusted_Connection=True;&amp;quot;
  },}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...where the sections are &amp;quot;Logging&amp;quot; and &amp;quot;ConnectionStrings&amp;quot;, and subsections &amp;quot;Debug&amp;quot; and &amp;quot;LogLevel&amp;quot;.&lt;/p&gt;
&lt;p&gt;ASP.NET does a lot to allow you to be explicit and to support Dependency Inversion, and section separation of configuration will make that and the following recommendations easier.&lt;/p&gt;
&lt;h3 id="do-not-couple-all-your-classes-to-iconfiguration"&gt;&lt;span id=1-2&gt;1.2&lt;/span&gt; &lt;strong&gt;Do not&lt;/strong&gt; couple all your classes to &lt;code&gt;IConfiguration&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In the same vein as &lt;a href="#1-1"&gt;1.1&lt;/a&gt;, using a single &lt;code&gt;IConfiguration&lt;/code&gt; instance all over the place is the same as all your components being coupled to each others' configuration.  &lt;code&gt;IConfiguration&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; loosely coupled,  but &lt;em&gt;maintain loose coupling at the class/component level too&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;See also &lt;a href="#Use_of_C#_built-in_types_in_constructor_parameters"&gt;Use of C# built-in types in constructor parameters&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="configuration-isnt-just-appsettings"&gt;2. Configuration Isn't Just &lt;code&gt;appsettings&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Out of the box, ASP.NET Supports appsettings.json, environment-specific appsettings.json, command-line arguments, environment variables, ini files, XML config files, in-memory data, and any custom source/provider you need.&lt;/p&gt;
&lt;p&gt;Viewing the application configuration as being manifested by appsettings JSON files is very limiting.  Worse case it becomes an expectation and the ability to change configuration depends on loading appsettings:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;	var builder = new ConfigurationBuilder()
		.SetBasePath(Directory.GetCurrentDirectory())
		.AddJsonFile(&amp;quot;appsettings.json&amp;quot;);

	Configuration = builder.Build();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we'll see, ASP.NET configuration is very powerful and flexible, &lt;em&gt;think of ASP.NET Configuration independently of appsettings and that appsettings is just one part of it&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="do-think-of-asp.net-configuration-as-a-means-to-a-configuration-management-end"&gt;&lt;span id=2-1&gt;2.1&lt;/span&gt; &lt;strong&gt;Do&lt;/strong&gt; think of ASP.NET configuration as a means to a Configuration Management end&lt;/h3&gt;
&lt;p&gt;ASP.NET Configuration is powerful; powerful enough to be the application's pane of glass into Configuration Management.  ASP.NET Configuration provides a unified view of the independent variables that affect the success/outcome of application functionality. (think of the application as a function and configuration is the container of &amp;quot;inputs&amp;quot; that affect dependent variables to be observed or measured).&lt;/p&gt;
&lt;h3 id="do-not-couple-code-to-source-of-configuration-data"&gt;&lt;span id=2-2&gt;2.2&lt;/span&gt; &lt;strong&gt;Do not&lt;/strong&gt; couple code to source of configuration data&lt;/h3&gt;
&lt;p&gt;ASP.NET Core configuration is powerful and flexible, there is no need for controller, model, or domain classes to know anything about details like appsettings.json, environment variables, etc.  Let ASP.NET Configuration handle all of that heavy lifting so that controller, model, and domain depend only upon abstractions, including these &lt;em&gt;configuration abstractions&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="consider-using-the-options-pattern-for-grouping-settings"&gt;&lt;span id=2-3&gt;2.3&lt;/span&gt; &lt;strong&gt;Consider&lt;/strong&gt; using the Options Pattern for grouping settings&lt;/h3&gt;
&lt;p&gt;One of the goals of a Dependency Injection container is to act as a registry--an opt-in mechanism to resolve instances from types and to relieve construction logic from dependents.  Settings, options, and configuration are genuinely unique; they're not object-oriented but data containers or shapes.  As data containers there's an expectation of &amp;quot;default&amp;quot; values and &amp;quot;missing&amp;quot; values and often &amp;quot;missing&amp;quot; means falling back to &amp;quot;defaults&amp;quot;.  But, in an opt-in registry situation, what does that mean?&lt;/p&gt;
&lt;p&gt;That's what &lt;code&gt;IOptions&lt;/code&gt; does for you, you don't have to know that &amp;quot;defaults&amp;quot; need to be registered or to force the responsibility of knowing what &amp;quot;defaults' mean on a boostrapper.  Using &lt;code&gt;IOptions&amp;lt;T&amp;gt;&lt;/code&gt; in your constructors means you don't have to worry about that.  Using &lt;code&gt;IOptions&amp;lt;T&amp;gt;&lt;/code&gt; is an indirect &lt;em&gt;opt-in of &lt;code&gt;T&lt;/code&gt;&lt;/em&gt;, the container will go ahead and instantiate it if one hasn't already been registered with specific values (it doesn't do that with any other types).  This means the constructor of the options class takes on the responsibility of what &amp;quot;defaults&amp;quot; mean--which is more maintainable.&lt;/p&gt;
&lt;p&gt;The Pattern is using &lt;code&gt;IOptions&amp;lt;T&amp;gt;&lt;/code&gt; in constructors to inject settings via an instance of &lt;code&gt;T&lt;/code&gt;, and that any configuration is loaded via &lt;code&gt;services.Configure&amp;lt;TOptions&amp;gt;(Configuration.GetSection(&amp;quot;TOptions&amp;quot;))&lt;/code&gt;.  But, a key part of that pattern are &lt;em&gt;the defaults&lt;/em&gt;. So, the shapes you use as &lt;code&gt;TOptions&lt;/code&gt; types should &lt;em&gt;set default values&lt;/em&gt;.  For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class MyOptions
{
	public MyOptions()
	{
		// Set default value.
		Option1 = &amp;quot;value1_from_ctor&amp;quot;;
	}

	public string Option1 { get; set; }
	public int Option2 { get; set; } = 5;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more detail, see &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-2.1"&gt;Options Pattern&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="do-understand-configuration-source-default-precedence"&gt;&lt;span id=2-4&gt;2.4&lt;/span&gt; &lt;strong&gt;Do&lt;/strong&gt; understand configuration source default precedence&lt;/h3&gt;
&lt;p&gt;When using the ASP.NET Core &lt;code&gt;WebHostBuilder&lt;/code&gt;, the order of precedence of configuration sources is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;appsettings.json&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;appsettings.&lt;em&gt;env&lt;/em&gt;.json&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[&lt;span title="Developer"&gt;User&lt;/span&gt; Secrets]&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Environment Variables&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Command Line&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To be specific, the order of precedence mirrors the order the providers are added to the configuration builder.  The above is really just how &lt;code&gt;WebHostBuilder&lt;/code&gt; implements them.&lt;/p&gt;
&lt;p&gt;You can override all that if you want, but don't cause yourself that pain: accept the defaults of &lt;code&gt;WebHostBuilder&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="do-know-how-to-override-settings"&gt;&lt;span id=2-5&gt;2.5&lt;/span&gt; &lt;strong&gt;Do&lt;/strong&gt; know how to override settings&lt;/h3&gt;
&lt;p&gt;Configuration supports a variety of providers.  Some inherently support structured, complex data; some don't.  JSON is the quintessential example of structured configuration for ASP.NET:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;Logging&amp;quot;: {
    &amp;quot;LogLevel&amp;quot;: {
      &amp;quot;Default&amp;quot;: &amp;quot;Debug&amp;quot;,
      &amp;quot;System&amp;quot;: &amp;quot;Information&amp;quot;,
      &amp;quot;Microsoft&amp;quot;: &amp;quot;Information&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And command-line arguments are the quintessential example of &lt;em&gt;unstructured&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MyApplication.exe --Verbosity true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But, configuration providers translate whatever structure they support into the &lt;em&gt;flat&lt;/em&gt; structure that ASP.NET Core configuration supports.  To do that, providers simply use a colon &lt;code&gt;:&lt;/code&gt; as hierarchy level separators.  So, the &lt;code&gt;Default&lt;/code&gt; key name from the above JSON has a fully-qualified configuration key name of &lt;code&gt;Logging:LogLevel:Default&lt;/code&gt;.  Which means you can override what is in appsettings with key/value pair from anyware, e.g. via the command line:
&lt;code&gt;MyApplication --Logging:LogLevel:Default Error&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And to override appsettings values with environment variable values, use a double underscore &lt;code&gt;__&lt;/code&gt; as a hierarchy delimiter instead of a colon hierarchy level delimiter:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SET Logging__LogLevel__Default=Error&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="asp.net-core-bootstrapping-is-all-about-the-builder-pattern-and-the-dependency-injection-technique"&gt;3. ASP.NET Core bootstrapping is all about the Builder Pattern and the Dependency Injection technique&lt;/h2&gt;
&lt;h3 id="do-understand-the-bounds-of-builders-and-utilize-them-correctly"&gt;&lt;span id=3.1&gt;3.1&lt;/span&gt; &lt;strong&gt;Do&lt;/strong&gt; understand the bounds of builders and utilize them correctly&lt;/h3&gt;
&lt;p&gt;To maintain the level of loose coupling that has lead to ASP.NET Core advancements, builders are essential.  Builders provide the ability to describe (declaratively) what is needed to compose things from dependencies, and avoid coding how (imperatively) to compose things &lt;em&gt;with&lt;/em&gt; dependencies.&lt;/p&gt;
&lt;p&gt;The flow of things is often useful when getting into advanced situations:&lt;/p&gt;
&lt;p&gt;Building the web host starts in Program.Main, building configuration spawns from building the web host, configuration is built before spawning Startup from building the web host, Startup is created before configuring services, configuring services completes before application builder, application builder completes before controllers are instantiated, some services may be instantiated after the application builder completes.&lt;/p&gt;
&lt;p&gt;That flow results in some expectations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the application builder to amend what a built application means.&lt;/li&gt;
&lt;li&gt;Don't expect to use services with &lt;code&gt;IConfigurationBuilder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use the configuration builder only to describe what building configuration means.&lt;/li&gt;
&lt;li&gt;Don't expect to do any configuration building when services start configuring.&lt;/li&gt;
&lt;li&gt;Use the services collection to register instances or types for dependencies instead of within the dependencies.&lt;/li&gt;
&lt;li&gt;Add dependent service information after adding the information for services they depend upon.&lt;/li&gt;
&lt;li&gt;If service instances are required before service configuration is complete, instantiate them in &lt;code&gt;ConfigureServices&lt;/code&gt; and use them before adding them to the services collection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dependency inversion means that the order of operations start is opposite to the order of dependency:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;host→configuration→services→application&lt;/li&gt;
&lt;li&gt;application⇢services⇢configuration⇢host&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="avoid-constructing-any-instance-that-arent-used-through-services-collection"&gt;&lt;span id=3.2&gt;3.2&lt;/span&gt; &lt;strong&gt;Avoid&lt;/strong&gt; constructing any instance that aren't used through Services Collection&lt;/h3&gt;
&lt;p&gt;Needing to construct an instance before you've added all dependent services to the services collection is an indication of a potential dependency problem (not inverted, or circular).  So, avoid doing that without a specific reason (besides to Get It To Work™).&lt;/p&gt;
&lt;h1 id="metrics"&gt;Metrics&lt;/h1&gt;
&lt;h2 id="smells"&gt;Smells&lt;/h2&gt;
&lt;p&gt;Some less-measurable things that you can watch for that will help recognize refactoring candidates...&lt;/p&gt;
&lt;h3 id="use-of-c-built-in-types-in-constructor-parameters"&gt;Use of C# built-in types in constructor parameters&lt;/h3&gt;
&lt;p&gt;The C# &lt;a href="http://bit.ly/CsharpPrimitives"&gt;built-in&lt;/a&gt; types are the building-blocks for all other complex types.  Parametric Polymorphism and Ad hoc Polymorphism are the language features that allow the compiler and runtimes to differentiate which thing to use while supporting looser coupling.  (e.g. Generics and Function Overloading).  Dependency Inversion depends heavily on Dependency Injection and Dependency Injection depends heavily on that type inference to achieve that level of loose coupling.&lt;/p&gt;
&lt;p&gt;So, the &lt;em&gt;re-usability of a type&lt;/em&gt; is at odds with how &lt;em&gt;reliably another type&lt;/em&gt; (dependent on that first type for instantiation input) &lt;em&gt;can be used with Dependency Injection&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For example, I may have a controller that needs a URL, and that URL could be a string parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class NaiveController
{
	public NaiveController(string oAuthUrl)
	{
		//...
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and I &lt;em&gt;could&lt;/em&gt; use the services collection to inject that URL when the controller is instantiated:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;services.AddSingleton(&amp;quot;http://api.example.com/fugassi&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...and the ASP.NET container can infer that when instantiating a &lt;code&gt;NaiveController&lt;/code&gt; instance.  &lt;strong&gt;But&lt;/strong&gt;, that means you can only have that &lt;em&gt;one&lt;/em&gt; &lt;code&gt;string&lt;/code&gt; object as a service.  If you had another controller that needed a URL, the container wouldn't be able to figure out which string instance to use (if it supported more than one, unnamed).&lt;/p&gt;
&lt;p&gt;So, when you see the use of built-in types, or very ubiquitous types as inputs to controllers and services, consider refactoring to the Options Pattern or refactoring to a Service.  i.e. it's not just that URL is stored in a built-in type, the &lt;code&gt;Uri&lt;/code&gt; type could have been used instead, and the problem would be the same.  Refactored to Options Pattern:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class NaiveController
{
	public NaiveController(IOptions&amp;lt;NaiveControllerOptions&amp;gt; options)
	{
		var url = options.Value.OAuthUrl;
		//...
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Refactoring to a service means that functionality is encapsulated within a service.  In the case of the URL example, rather than creating an options type to store that string value, the controller should actually be dependent on another service that would use that URL value but provide behavior.  Refactoring to a service example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class NaiveController
{
	public NaiveController(IOAuthProvider oAuthProvider)
	{
		//...
	}
}
//...
	services.AddSingleton&amp;lt;IOAuthProvider&amp;gt;(new TwitterOAuthProvider(Configuration.OAuthUrl/*...*/));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is an easy example to understand, but lack of testability of a controller the uses a URL directly might have reared its head before noticing this smell. ¯\_(ツ)_/¯&lt;/p&gt;
&lt;p&gt;See also Introduce Parameter Object refactoring.&lt;/p&gt;
&lt;h3 id="use-of-iconfiguration-outside-of-startup-or-bootstrap"&gt;Use of &lt;code&gt;IConfiguration&lt;/code&gt; outside of &lt;code&gt;Startup&lt;/code&gt; or bootstrap&lt;/h3&gt;
&lt;p&gt;See &lt;a href="#1-2"&gt;1.2&lt;/a&gt;.  Use of &lt;code&gt;IConfiguration&lt;/code&gt; outside of &lt;code&gt;Startup&lt;/code&gt; or bootstrap means you're coupling many classes to &lt;code&gt;IConfiguraiton&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/magazine/mt632279.aspx"&gt;MSDN Magazine - Essential .NET - Configuration in .NET Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-2.1"&gt;Microsoft Docs - Options pattern in ASP.NET Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
		</item>
		<item>
			<title>Supporting Structured Dynamic Configuration in ASP.NET Core appsettings</title>
			<link>http://blog.peterritchie.com/posts/Supporting%20Structured%20Dynamic%20Configuration%20in%20ASP.NET%20Core</link>
			<description>&lt;p&gt;Let's look at a couple of isolated examples of ASP.NET Core configuration, options, and appsettings to set a scope:&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Supporting%20Structured%20Dynamic%20Configuration%20in%20ASP.NET%20Core</guid>
			<pubDate>Fri, 21 Sep 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="configuration-in-asp.net-core-a-brief-retrospection"&gt;Configuration in ASP.NET Core, a Brief Retrospection&lt;/h2&gt;
&lt;p&gt;Let's look at a couple of isolated examples of ASP.NET Core configuration, options, and appsettings to set a scope:&lt;/p&gt;
&lt;p&gt;ASP.NET Core is very flexible and powerful with regard to configuration and options.  One of the features is the ability to bind configuration (textual information) to a concrete type and support strongly-typed configuration.  For example, with the following appsettings:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-JSON"&gt;{
  &amp;quot;option1&amp;quot;: &amp;quot;value1_from_json&amp;quot;,
  &amp;quot;option2&amp;quot;: -1,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A class can be created to structurally contain that data:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class MyOptions
{
	public string Option1 { get; set; }
	public int Option2 { get; set; } = 5;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in your startup, you can either directly bind the data to an instance of the class:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var myOptions = new MyOptions();
Configuration.Bind(myOptions);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or indirectly bind the data via the &lt;em&gt;Options Pattern&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;services.Configure&amp;lt;MyOptions&amp;gt;(Configuration);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...to be injected into other services that have a constructor parameter of type &lt;code&gt;IOptions&amp;lt;MyOptions&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;	public ValuesController(IOptions&amp;lt;MyOptions&amp;gt; myOptions)
	{
		//...
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="what-is-dynamic-configuration"&gt;What is &lt;em&gt;Dynamic Configuration&lt;/em&gt;?&lt;/h2&gt;
&lt;p&gt;Dynamic configuration is really about how the configuration data is handled.  The structure of the configuration is the same, but with a looser &amp;quot;schema&amp;quot;.&lt;/p&gt;
&lt;p&gt;Given the following JSON:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;ConnectionStrings&amp;quot;:
  {
    &amp;quot;BloggingDatabase&amp;quot;: &amp;quot;Server=(localdb)\\mssqllocaldb;Database=EFGetStarted.ConsoleApp.NewDb;Trusted_Connection=True;&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...and much like above, you &lt;em&gt;can&lt;/em&gt; bind it to classes like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class ConnectionStrings
{
	public string BloggingDatabase {get;set;}
}

public class MyConfiguration
{
	public ConnectionStrings ConnectionStrings {get;set;}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With familiar but specific binding code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var myConfiguration = new MyConfiguration();
Configuration.Bind(myConfiguration)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;services.Configure&amp;lt;MyConfiguration&amp;gt;(Configuration);
// ...and use the type IOptions&amp;lt;MyConfiguration&amp;gt; in constructor
// parameters for the options to be injected.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For that &lt;code&gt;Bind&lt;/code&gt; or &lt;code&gt;Configure&lt;/code&gt; (which does the &lt;code&gt;Bind&lt;/code&gt; for you) to work, the &lt;code&gt;ConnectionStrngs&lt;/code&gt; class requires the &lt;code&gt;BloggingDatabase&lt;/code&gt; property so it can match the name in the config.&lt;/p&gt;
&lt;p&gt;The &amp;quot;dynamic&amp;quot; part is when you want to support user-supplied key names and/or variable quantities of key/value pairs. If a user added another connection string, we'd be unable to support it without a redeployment, for example another connection string in the config:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;ConnectionStrings&amp;quot;:
  {
    &amp;quot;BloggingDatabase&amp;quot;: &amp;quot;Server=(localdb)\\mssqllocaldb;Database=EFGetStarted.ConsoleApp.NewDb;Trusted_Connection=True;&amp;quot;,
    &amp;quot;AuditingDatabase&amp;quot;: &amp;quot;Server=(localdb)\\mssqllocaldb;Database=EFGetStarted.ConsoleApp.AuditDb;Trusted_Connection=True;&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We'd have to update our ConnectionStrings class to support the new connection string value.  You can imagine that connection strings are unique to each app, so there's no way to create one class to handle every scenario.&lt;/p&gt;
&lt;p&gt;But, in the end, ASP.NET Core configuration/options are really just a set of key/value pairs, you &lt;strong&gt;can support user-supplied names like this using a dictionary&lt;/strong&gt;.  For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class MyConfiguration
{
	public Dictionary&amp;lt;string, string&amp;gt; ConnectionStrings {get;set;}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And rather than &lt;code&gt;myConfiguration.ConnectionStrings.BloggingDatabase&lt;/code&gt; to access the value, it would be &lt;code&gt;myConfiguration.ConnectionStrings[&amp;quot;BloggingDatabase&amp;quot;]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Binding would be the same:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var myConfiguration = new MyConfiguration();
Configuration.Bind(myConfiguration)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;services.Configure&amp;lt;MyConfiguration&amp;gt;(Configuration);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This technique also supports the ability to more easily reference keys as values of other configuration keys.  Let's say that I want to have my connection strings in one place and configure other things to use those connection string (e.g. shared).  You might consider a JSON config that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;ConnectionStrings&amp;quot;: {
    &amp;quot;BloggingDatabase&amp;quot;: &amp;quot;Server=(localdb)\\mssqllocaldb;Database=EFGetStarted.ConsoleApp.NewDb;Trusted_Connection=True;&amp;quot;,
    &amp;quot;AuditingDatabase&amp;quot;: &amp;quot;Server=(localdb)\\mssqllocaldb;Database=EFGetStarted.ConsoleApp.AuditDb;Trusted_Connection=True;&amp;quot;
  },
  &amp;quot;Repositories&amp;quot;: {
    &amp;quot;BlogEntryController&amp;quot; : {
      &amp;quot;Type&amp;quot;: &amp;quot;Infrastructure.Persistence.SqlServer.SqlServerRepository, aipss, Version=1.7.1.0, Culture=neutral, PublicKeyToken=80e841a370b13835&amp;quot;,
      &amp;quot;Argument&amp;quot;: &amp;quot;BloggingDatabase&amp;quot;
    },
    &amp;quot;BlogEntryControllerAudit&amp;quot; : {
      &amp;quot;Type&amp;quot;: &amp;quot;Infrastructure.Persistence.SqlServer.SqlServerRepository, aipss, Version=1.7.1.0, Culture=neutral, PublicKeyToken=80e841a370b13835&amp;quot;,
      &amp;quot;Argument&amp;quot;: &amp;quot;AuditDatabase&amp;quot;
    },
    &amp;quot;AdminControllerAudit&amp;quot; : {
      &amp;quot;Type&amp;quot;: &amp;quot;Infrastructure.Persistence.SqlServer.SqlServerRepository, aipss, Version=1.7.1.0, Culture=neutral, PublicKeyToken=80e841a370b13835&amp;quot;,
      &amp;quot;Argument&amp;quot;: &amp;quot;AuditDatabase&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msdn.microsoft.com/en-us/magazine/mt632279.aspx"&gt;MSDN Magazine - Essential .NET - Configuration in .NET Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-2.1"&gt;Microsoft Docs - Options pattern in ASP.NET Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
		</item>
		<item>
			<title>Deeper Understanding of The Bridge Pattern</title>
			<link>http://blog.peterritchie.com/posts/Bridge-Pattern</link>
			<description>&lt;p&gt;One of the biggest roadblocks in creating software that stands the test of time is the trouble many people have separating concept from actuality.  To some degree this is a basic human trait.  Shopping for a new house for example, it's common for someone not to buy a house simply because of the colors of the walls despite the triviality of re-painting (or the fact you probably will regardless).  In software, it's common for the separation between abstractions and implementation details to end up bleeding across.  So, it's no surprise that some patterns (or patterns in general?) are hard to truly understand and commonly mis-implemented.  The &lt;a href="https://en.wikipedia.org/wiki/Bridge_pattern"&gt;Bridge Pattern&lt;/a&gt; is one of the prime examples, from my experience.&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Bridge-Pattern</guid>
			<pubDate>Wed, 08 Aug 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;One of the biggest roadblocks in creating software that stands the test of time is the trouble many people have separating concept from actuality.  To some degree this is a basic human trait.  Shopping for a new house for example, it's common for someone not to buy a house simply because of the colors of the walls despite the triviality of re-painting (or the fact you probably will regardless).  In software, it's common for the separation between abstractions and implementation details to end up bleeding across.  So, it's no surprise that some patterns (or patterns in general?) are hard to truly understand and commonly mis-implemented.  The &lt;a href="https://en.wikipedia.org/wiki/Bridge_pattern"&gt;Bridge Pattern&lt;/a&gt; is one of the prime examples, from my experience.&lt;/p&gt;
&lt;h2 id="the-bridge-pattern"&gt;The Bridge Pattern&lt;/h2&gt;
&lt;p&gt;A pattern where the one abstractions uses another abstraction for the two to be loosely coupled (and promote independent evolution of the implementations), it's no wonder I've witnessed misunderstanding.  That, and with diagramming of the pattern from the Gang of Four:&lt;/p&gt;
&lt;div&gt;
&lt;div style="position: relative; background-repeat: no-repeat; background-image: url(http://web.archive.org/web/2017071708651im_/https://www.dofactory.com/images/diagrams/net/bridge.gif);"&gt;
  &lt;span id="overlay" style="position: relative; top: -20px; left: -105px;"&gt;
    &lt;img src="/assets/yelllow%20highlighter%20rectangle%20thick.png" 
        style="opacity: 0.5; background-color: transparent;"/&gt;
  &lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;(...where the highlighted area is the &lt;a href="http://a.co/9ld8Er3"&gt;GoF&lt;/a&gt; pattern).  It's UML, how could that &lt;em&gt;not&lt;/em&gt; convey information effectively?  ;) I'm not a big fan of UML, although it has a place.  In this case, I think it falls short in helping people understand new concepts.  And I honestly think this diagram has contributed to the misunderstanding of Bridge.&lt;/p&gt;
&lt;p&gt;So &lt;em&gt;what does it mean to implement a bridge&lt;/em&gt;?  The name, fortunately, isn't far off: it is intended to act as a bridge between two independent things so those two things remain separate (independent and autonomous) and that the bridge is loosely coupled from the implementation details of what it's bridging.  Although easily confounded with &lt;a href="https://en.wikipedia.org/wiki/Adaptere_pattern"&gt;Adapter Pattern&lt;/a&gt;, Bridge is &lt;em&gt;different&lt;/em&gt;; or more than just adapting one thing to another. Avoiding UML, let's jump right into in a different way of diagramming Adapter's structure.&lt;/p&gt;
&lt;h2 id="but-first-adapter"&gt;But First, Adapter&lt;/h2&gt;
&lt;p&gt;&lt;img src="/assets/Adapter%20Pattern.png" class="img-fluid" alt="Adapter Pattern Diagram" /&gt;&lt;/p&gt;
&lt;p&gt;This diagramming technique uses some recognizable components, although maybe with some unconventional organization/style.  There is some sort of &lt;strong&gt;Client&lt;/strong&gt; that uses an &lt;strong&gt;Adapter&lt;/strong&gt; component.  That usage is via an interface &lt;em&gt;owned&lt;/em&gt; by the Adapter component (&lt;em&gt;within Adapter's rectangle, and within the same compile-time and/or deploy-time context&lt;/em&gt;) and is implemented by an internal component of &lt;strong&gt;Adapter&lt;/strong&gt; (&lt;em&gt;Implementation&lt;/em&gt;).  What is being adapted, the &lt;strong&gt;Service&lt;/strong&gt;, is then accessed by &lt;strong&gt;Adapter&lt;/strong&gt; in &lt;em&gt;some way&lt;/em&gt;.  The connections and containment of &lt;strong&gt;Service&lt;/strong&gt; are intentionally vague (&amp;quot;some way&amp;quot;): it could be accessed as an internal component via compile-time linkage, via a HTTP request, etc.  The important part of the pattern is that the &lt;strong&gt;Adapter&lt;/strong&gt; is providing an single interface to &lt;strong&gt;Client&lt;/strong&gt; that wraps &lt;em&gt;implementation details&lt;/em&gt; being &lt;em&gt;adapted&lt;/em&gt; to another interface.  &lt;strong&gt;Adapter&lt;/strong&gt; is not loosely coupled from the thing it's adapting--&lt;strong&gt;Service&lt;/strong&gt; (adapter's intention &lt;em&gt;is&lt;/em&gt; to use an implementation directly, rather than an abstraction (i.e. one abstraction instead of two).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bridge&lt;/strong&gt; is similar to &lt;strong&gt;Adapter&lt;/strong&gt;, but instead of being tightly-coupled to the &lt;strong&gt;Service&lt;/strong&gt;, it controls that interaction through an interface (or other abstraction).  One view of the Bridge Pattern is to simply access an interface instead of the &lt;strong&gt;Service&lt;/strong&gt; directly.  And that technically gives us a Bridge implementation by adding an interface to an Adapter; but the Bridge is still overly coupled to the evolution of &lt;strong&gt;Service&lt;/strong&gt;.  A more loosely-coupled Bridge accesses &lt;strong&gt;Service&lt;/strong&gt; via an interface (or other abstraction) but &lt;em&gt;owns&lt;/em&gt; that interface (shares a compile-time context or deploy-time context).  That gives us loosely-coupled benefits temporally: an implementor or that interface can be developed independently, or new implementors can be added later.&lt;/p&gt;
&lt;p&gt;When would something like that be needed?  Well &lt;strong&gt;driver&lt;/strong&gt; is often a term associated with Bridge, but I think &lt;strong&gt;provider&lt;/strong&gt; is a much better context (a &amp;quot;driver&amp;quot; is really a type of provider) so I'm going to focus on &lt;em&gt;provider&lt;/em&gt;.  This lets a Bridge facilitate a &lt;em&gt;late-binding&lt;/em&gt; (or at run-time) of a service that provides some functionality (i.e. &lt;em&gt;provider&lt;/em&gt;).  Hopefully diagramming it will make it more clear:&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/Bridge%20Pattern.png" class="img-fluid" alt="Bridge Pattern Diagram" /&gt;&lt;/p&gt;
&lt;p&gt;Notice that the service (&lt;strong&gt;Provider&lt;/strong&gt;) now implements an interface &lt;em&gt;owned&lt;/em&gt; by the &lt;strong&gt;Bridge&lt;/strong&gt; (within the Bridge component in the diagram).  Now, anything that implements that interface can be utilized by &lt;strong&gt;Bridge&lt;/strong&gt;.  Depending on your language/framework, that can be late-bound at runtime.  (&lt;em&gt;Dependency Injection&lt;/em&gt; is your friend here).  To annotate the end-to-end relationship in prose:&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/Bridge%20Pattern%20Prose.png" class="img-fluid" alt="Bridge Pattern Annotated Diagram" /&gt;&lt;/p&gt;
&lt;h2 id="service-orientation"&gt;Service Orientation&lt;/h2&gt;
&lt;p&gt;This is an effective means of achieving &lt;a href="https://en.wikipedia.org/wiki/Service-orientation"&gt;Service Orientation&lt;/a&gt;.  Related to but different than &lt;em&gt;Service-Oriented Architecture&lt;/em&gt; (SOA), Service Orientation aligns with most SOA principles: Loose Coupling, Abstraction, Encapsulation, Statelessness, Autonomy, Discoverability, Reusability, and Composability.  This is accomplished through principles like explicit boundaries, separation of functional context and state by contract.  This is re-enforced by its capability to support a provider model.  Bridge makes it possible to provide and consume a &lt;em&gt;service&lt;/em&gt; (based on principles of Service-Orientation).&lt;/p&gt;
&lt;h2 id="speaking-of-composition"&gt;Speaking Of Composition&lt;/h2&gt;
&lt;p&gt;Since there is some level of adaption in a Bridge implementation, it may very well utilize the Adapter pattern, which may be diagrammed like this.&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/Bridge%20Pattern%20Detail.png" class="img-fluid" alt="Bridge Pattern with Adapter" /&gt;&lt;/p&gt;
&lt;p&gt;Where the implementation of the service remains autonomous but made reusable and composable, through encapsulation and abstraction within an Adapter implementation.&lt;/p&gt;
&lt;h2 id="being-successful"&gt;Being Successful&lt;/h2&gt;
&lt;p&gt;Keeping a Service-Orientation mindset over a Object-Oriented mindset is key to successfully recognizing where Bridge is most suitable making it more likely to succeed.  Remember also that the degree of independence of the &lt;em&gt;bridgees&lt;/em&gt; keeps an implementation being successful and not just needless structure.  e.g. if a client is required to be compile-time bound to any implementation of a provider interface, the two truly cannot evolve independently.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://a.co/9ld8Er3"&gt;Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Bridge_pattern"&gt;Bridge Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Adaptere_pattern"&gt;Adapter Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Service-orientation"&gt;Service Orientation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
		</item>
		<item>
			<title>Innovation</title>
			<link>http://blog.peterritchie.com/posts/Innovation</link>
			<description>&lt;p&gt;For our purposes, let’s define it as a “big new” for your business or a “big different” in how you operate your business.&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Innovation</guid>
			<pubDate>Mon, 02 Jul 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="what-is-innovative"&gt;What is innovative?&lt;/h2&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;For our purposes, let’s define it as a “big new” for your business or a “big different” in how you operate your business.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;― &lt;a href="https://web.archive.org/web/20170105015034/http:/www.forbes.com:80/sites/darden/2014/08/04/why-is-innovation-so-hard/#4fd5e64046fd"&gt;https://web.archive.org/web/20170105015034/http://www.forbes.com:80/sites/darden/2014/08/04/why-is-innovation-so-hard/#4fd5e64046fd&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="what-is-innovation-and-innovating"&gt;What is innovation and innovating&lt;/h2&gt;
&lt;p&gt;Innovation is&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;The act of innovating&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;― &lt;a href="https://web.archive.org/web/20170215125906/https:/en.wiktionary.org/wiki/innovation"&gt;https://web.archive.org/web/20170215125906/https://en.wiktionary.org/wiki/innovation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Innovating is, of course, being innovative or:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;To begin or introduce (something new) for the first time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;―&lt;a href="https://www.thefreedictionary.com/innovating"&gt;https://www.thefreedictionary.com/innovating&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All fine and satisfies pedantry, but what does innovation really mean? If it's truly &lt;em&gt;something new&lt;/em&gt; or the &lt;em&gt;first time&lt;/em&gt; then that means it occured through &lt;em&gt;ideation&lt;/em&gt;, &lt;em&gt;exploration&lt;/em&gt;, and &lt;em&gt;experimentation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I think ideation and exploration must go hand in hand. Ideation is the creation, development, and communication of new ideas. New ideas (ones you don't already have) come from observation. That act of observation (again, if you already have an idea, the observation is complete) is done through exploration. You explore things; explore clients doing things with your system, exploration through conversation with clients, exploring different ways of thinking and different ways of doing things. It's that observation that leads to ideas, either as Aha! moments observing day-to-day life or observing planned exploration.&lt;/p&gt;
&lt;p&gt;Ideas are theories, they are generally something that someone thinks can work but does not yet have the evidence. Something needs to be done to prove or disprove the idea. If the idea is proved then innovation might have occurred. If the idea is disproved then you don't move forward with it. With theories, success is when it is no longer a theory. That process is called experimentation. There really is no &amp;quot;failure&amp;quot;, something is always learned from the experiment. But the business practice of &amp;quot;fail fast&amp;quot; is basically that: perform experimentations and know what isn't going to work as quickly as possible.&lt;/p&gt;
&lt;h2 id="how-do-you-stifle-or-prevent-innovation"&gt;How do you stifle or prevent innovation&lt;/h2&gt;
&lt;p&gt;Another way of thinking about actions designed to prevent failure is that they are actions that focus on ensuring success. Doing things to ensure success and avoid failure is avoiding experimentation and thus exploration. Avoiding failure means controlling as many of the variables as possible to be able to guarantee an outcome, not introduce variables to promote random outcomes.&lt;/p&gt;
&lt;p&gt;You'll never be able to come up with many new ideas without exploration, and you'll never be able to prove out new ideas without experimentation (not knowing if you're going succeed or not). And this exploration and experimentation cannot be scheduled (you cannot sit down and say you're going to spend 2 weeks exploring and experimenting in the field of faster than light travel and schedule to start work on delivering it 3 Mondays from now).&lt;/p&gt;
&lt;p&gt;The actions and mindset behind exploration and experimentation are in contrast with delivering value. You can stifle and even prevent innovation by expecting innovation efforts to be done within the same process as delivering value.&lt;/p&gt;
&lt;h2 id="how-do-you-promote-innovation"&gt;How do you promote innovation&lt;/h2&gt;
&lt;p&gt;I started with how you stifle innovation to try to highlight that promoting innovation is mostly stopping the instincts and habits that stifle innovation.&lt;/p&gt;
&lt;h3 id="combat-confirmation-biases"&gt;Combat confirmation biases&lt;/h3&gt;
&lt;p&gt;Confirmation bias is the human tendency to be bias towards ideas and concepts that confirm what we already know. Innovation is introducing new things, not leveraging what we already know. We want to avoid confirming the things we already know and think outside the box. Actively avoiding confirming your beliefs can be hard, habitually and emotionally.&lt;/p&gt;
&lt;p&gt;Promoting critical thinking goes a long way to combating confirmation bias.&lt;/p&gt;
&lt;h3 id="promote-critical-thinking"&gt;Promote critical thinking&lt;/h3&gt;
&lt;p&gt;It may sound obvious but people get better at a skill with training. If you have a set of critical thinkers and have been innovating, that's one thing. If you want to innovate, the right training is essential to purposefully achieving that. Innovation requires good critical thinking skills—not taking things at face value but objectively analyzing and evaluating to form a judgement. A systematic approach to understanding something, focusing on delivering the understanding and not viewing un-forecasted understanding as &amp;quot;failures&amp;quot;.&lt;/p&gt;
&lt;h3 id="segregate-it"&gt;Segregate it&lt;/h3&gt;
&lt;p&gt;Innovation is the hopeful, eventual delivery of new value. But companies need to be continually delivering value, and delivery value predictably. Those two efforts need to be done in isolation. Experimentation destabilizes delivery and planned delivery constrains/eliminates experimentation. So, the two initiatives must have different vision, different goals, different practices, etc. Thinking your organization &amp;quot;innovates&amp;quot; while not segregating the innovation initiative away from the initiatives delivering value, you're inadvertently stifling innovation. The efforts towards innovation and predictable value delivery need to be separate. The vision, principles, and practices to predicable value delivery is contradictory to the vision, principles, and practices to innovating. The two need to be separate at an organizational level so the organization matches where the two fundamentally diverge.&lt;/p&gt;
&lt;p&gt;The initiative to innovate needs to be fed into value delivery, at the right time. Teams that innovate are not usually the best teams to deliver functionality, they're different skillsets and leveraging one in the place of the other isn't efficient and reduces ROI. You actually want less critical thinking when delivering value, not more. Perfection is the enemy of executing and critical thinking often focuses on ways of moving towards perfection.&lt;/p&gt;
&lt;h3 id="measure-it"&gt;Measure it!&lt;/h3&gt;
&lt;p&gt;Anything worth doing is worth knowing it's being done right. Measuring innovation efforts is vital to success. Leveraging an innovation capability is a form of critical thinking: don't let your confirmation biases let you think you're innovating well. Treat the whole processes as experimentation: systematically observe what's going on and make judgments on those observations. Use experimentation to improve the innovation process. The areas that can benefit from innovation probably also need measurement: look to trends, market analysis, etc. to provide the metrics to help prioritize where to innovate.&lt;/p&gt;
&lt;p&gt;Other measures might include: tracking innovation through to delivery, resources spent on innovation, resources gained from innovation, what are or have been innovations, leadership metrics focusing on innovation, rate of innovation, areas of innovation, culture (get feedback from those in the trenches to find out how well the effort is viewed and ways of innovating your innovation).&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;p&gt;Galbraith, Jay. (February 2012). Designing the Innovating Organization. Retrieved from &lt;a href="http://web.archive.org/web/20170812123800/http://www.jaygalbraith.com/component/rsfiles/download-file/files?path=whitepapers%2Fdesigninginnovatingorg.pdf"&gt;http://web.archive.org/web/20170812123800/http://www.jaygalbraith.com/component/rsfiles/download-file/files?path=3Dwhitepapers%2Fdesigninginnovatingorg.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hess, Edward D. (August 2014). Why Is Innovation So Hard? Retrieved from &lt;a href="https://web.archive.org/web/20170105015034/http:/www.forbes.com:80/sites/darden/2014/08/04/why-is-innovation-so-hard/#4fd5e64046fd"&gt;https://web.archive.org/web/20170105015034/http://www.forbes.com:80/sites/darden/2014/08/04/why-is-innovation-so-hard/#4fd5e64046fd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hamel, Gary and Tennant, Nancy. (April 2015). The 5 Requirements of a Truly Innovative Company. Retrieved from &lt;a href="https://web.archive.org/web/20180126024656/https:/hbr.org/2015/04/the-5-requirements-of-a-truly-innovative-company"&gt;https://web.archive.org/web/20180126024656/https://hbr.org/2015/04/the-5-requirements-of-a-truly-innovative-company&lt;/a&gt;&lt;!-- 2018, July--&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Mapping a Domain Model to RESTful</title>
			<link>http://blog.peterritchie.com/posts/Mapping+a+Domain+Model+To+RESTful</link>
			<description>&lt;p&gt;In the Object-Oriented discipline, an &lt;em&gt;object&lt;/em&gt; &lt;strong&gt;is the bundling of data and behavior&lt;/strong&gt;.  Martin Fowler defined the First Law of Distributed Objects.  That law states "&lt;strong&gt;Don't distribute your objects&lt;/strong&gt;".&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Mapping+a+Domain+Model+To+RESTful</guid>
			<pubDate>Fri, 29 Dec 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In the Object-Oriented discipline, an &lt;em&gt;object&lt;/em&gt; &lt;strong&gt;is the bundling of data and behavior&lt;/strong&gt;.  Martin Fowler defined the First Law of Distributed Objects.  That law states &amp;quot;&lt;strong&gt;Don't distribute your objects&lt;/strong&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;domain model&lt;/em&gt; is a conceptual &lt;strong&gt;object model of a domain's behavior and structure (entities, data, relationships)&lt;/strong&gt;.  It is considered an anti-pattern if a domain model is &lt;em&gt;anemic&lt;/em&gt;: if it has hardly any behavior.&lt;/p&gt;
&lt;p&gt;RESTful APIs have become the de facto standard for distributed applications that provides &lt;strong&gt;stateless access to and manipulate textual representations of &lt;em&gt;resources&lt;/em&gt;&lt;/strong&gt;.  i.e. the textual representation is a document or file.  A resource is a mapping to a concept or concepts; a resource is not the implementation details that may have been used during the request for the resource.&lt;/p&gt;
&lt;p&gt;We're in an industry with a complexity that requires distributing domain behavior across multiple processes.  So, if RESTful APIs are about providing access to documents or files, yet we need to distribute behavior, what do we do?&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;This post is about making a &lt;em&gt;domain model&lt;/em&gt; accessible by RESTful API, and not just making your data (entities) available to the outside world.  That doesn't mean there's no need to provide access to your data a resources, but providing data only by way of your domain model (that is also supposed to abstract &lt;em&gt;behavior&lt;/em&gt; is kinda pointless).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our industry is very dichotomous: only one thing seems to the right thing and any other thing is wrong (more like the other thing is ignored: Shiny New Thing, Maslow's Hammer, etc.).  Those things can be right, but not &lt;em&gt;on their own&lt;/em&gt;: it's contextual.&lt;/p&gt;
&lt;p&gt;But why do these two things (object-oriented and RESTful) seem to conflict with each other?  How are we to maintain a dichotomy if we have two correct things?  It gets back to that &lt;em&gt;context&lt;/em&gt; I talked about earlier.  We will &lt;em&gt;always&lt;/em&gt; need to perform activities and tasks.  Sometimes it's all but &lt;em&gt;required&lt;/em&gt; to distribute that processing.  That doesn't mean Object-Oriented and RESTful are contradictory.  Each provides a scope by which to follow their generally accepted practices, in &lt;em&gt;that context&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We don't want to &lt;em&gt;distribute objects&lt;/em&gt;, but we want to &lt;em&gt;distribute processing&lt;/em&gt;.  How do we do this with domain models consisting of objects?  With RESTful we're expected to be focused on &lt;em&gt;resources&lt;/em&gt;.  It sounds very limiting, but the limit is really a thinking error.  Some people seem stuck on a RESTful API being entirely about resources (nouns) and not about behavior (verbs).  But, that is limited only by what we consider the resource to be.&lt;/p&gt;
&lt;p&gt;In RESTful, resources effectively need to manifest as &lt;em&gt;documents&lt;/em&gt;, but that doesn't mean our API can't provide access to execution of behavior.  Even with the narrowest view of a resource that API still provides access to behavior.  In the simplest of scenarios that behavior is one the methods POST, GET, PUT, PATCH, or DELETE (there's also HEAD, OPTIONS, TRACE, and CONNECT; but we don't use those in with REST).  Those methods are sometimes referred to as &lt;em&gt;verbs&lt;/em&gt;.  Someone unfamiliar with HTTP and REST may simply proclaim &amp;quot;create more methods!&amp;quot;.  That's wrong, that's not REST and that's not HTTP (well, &lt;em&gt;syntactically&lt;/em&gt; it &lt;em&gt;is&lt;/em&gt; HTTP; just like &lt;em&gt;&lt;code&gt;goto&lt;/code&gt;&lt;/em&gt; is syntactically acceptable)—the method is applied to the &lt;em&gt;resource&lt;/em&gt;, not what the &lt;em&gt;resource represents&lt;/em&gt;.  What we &lt;em&gt;can&lt;/em&gt;, and &lt;em&gt;should&lt;/em&gt;, do is consider that a resource can be a representation of a &lt;em&gt;request to perform behavior&lt;/em&gt;.  The &lt;em&gt;document&lt;/em&gt;—or contents of the resource—then becomes the result or outcome of that behavior.  We can realize that objective by in simplistic circumstances by converting the behavior verbs we want to execute to resource nouns.  I don't mean just using a verb like a noun like &amp;quot;What's your &lt;em&gt;ask&lt;/em&gt;?&amp;quot;  I mean &lt;a href="https://en.wikipedia.org/wiki/Nominalization"&gt;&lt;em&gt;nominalizing&lt;/em&gt;&lt;/a&gt; the verb into a noun.  e.g. &amp;quot;Explain&amp;quot; to &amp;quot;Explanation&amp;quot; or &amp;quot;Generate&amp;quot; to &amp;quot;Generation&amp;quot; or &amp;quot;Calculate&amp;quot; to &amp;quot;Calculation&amp;quot;... I'm sure you can find lists or an &lt;a href="https://www.wordsapi.com/"&gt;API&lt;/a&gt; to get the noun form of a verb.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;To be clear: I'm suggesting that RESTful and OO can complement each other.  I'm not suggesting pick one.  I am recommending using each for the right context. Continue to use OO for modeling a domain (behavior and data, organized by object) to implement at the process level and continue to use HTTP and RESTful as the protocol for distributed application APIs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you already have a domain model you want to make accessible via a RESTful API, you might think Contract First or Design by Contract is out the window.  I don't think this is true.  I think any interface intended to be used by anything yet-to-be-designed needs to be &lt;em&gt;Concepts-Oriented&lt;/em&gt;--that is the interface should only present conceptual things (i.e. the concepts that have led to an implementation).  Contract First and Design by Contract are easy ways to get that because they suggest you define that contract up front, prior to solutioning and implementation.  That's fine when you can do it, but it's really hard to get &lt;em&gt;Concepts-Oriented&lt;/em&gt; within a design that evolves along with the implementation over time with that chicken-and-egg &amp;quot;Contract First&amp;quot; or &amp;quot;Design by Contract&amp;quot; mentality.&lt;/p&gt;
&lt;p&gt;So, back to a domain model that you want to make accessible by RESTful APIs... The ideal domain model consists of objects that implement encapsulation and abstraction properly.  That is, they hide implementation details and provide access to behavior.  That behavior needs to be mapped to a &amp;quot;resource&amp;quot; to be made available via the RESTful API.  The details of that mapping have been explained above; but how do we work those nouns into a RESTful API?  It's not just a matter of sticking this new resource as a root path or within any-old path hierarchy.  The resource as an operation request needs to be associated with the concept it applies to.&lt;/p&gt;
&lt;p&gt;In RESTful, the concepts we make available are &lt;em&gt;resources&lt;/em&gt;.  For one resource to be applied within another, we effectively make it a sub-resource.  The parent resource could be completely conceptual, i.e. like a business function: &lt;code&gt;/accounting/reconciliation&lt;/code&gt;.  But, I'd argue that there might be something missing from the domain if you find something that is unable to be truly modeled as a resource.  e.g. &lt;code&gt;/accounts/1234/reconciliation&lt;/code&gt;. So, in this case, if we POSTed to this URI we'd be requesting the creation of a &lt;em&gt;reconciliation&lt;/em&gt; resource (AKA the request to execute the &lt;code&gt;reconcile&lt;/code&gt; behavior) for &lt;code&gt;account&lt;/code&gt; 1234.&lt;/p&gt;
&lt;p&gt;When modeling behaviors, especially over the network, we shouldn't expect them to be atomic--that is happening effectively instantaneously.  Luckily HTTP accounts for that with status codes like 202 Accepted.  When 202 is used, the response should fulfil the HATEOS constraint of REST and provide a hypermedia link to the new &amp;quot;resource&amp;quot;. That new resource can be accessed directly for status of the request or to get the outcome.  That doesn't stop you from &lt;em&gt;not&lt;/em&gt; using 200 in circumstances where the request could be executed atomically.  Any HTTP-compliant client should handle 200 and 202.  The &lt;em&gt;request to perform behavior&lt;/em&gt; model fits well with an independence from atomicity because if the behavior isn't atomic, you really are interested in the &amp;quot;request&amp;quot; and whether it's completed.&lt;/p&gt;
&lt;h2 id="benefits"&gt;Benefits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Intention-revealing interfaces.  An API that provides an interface that details the intent of the request it's easier to understand what it does--simply building on standard HTTP methods POST, GET, PUT, PATCH, DELETE, any other behavior the API provides is not obvious.&lt;/li&gt;
&lt;li&gt;Makes the implicit explicit.  The implicit waiting for a non-atomic request becomes explicit.&lt;/li&gt;
&lt;li&gt;RESTful: this maintains the &lt;em&gt;resource&lt;/em&gt; concept without having to deviate from it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="being-successful"&gt;Being Successful&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Recognize a Command-Query Responsibility Segregation (CQRS) point of view of how you're making the resources available in your RESTful APIs.&lt;/li&gt;
&lt;li&gt;Think declaratively rather than imperatively: model a resource on the conceptual operation that needs to be performed (declarative), rather than simply CRUD abilities to data providing the ability to tell the API how to perform an operation (imperative)&lt;/li&gt;
&lt;li&gt;Treat atomicity as the exception, not the rule.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How might this affect the design of Entity Services?  Well, that's a topic of a future post&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/bliki/FirstLaw.html"&gt;First Law of Distributed Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/eaaCatalog/domainModel.html"&gt;Domain Model Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling"&gt;REST API Design - Resource Modeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm#sec_5_2_1_1"&gt;Resources and Resource Identifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Nominalization"&gt;Nominalization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wordsapi.com/"&gt;Words API&lt;/a&gt;&lt;!-- 2017, December--&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
		</item>
		<item>
			<title>What Is Architecture</title>
			<link>http://blog.peterritchie.com/posts/What-Is-Architecture</link>
			<description>&lt;p&gt;Getting someone to explain architecture is sometimes like asking them what &lt;em&gt;disinterested&lt;/em&gt; means or whether &lt;em&gt;irregardless&lt;/em&gt; is a word. The number of answers you get from people has a complexity O(n log n) to the number of people you ask.&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/What-Is-Architecture</guid>
			<pubDate>Thu, 21 Dec 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Getting someone to explain architecture is sometimes like asking them what &lt;em&gt;disinterested&lt;/em&gt; means or whether &lt;em&gt;irregardless&lt;/em&gt; is a word. The number of answers you get from people has a complexity O(n log n) to the number of people you ask.&lt;/p&gt;
&lt;p&gt;Architecture is defined as:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;The fundamental organization of a system, embodied in its components, their relationships to each other and the environment, and the principles governing its design and evolution. (&lt;a href="http://standards.ieee.org/findstds/standard/1471-2000.html"&gt;ANSI/IEEE 1471-2000&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;The structure of components, their interrelationships, and the principles and guidelines governing their design and evolution over time. (&lt;a href="http://www.opengroup.org/public/arch/p1/togaf_faq.htm"&gt;TOGAF&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One thing that is very subtle about these definitions is the aspect about &amp;quot;design and evolution&amp;quot; especially regarding &amp;quot;over time&amp;quot;.&lt;/p&gt;
&lt;p&gt;Architecture is the fundamental component granularity of a system and the component structure, the interrelationships of those components, and the principles governing the lower-level design and evolution from initiation or conception of a system.&lt;/p&gt;
&lt;p&gt;This means the architecture applies before many of the &lt;em&gt;logical&lt;/em&gt; design decisions can be made. Architecture considers the high-level &lt;em&gt;concepts&lt;/em&gt;, &lt;em&gt;philosophies&lt;/em&gt;, and &lt;em&gt;principles&lt;/em&gt; (e.g. domain topics, vision, patterns) that would go into the lower-level design.  The subtlety here is that these are the basis of the logical decisions (which type of database, what format data might be in, algorithms, which language is most appropriate, etc.).&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Before getting too much further, we should dig into &lt;em&gt;Conceptual v Logical&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Generally accepted design principles involve understanding the concepts of the real-world domain (or &amp;quot;business&amp;quot;), it's processes, what decisions are made, the workflow, expectations, results, etc.  Those are the &lt;em&gt;concepts&lt;/em&gt; of the domain.  i.e. that is &lt;em&gt;conceptual information&lt;/em&gt; as it relates to an implementation.  That conceptual information allows us (through analysis) to discover and evaluate &lt;em&gt;logical&lt;/em&gt; solutions or automation techniques.  The logical information builds a potential model to guide the logical implementation.  That logical model would not be possible (or would not be accurate) without collecting and understanding the concepts and formulating/describing a conceptual model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If architecture is that much before those logical decisions can be made, what goes into deciding upon an architecture?  Over-and-above the principles, philosophies, and generally acceptable practices; much of what governs how something is architected involves the quality attributes required of the solution.  Quality attributes are often called non-functional requirements (you may be able to guess my preference).  There are lots of quality attributes that impact an architecture.  Also, many of these attributes can be (or have been) decided upon before lower-level functional details.  I could go on about each attribute like availability, disaster recovery, fault tolerance, performance, reporting, maintainability, etc.; but that's an entire series of posts.  Many of these attributes are necessary or known &lt;em&gt;despite&lt;/em&gt; the functional requirements.  An architecture needs to take these things into consideration to be correct. (A design realizes those considerations, or should)&lt;/p&gt;
&lt;p&gt;Some of the confusion of what architecture is may come from the fact that not all software is written from the very beginning.  Iterative changes to software also mean iterative changes to architecture.  Those changes to architecture are done with a greater knowledge of logical and implementation details and thus a higher risk of becoming influenced by logical details, or have them leak into the architecture such that they may be hard to differentiate between the two.&lt;/p&gt;
&lt;p&gt;So, in terms of software that changes iteratively (is there any other kind?), how can we ensure the vision of the architecture remains visionary and influences the iterative changes of software from a high-level aspect? Now that we have a clearer understanding of the level and point of view of the architecture we can better keep conceptual concerns in the architecture and logical concerns lower in the design and implementation. Also knowing that architecture componentizes conceptually and makes many decisions on relationships between components based on quality attributes, we can make informed determinations between architectural changes and design/implementation changes.&lt;/p&gt;
&lt;p&gt;Sometimes the architecture cannot be finalized until a great amount of understanding of a solution.  Even though the software may not be implemented (and thus incrementing) that understanding can negatively influence what should be architectural decisions.  For example, what does a REST API &lt;em&gt;actually&lt;/em&gt; model?  With a deep understanding of a solution (like data may be stored in a relational database with specific table names) that understanding can result in interfaces overly-coupled to the implementation.  This can manifest in interfaces that are not based on conceptual information but on logical information.  For example, when we know there's really a database implementation detail and a &amp;quot;resource&amp;quot; may be a row in the database, it can become hard to differentiate POST/GET/PUT/PATCH/DELETE from CREATE/READ/UPDATE/DELETE because those are the logical details of the database.&lt;/p&gt;
&lt;p&gt;A related area, and a personal peeve, is when &amp;quot;MVC&amp;quot; applications are really &amp;quot;C&amp;quot; applications.  In these applications there is &lt;em&gt;really&lt;/em&gt; no distinct conceptual information (i.e. a model) and everything is effectively muddled together in the controller (or &lt;em&gt;big ball of mud&lt;/em&gt;).  In an MVC application the model is conceptual to &lt;em&gt;model&lt;/em&gt; the domain (i.e. the domain we need to understand to initiate or conceive of a project/product) and the view is a &lt;em&gt;view&lt;/em&gt; of that model based on the behavioral concepts the application is solving for or UI technical details.&lt;/p&gt;
&lt;h2 id="being-successful"&gt;Being Successful&lt;/h2&gt;
&lt;h3 id="understand-architectural-boundaries"&gt;Understand Architectural Boundaries&lt;/h3&gt;
&lt;p&gt;It's important to understand from a general point of view, where architecture can start (what it more-or-less depends upon) and end (or when it influences other things).  Much of software development is imperial, so also an understanding of what architecture means in a product/project context also contributes a better understanding of where things do and do not fit into &amp;quot;architecture&amp;quot;.&lt;/p&gt;
&lt;h3 id="understand-boundaries-should-involve-only-concepts"&gt;Understand Boundaries Should Involve Only Concepts&lt;/h3&gt;
&lt;p&gt;An architecture (a.k.a. a &lt;em&gt;good&lt;/em&gt; architecture) considers the &lt;em&gt;conceptual&lt;/em&gt; to discover the &lt;em&gt;logical&lt;/em&gt;.  It's important to understand that despite architectural evolution in-step with software evolution that only conceptual information should live in the &amp;quot;architecture&amp;quot; and that there isn't one description/specification to fit architecture &lt;em&gt;and&lt;/em&gt; design (describing the concepts is different from specifying the logical details).&lt;/p&gt;
&lt;h3 id="understand-conceptual-from-logical"&gt;Understand Conceptual from Logical&lt;/h3&gt;
&lt;p&gt;An architecture describes those conceptual details, how they're componentized, and their type of relationships.  That should ultimately influence the design, not the other way around.  If you're evolving a complex system over time, make sure you understand the conceptual information (i.e. the domain, its vocabulary, processes--independent of whether it's automated within software) and the logical (how it is or may be automated with software).&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.opengroup.org/subjectareas/enterprise/togaf"&gt;TOGAF© Version 9.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zachman.com/about-the-zachman-framework"&gt;The Zachman Framework 3.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
		</item>
		<item>
			<title>Comments in Markdown</title>
			<link>http://blog.peterritchie.com/posts/Comments-in-Markdown</link>
			<description>&lt;p&gt;I was authoring some markdown the other day, and I wanted to make a note to myself about something I needed to return to later, when I came back to the document.  I thought to myself that this seems like a comment, something I don't want to see in the rendered markdown, just in the "source".&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Comments-in-Markdown</guid>
			<pubDate>Wed, 13 Dec 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I was authoring some markdown the other day, and I wanted to make a note to myself about something I needed to return to later, when I came back to the document.  I thought to myself that this seems like a comment, something I don't want to see in the rendered markdown, just in the &amp;quot;source&amp;quot;.&lt;/p&gt;
&lt;p&gt;I think for the most part that this hack is likely renderer-specific (having no real standard around what rendering really does beyond visable HTML); but after some research and some trial and error; you can hack a comment into your markdown by using an un-referenced reference link.  Reference links have the format: &lt;code&gt;[link text][link-label]&lt;/code&gt; that references a link label definition like &lt;code&gt;[link-label]: http://example.com&lt;/code&gt;.  You may omit the link text and simply use the label: &lt;code&gt;[link text][link-label]&lt;/code&gt; to reference a link, which would look like this: &lt;a href="http://www.example.com"&gt;link-label&lt;/a&gt;.  Labels may have spaces in them, so you can really have label that is the link text: &lt;code&gt;[link text]&lt;/code&gt; and the link label definition: &lt;code&gt;[link text]: http://www.example.com&lt;/code&gt; which would look like &lt;a href="http://www.example.com"&gt;link text&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Those link label defintions can appear anywhere in your markdown (as long as there's a blank line above it).  And, if you don't include the link references anywhere (e.g. &lt;code&gt;[link-label]&lt;/code&gt;) then the what is in the link label definition is completely ignored (i.e. does not show up in the rendered HTML).  So, to add a comment to your markdown simply add an unused link label definition:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[*]: # &amp;quot;TODO: Deal with this later&amp;quot;&lt;/code&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Message-oriented Content and Properties/Attributes</title>
			<link>http://blog.peterritchie.com/posts/Message-oriented%20Content%20and%20Properties-Attributes</link>
			<description>&lt;p&gt;Like HTTP, what should be in the headers and what should be in the message "content" can be difficult to pin down definitively.  Unlike HTTP (i.e. REST), message-oriented communication can be a lot easier when it comes to the "resource identifier".&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Message-oriented%20Content%20and%20Properties-Attributes</guid>
			<pubDate>Mon, 18 Sep 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Like HTTP, what should be in the headers and what should be in the message &amp;quot;content&amp;quot; can be difficult to pin down definitively.  Unlike HTTP (i.e. REST), message-oriented communication can be a lot easier when it comes to the &amp;quot;resource identifier&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/Introduction.html"&gt;Messaging systems almost always consider &amp;quot;content&amp;quot; the &amp;quot;body&amp;quot; and have the concept of a message &amp;quot;header&amp;quot; that contains metadata about the message&lt;/a&gt;; much in the same way as HTTP.  And like HTTP, what shouldn't be in the message body can sometimes be bewildering.&lt;/p&gt;
&lt;p&gt;There are some straight-forward, established patterns and practices that cover some of the considerations about what might not be &amp;quot;content&amp;quot;.  For example: &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/EnvelopeWrapper.html"&gt;Envelope Wrapper&lt;/a&gt; details that non-body data should be in an &amp;quot;envelope&amp;quot; (which then becomes part of the &amp;quot;content&amp;quot; when you can't support a messaging system's headers).  But this can also be made less deterministic by established patterns like &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/ContentBasedRouter.html"&gt;Content-based Router&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Message-oriented is first and foremost about loose-coupling.  For the most part, the fact that you're using messaging (and that there is a message to be sent and to be received) should be the only thing that couples a producer to a consumer.  To some extent that's why patterns like &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/ContentBasedRouter.html"&gt;Content-based Router&lt;/a&gt; exist, the sender of a message shouldn't need to do anything special for the message to be routed.  But, &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/ContentBasedRouter.html"&gt;Content-based Router&lt;/a&gt; is about routing based on &lt;em&gt;content&lt;/em&gt;, there are also reasons to route messages that may have nothing to do with content.  This doesn't mean pushing those things into the content in order be routed is the right thing to do.&lt;/p&gt;
&lt;p&gt;As mentioned earlier, metadata &lt;em&gt;about&lt;/em&gt; the content or the message should not be within the content and should be part of the message attributes or within the message headers (depending on how messages are transported, I'll refer to these simply as &lt;strong&gt;message header values&lt;/strong&gt; or something within the &lt;strong&gt;message headers&lt;/strong&gt;). This is the predominant rule of thumb.  Information like &lt;em&gt;sender&lt;/em&gt; or &lt;em&gt;date/time sent&lt;/em&gt; are obviously metadata &lt;em&gt;about&lt;/em&gt; the message (or the sender) and are good candidates to be placed in the message headers.&lt;/p&gt;
&lt;p&gt;What &lt;em&gt;is&lt;/em&gt; data &lt;em&gt;about&lt;/em&gt; content can be vague though.  &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/ContentBasedRouter.html"&gt;Content-based Router&lt;/a&gt; points out routing and routing sometimes involved addressing.  With a Point-to-Point channel, addressing from a producer's point of view is simply just sending the message to a well-known queue.  In situations where the producer needs to &lt;em&gt;address&lt;/em&gt; a message to a consumer or a &lt;em&gt;type of consumer&lt;/em&gt;, message headers should be used for this.&lt;/p&gt;
&lt;p&gt;Some &lt;a href="https://en.wikipedia.org/wiki/List_of_HTTP_header_fields"&gt;HTTP header fields&lt;/a&gt; might be more familiar and a good source of inspiration.  For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17"&gt;Content-Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.8"&gt;Authorization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/HTTP_cookie"&gt;Cookie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host"&gt;Host&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="content-type"&gt;Content-Type&lt;/h3&gt;
&lt;p&gt;In message-oriented systems, this is often referred to as a &lt;em&gt;Message Type&lt;/em&gt;.  Like HTTP, the format of a message could be unique.  In cases where the type of message changes, a message header field that allows a consumer to differentiate the content properly is very useful (essential?).  And to be clear, the headers portion of HTTP (actually, all but the message-body) is a fixed format: ASCII.  The &lt;em&gt;Content-Type&lt;/em&gt; field details (in that predetermined format/encoding) what encoding and format the message-body is in.  Message header values should be viewed the same way: in a predefined format/encoding and something like &lt;em&gt;Message-Type&lt;/em&gt; details the format/encoding of the body.&lt;/p&gt;
&lt;h3 id="authorization"&gt;Authorization&lt;/h3&gt;
&lt;p&gt;Typically the &lt;em&gt;authentication&lt;/em&gt; aspect of something like this is only used in message-oriented system (authorization handled by channel, for example).  Validating that a message came from a known producer is frequently required.  Many message transport systems can, like HTTP can, do that authentication/authorization within the transport; but application-specific authorization is common.&lt;/p&gt;
&lt;h3 id="cookie"&gt;Cookie&lt;/h3&gt;
&lt;p&gt;A cookie is a form of encoding stateful information so that a stateless protocol like HTTP can retain state from request to request.  It's extremely important to view message-oriented channels as stateless as well and if &lt;em&gt;state&lt;/em&gt; is required to be known across messages, this needs to be included (or linked to) when sending the message.  This typically doesn't follow a cookie-like model (i.e. including the actual state within the request) but the message is &lt;em&gt;correlated&lt;/em&gt; to that state and the receiver is able to &lt;em&gt;retrieve&lt;/em&gt; that state.  Typically this is covered by other messaging patterns like &lt;em&gt;Correlation ID&lt;/em&gt; or &lt;em&gt;Causation ID&lt;/em&gt; to provide identification of that &lt;em&gt;context&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="host"&gt;Host&lt;/h3&gt;
&lt;p&gt;Sometimes addressing of messages can simply be the fact of sending a message to a particular queue name/endpoint.  Sometimes there is application- or session-context that affects addressing, in which case addressing is included when the message is sent.  HTTP &lt;em&gt;Host&lt;/em&gt; is similar to that, in that it provides the address where the message is sent to.  Typically in HTTP this is the same as the value in the URI involved in the request, but an HTTP request could be forwarded to another URI.  From a message-oriented point of view, this type of thing is generally referred to as a [Recipient List] when addressing to specific instances of consumers or &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/RoutingTable.html"&gt;Routing Slip&lt;/a&gt; when addressing by some level of context that a consumer that understands the context can consume.&lt;/p&gt;
&lt;p&gt;Some other useful messaging-specific patterns involving header-related fields:&lt;/p&gt;
&lt;h3 id="message-id"&gt;Message ID&lt;/h3&gt;
&lt;p&gt;There are many cases where the producer of a message must identify the message in some way.  &lt;em&gt;Message ID&lt;/em&gt; is a header value that holds that application-unique identifier of the message being sent.
##Correlation ID
The Correlation ID header value provides an application-unique identifier to some sort of context.  Often that is communication-unique (not just application-unique).  i.e. it may be a re-use of some other ID.  e.g. if the context of a given message is the fact that another message is being processed, the Correlation ID may be the Message ID of that original message (although, some prefer a Causation ID for that; but there's more semantics to that).  The re-used ID may have nothing directly to do with messaging.  For example, it could be the primary key of whatever is related to message being sent (e.g. &lt;code&gt;CaseId&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id="causation-id"&gt;Causation ID&lt;/h3&gt;
&lt;p&gt;Much the same as a Correlation ID, but the added semantics of value being a Message ID sent previously.&lt;/p&gt;
&lt;h3 id="sequence-ordinal"&gt;Sequence Ordinal&lt;/h3&gt;
&lt;p&gt;Although using message-orientation is partially to accomplish some level of abstraction of a consumer from a producer and both from the physical transport method, anything used in a system introduces coupling and what is coupled to should be viewed as a &lt;em&gt;leaky abstraction&lt;/em&gt; that can affect &lt;em&gt;how&lt;/em&gt; messages are sent.  Message size, for example, is often (technically &lt;em&gt;always&lt;/em&gt;) a consideration and what &lt;em&gt;maximum message size&lt;/em&gt; the transport or channel can handle may need to be taken into consideration.  If the data that needs to be sent is larger than can actually be sent by that transport of channel then the message must be split up.  Depending on the transport and the channel messages may not relate to one another (e.g. order) and how the sequence of those messages need to be interpreted by the consumer should be included when the messages are sent. A Sequence Ordinal (or Number or Identifier) can be included as a header value so the consumer, should it receive messages out-of-order, can sequence the messages to generate the larger piece of data or super-message.&lt;/p&gt;
&lt;h3 id="expiration"&gt;Expiration&lt;/h3&gt;
&lt;p&gt;Messages are often sent with the intent of accomplishing something (&lt;em&gt;event&lt;/em&gt; messages are unique in that an &lt;em&gt;event getting sent&lt;/em&gt; is really the only intent of the producer).  Sometimes, what needs to be accomplished has a shelf life; and if that thing that needs to be accomplished really has no point in being done if not done within that time, an &lt;em&gt;Expriation&lt;/em&gt; can be included as a header value to hint to the consumer that if the message isn't processed within a certain amount of time, don't bother.  This is often a UTC date/time value.&lt;/p&gt;
&lt;h3 id="return-address"&gt;Return Address&lt;/h3&gt;
&lt;p&gt;Sometimes the sender may need to define &lt;em&gt;where&lt;/em&gt; a response or related messages are sent in response to a message.  The Return Address pattern is used to communicate that to the consumer of the message so that any related/response messages can be sent to a specific channel.  &lt;em&gt;Be careful here, if the channel is really based on the content type,&lt;/em&gt; Content Type &lt;em&gt;should probably be used instead avoid content-based coupling being additionally coupled to channel&lt;/em&gt;.  Also, if &lt;em&gt;where&lt;/em&gt; replies are sent are based on the destination having the state needed to process the reply, a &lt;em&gt;Correlation ID&lt;/em&gt; should be used also to avoid state-based coupling being additionally coupled to channel.&lt;/p&gt;
&lt;h3 id="wrap-up"&gt;Wrap-up&lt;/h3&gt;
&lt;p&gt;I hope that gives you some good guidance with examples to better decide what should and should not be within the body of a message in message-oriented systems.  There are always exceptions, but those are scenario-specific and need to be addressed on a case-by-case basis.  Just remember that when making decisions, if something isn't giving you the value you need and you're doing it just because it's a guideline, you've misunderstood the meaning of &lt;em&gt;guideline&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;[Recipient List]: &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/RecipientList.html"&gt;http://www.enterpriseintegrationpatterns.com/patterns/messaging/RecipientList.html&lt;/a&gt;&lt;!-- 2017, September--&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Bridges, Facades, and Adapters</title>
			<link>http://blog.peterritchie.com/posts/Bridges-Facades-and-Adapters</link>
			<description>&lt;p&gt;I try to keep up with my craft by doing a fair amount of reading.  And to be honest, patterns are a great tool for me to communicate with my teams and members of the community in order to convey complex concepts.  Some patterns are easy to grok, but some are very subtle.  Bridge, Adapter, and Façade are such subtle structural patterns that I've noticed considerable confusion in some of the material I've read and with some of the people I talked to.  These patterns are very similar in some ways, but have very different applications.  I hope to reduce the confusion of these patterns with this post.&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Bridges-Facades-and-Adapters</guid>
			<pubDate>Fri, 28 Jul 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I try to keep up with my craft by doing a fair amount of reading.  And to be honest, patterns are a great tool for me to communicate with my teams and members of the community in order to convey complex concepts.  Some patterns are easy to grok, but some are very subtle.  Bridge, Adapter, and Façade are such subtle structural patterns that I've noticed considerable confusion in some of the material I've read and with some of the people I talked to.  These patterns are very similar in some ways, but have very different applications.  I hope to reduce the confusion of these patterns with this post.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Bridge_pattern"&gt;Bridge&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Adapter_pattern"&gt;Adapter&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/Facade_pattern"&gt;Façade&lt;/a&gt; are similar: they are all about providing a more useful interface.  How and why they produce those interfaces are very different.&lt;/p&gt;
&lt;p&gt;Let's first look at some of the principles behind each pattern.&lt;/p&gt;
&lt;h2 id="principles"&gt;Principles&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Bridge&lt;/em&gt;: to decouple an abstraction from its implementations so that they can vary independently.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Façade&lt;/em&gt;: provide a simplified interface to a larger body of code.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Adapter&lt;/em&gt;: allows incompatible interfaces to work together by wrapping an already existing interface.&lt;/p&gt;
&lt;h2 id="subtleties"&gt;Subtleties&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Bridge&lt;/em&gt;: Bridge is about decoupling an abstraction from its implementations.  This means it provides an abstraction to an abstraction; or in other words it's about the interaction of three things.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Façade&lt;/em&gt;: Façade is about providing a simpler abstraction to an existing interface.  This means it provides an abstraction to  set of interfaces&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Adapter&lt;/em&gt;: Adapter is about providing an interface that accepts existing data formats to translate to other formats used by another interface.&lt;/p&gt;
&lt;h2 id="adapter-deep-dive"&gt;Adapter Deep Dive&lt;/h2&gt;
&lt;p&gt;An an Adapter is effectively a function or a transformation.  It transforms one set of data compatible with a known interface into a set of data compatible with another known interface. At its most complex, it's still only dealing with transformation/mapping--providing an abstraction to &lt;em&gt;how to transform&lt;/em&gt; data, not an abstraction from the data.  It's a one-to-one relationship between two interfaces that existed before the Adapter.  If we viewed it in a method calling context: something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var result = ExternalInterface(AdaptToExternal(internalData));
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="possible-adapter-pattern-specializations"&gt;Possible Adapter Pattern Specializations&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Data_mapper_pattern"&gt;Mapper&lt;/a&gt; (&lt;a href="https://en.wikipedia.org/wiki/Object-relational_mapping"&gt;Object-Relational&lt;/a&gt; aka ORM, &lt;a href="https://en.wikipedia.org/wiki/Data_access_object"&gt;Data Access Object&lt;/a&gt; aka DAO), &lt;a href="https://en.wikipedia.org/wiki/Active_record_pattern"&gt;ActiveRecord&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="facade-deep-dive"&gt;Façade Deep Dive&lt;/h2&gt;
&lt;p&gt;A Façade at it's simplest can act like an Adapter but it provides an abstraction to an interface rather than data: a simple pass-through Façade that performs some adaption.  An Adapter pattern could be used in a Façade or Bridge, but the Adapter pattern would be implemented independently from the implementation of either of other two.  e.g. some sort of Adapter class or method would exist regardless of the Façade or Bridge implementation.  At its most complex, a Façade is a managed workflow or a process that integrates several independent interfaces along with state to provide a new, simpler interface.  i.e. a Façade can abstract behavior while being a structural pattern.  It's a one-to-many relationship between interfaces.  At the heart of both. the Bridge and the Adapter is to provide a more useful (better) interface, which is common to Façade, but it's the purpose of that new interface that distinguishes it as one pattern or another.&lt;/p&gt;
&lt;p&gt;We often think of these patterns are the interface or class level; but they're applicable more broadly. Extension methods, for instance, can be a good example of a Façade implementation.  The following extension method is from Productivity Extensions:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static bool ReferencesMethod&amp;lt;T&amp;gt;(this Type sourceType, Expression&amp;lt;Action&amp;lt;T&amp;gt;&amp;gt; func)
{
	if (sourceType == null)
	{
		throw new ArgumentNullException(nameof(sourceType));
	}

	if (func == null)
	{
		throw new ArgumentNullException(nameof(func));
	}

	var methodCallExpression = func.Body as MethodCallExpression;
	if (methodCallExpression == null)
	{
		return false;
	}

	MethodInfo memberInfo = methodCallExpression.Method;
	MethodInfo getTypeMethodInfo = typeof(object).GetMethods().Single(x =&amp;gt; x.Name == &amp;quot;GetType&amp;quot;); // &amp;amp;&amp;amp; x.GetParameters().Count() == 0 &amp;amp;&amp;amp; x.ReflectedType == typeof(Object));
	bool getTypeCall = memberInfo == getTypeMethodInfo;

	foreach (var methodInfo in sourceType.GetMethods())
	{
		var methodBody = methodInfo.GetMethodBody();
		if (methodBody == null)
		{
			continue;
		}

		var il = methodBody.GetILAsByteArray();
		IEnumerable&amp;lt;IlInstruction&amp;gt; instructions = GetMethodInstructions(methodInfo, sourceType.Module, il);

		for (int i = 0; i &amp;lt; instructions.Count(); ++i)
		{
			var instruction = instructions.ElementAt(i);
			if (getTypeCall &amp;amp;&amp;amp; instruction.Code == OpCodes.Ldtoken &amp;amp;&amp;amp; i &amp;lt; instructions.Count() &amp;amp;&amp;amp; instructions.ElementAt(i + 1).Code == OpCodes.Call)
			{
				var calledMethodInfo = instructions.ElementAt(i + 1).Operand as MethodInfo;
				if (calledMethodInfo == null)
				{
					continue;
				}

				if (calledMethodInfo == typeof(Type).GetMethods().Single(x =&amp;gt; x.Name == &amp;quot;GetTypeFromHandle&amp;quot;))
				{
					return true;
				}
			}

			if (instruction.Code == OpCodes.Call || instruction.Code == OpCodes.Callvirt)
			{
				var calledMethodInfo = instruction.Operand as MethodInfo;
				if (calledMethodInfo == null)
				{
					continue;
				}

				if (calledMethodInfo == memberInfo)
				{
					return true;
				}
			}
		}
	}

	return false;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, the interfaces are there to figure out if a particular method is referenced within a type, but &lt;code&gt;ReferencesMethod&lt;/code&gt; provides a more convenient interface (a façade).&lt;/p&gt;
&lt;h2 id="bridge-deep-dive"&gt;Bridge Deep Dive&lt;/h2&gt;
&lt;p&gt;The Bridge provides a third interface (abstraction) so that one known interface never needs to be coupled to by a future unknown interface.  A Bridge is very useful in some languages/frameworks to provide compile-time independence between two implementations.  You often want a bidirectional independence in Bridges and as such the interfaces are often in their own link-time unit (class library).  The code that uses the Bridge is decoupled from and implementation of the a Bridge as well as whatever the Bridge is bridging to (so bridge implementations and what they bridge to can be implementated after the fact).  Façade is used when defining what is being bridged to because Bridge is used to abstract multiple implementations and often need that Façade interface to provide a better (consistent) interface.&lt;/p&gt;
&lt;p&gt;For me, an example really helps my understanding.  Here are some example interfaces to support a Bridge pattern (the Abstraction and Implementor from the pattern):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Primitives
{
    public interface IShapeBridgeAbstraction
    {
        void Draw();
    }

    public interface IGraphicalViewBridgeImplementor
    {
        void DrawCircle(double x, double y, double radius);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, implementations of those interfaces provided by another party (vendor?):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace VendorX
{
    using Primitives;

    public class GraphicalViewBridgeConcreteImplementor : IGraphicalViewBridgeImplementor
    {
        void DrawCircle(double x, double y, double radius);
    }

    public class CircleShapeBridgeRefinedAbstraction : IShapeBridgeAbstraction
    {
        double x, y, radius;
        IGraphicalViewBridgeImplementor view;
        public void CircleShapeBridgeRefinedAbstraction(double x, double y, double radius, IGraphicalViewBridgeImplementor view)
        {
            this.x = x;
            this.y = y;
            this.radius = radius;
            this.view = view;
        }

        public void Draw()
        {
            view.DrawCircle(x, y, radius);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, to get away from the pattern-parlance:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Primitives
{
    public interface IShape
    {
        void Draw();
    }

    public interface IGraphicalView
    {
        void DrawCircle(double x, double y, double radius);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace Microsoft
{
    using Primitives;

    public class WinFormsGraphicalView : IGraphicalView
    {
        void DrawCircle(double x, double y, double radius);
    }

    public class WinFormsCircleShape : IShape
    {
        double x, y, radius;
        IGraphicalView view;
        public void WinFormsCircleShape(double x, double y, double radius, IGraphicalView view)
        {
            this.x = x;
            this.y = y;
            this.radius = radius;
            this.view = view;
        }

        public void Draw()
        {
            view.DrawCircle(x, y, radius);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="possible-bridge-pattern-specializations"&gt;Possible Bridge Pattern Specializations&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://wiki.c2.com/?PimplIdiom"&gt;PImpl&lt;/a&gt;, Driver, &lt;a href="https://en.wikipedia.org/wiki/Mediator_pattern"&gt;Mediator&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="final-thoughts"&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;An important thing to remember is the category of the pattern.  Adapter, Façade, and Bridge are structural patterns.  Their intention is to provide benefits to the structure of a body software through composition.  Another category of patterns is behavioral; which attempt to improve cohesion by separating responsibilities through composition.  The mediator pattern may structurally be a Bridge pattern but its use is to achieve a separation of communication behavior responsibilities.  i.e. certain structural considerations are needed to obtain separation of responsibilities: to implement cohesive mediation behavior, you may need a Bridge structure.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Multi-targeting in Visual Studio 2017</title>
			<link>http://blog.peterritchie.com/posts/Multi-targeting-in-Visual-Studio-2017</link>
			<description>&lt;p&gt;I've got a few OSS projects on the go that have evolved over time enough that some target more than one version of .NET.  Recently I started adding support to some of those projects for .NET Standard and .NET Core. Traditionally I've attempted to support multiple targets with multiple projects: since there's a single target framework in a project.  This has served me well over the years.  Here's some details:&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Multi-targeting-in-Visual-Studio-2017</guid>
			<pubDate>Fri, 16 Jun 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I've got a few OSS projects on the go that have evolved over time enough that some target more than one version of .NET.  Recently I started adding support to some of those projects for .NET Standard and .NET Core. Traditionally I've attempted to support multiple targets with multiple projects: since there's a single target framework in a project.  This has served me well over the years.  Here's some details:&lt;/p&gt;
&lt;p&gt;Once you've got a project on the go and a Nuget package being used, Microsoft releases a new framework.  Eventually there may be something you need to support but can't just drop your assembly that only supports the previous version, so you you create new project targeting the new framework.  Usually a new framework is backwards compatible with the version you're already deploying for, so all the code you currently have should work fine with the new framework.  The best way I've found so far is to simply link to all the existing files in the new project.  In Solution Explorer, right-click the new project and click &lt;strong&gt;Add►Existing File…&lt;/strong&gt; and select the files you want to add as a link and click the ► in the &lt;strong&gt;Add ►&lt;/strong&gt; button and click &lt;strong&gt;Add Link&lt;/strong&gt;. This adds links to the files from another projetc so each file is shared across the two projects.  If you edit one, you edit for both (or all projects).  If you have a lot of files across more than few directories, you'll quickly notice that using the &lt;strong&gt;Add►Existing File…&lt;/strong&gt; dialog will be a huge chore.  An easier way is to select the files in the previous project in Solution Explorer and drag and drop the files you want to share while holding the &lt;strong&gt;Alt&lt;/strong&gt; key to the new project.  This will add links to your new project.  At this point, the project should compile and effectively give you an identical class library that supports the new framework.  For any new framework features you want to support, simply add them as new files into the project for that framework (remember &lt;code&gt;partial&lt;/code&gt; if you want to add new framework functionality to an existing class.  In rare cases you may need to add a some compile-time constants like &lt;code&gt;NET40&lt;/code&gt; and &lt;code&gt;NET45&lt;/code&gt; to each project so that you can wire-off specific functionality in a shared file.&lt;/p&gt;
&lt;p&gt;Now when you want to generate your new Nuget package, you can copy the library dlls into a convention-based folder that Nuget understands.  For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\lib
    \net40
        myassembly.dll
    \netstandard1.3
        musassembly.dll
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, one of my OSS projects, files are copied into a Nuget-convention &lt;code&gt;lib&lt;/code&gt; folder like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;copy Pri.LongPath.net40\bin\Release\Pri.LongPath.dll nuget\lib\net40
copy Pri.LongPath.net200\bin\Release\Pri.LongPath.dll nuget\lib\net20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then Nuget just packages things properly.&lt;/p&gt;
&lt;p&gt;This works, but realistically it's quite a bit of work.  Over time you get more and more projects, and if you have lots of files, you have more and more files in Solution Explorer and performance seems to suffer.&lt;/p&gt;
&lt;p&gt;Fortunately, I've found that there's a much better way in Visual Studio 2017 and the new csproj files: via the &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries"&gt;TargetFrameworks&lt;/a&gt; element.  There does not seem to be support for this in the Visual Studio UI yet, so you have to manually edit your csproj to add support for multiple frameworks; but that's easy with the new csproj files because you can simply edit them in Visual Studio 2017 (right-click project in Solution Explorer and select &lt;strong&gt;Edit&lt;/strong&gt;).  Once there, simply rename the &lt;code&gt;TargetFramework&lt;/code&gt; element to &lt;code&gt;TargetFrameworks&lt;/code&gt; (note the 's' suffix).  For example, if you create a .NET Standard class library, the csproj will contain the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

&amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netstandard1.3&amp;lt;/TargetFramework&amp;gt;
&amp;lt;!-- ... --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to support .NET Standard 1.3 &lt;em&gt;and&lt;/em&gt; .NET 4.6.2, change that to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

&amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFrameworks&amp;gt;netstandard1.3;net462&amp;lt;/TargetFrameworks&amp;gt;
&amp;lt;!-- ... --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the use of semicolons to separate framework monikers.&lt;/p&gt;
&lt;p&gt;This method means that the one project is built for each framework and all the files are shared amongst those builds.  This means you have to resort to compile-time constants to signify framework-specific code.  Fortunately Visual Studio (or really the build system) knows about our multi-targeting, so it automatically provides compile-time constants.  The following table shows current compile-time constants (and the convention it uses, for future framework versions :) ):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.NET Framework 2.0   --&amp;gt; NET20
.NET Framework 3.5   --&amp;gt; NET35
.NET Framework 4.0   --&amp;gt; NET40
.NET Framework 4.5   --&amp;gt; NET45
.NET Framework 4.5.1 --&amp;gt; NET451
.NET Framework 4.5.2 --&amp;gt; NET452
.NET Framework 4.6   --&amp;gt; NET46
.NET Framework 4.6.1 --&amp;gt; NET461
.NET Framework 4.6.2 --&amp;gt; NET462
.NET Standard 1.0    --&amp;gt; NETSTANDARD1_0
.NET Standard 1.1    --&amp;gt; NETSTANDARD1_1
.NET Standard 1.2    --&amp;gt; NETSTANDARD1_2
.NET Standard 1.3    --&amp;gt; NETSTANDARD1_3
.NET Standard 1.4    --&amp;gt; NETSTANDARD1_4
.NET Standard 1.5    --&amp;gt; NETSTANDARD1_5
.NET Standard 1.6    --&amp;gt; NETSTANDARD1_6 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#if (NET45 || NET451 || NET452 || NET46 || NET461 || NET462)

	public static Task ConnectAsync(this TcpClient tcpClient, EndPoint endPoint)
	{
		//...
	}
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To edit code in the context of a particular framework (and thus have the particular compile-time constants defined) you can select the file projects dropdown to show the file in the compiler context of the target:&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/file%20projects%20dropdown.png" class="img-fluid" alt="file projects dropdown" /&gt;&lt;/p&gt;
&lt;p&gt;Now when you build the project it will create a binary for each target platform (within the bin directory under Debug/Release and subdirectories by target name like &amp;quot;net45&amp;quot;).&lt;/p&gt;
&lt;p&gt;With a .NET Standard project in Visual Studio you can also have it create the Nuget package during build.  Since the project builds the nuget, you enter all the package information in the project settings.  And, of course, this means it builds a package with all the target binaries, not just one so you don't need to create a nuspec, nor edit it, more create a convention-based directory structure with the binaries for all the target frameworks you support.&lt;/p&gt;
&lt;h3 id="caveats"&gt;Caveats&lt;/h3&gt;
&lt;p&gt;As mentioned earlier, VS doesn't support multi-targeting like this right in the UI (other than the file projects dropdown to view the file in the compiler context of the target) so it can be tedious editing the csproj manually to change configuration like references etc.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Getting Started with .NET Core/Standard</title>
			<link>http://blog.peterritchie.com/posts/Getting%20Started%20with%20.NET%20Core-Standard</link>
			<description>&lt;p&gt;With Visual Studio 2017 recently being released, I felt it was time to start looking into converting some of the OSS projects I work on to Core/Standard.  I think Core/Standard won't be mainstream until .NET Core 2.0; but we're already looking at a .NET Core 2.0 Preview 1; so it's not too far off.&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Getting%20Started%20with%20.NET%20Core-Standard</guid>
			<pubDate>Thu, 15 Jun 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;With Visual Studio 2017 recently being released, I felt it was time to start looking into converting some of the OSS projects I work on to Core/Standard.  I think Core/Standard won't be mainstream until .NET Core 2.0; but we're already looking at a .NET Core 2.0 Preview 1; so it's not too far off.&lt;/p&gt;
&lt;p&gt;I think it's important to start looking into moving foundational libraries early to avoid friction getting code onto the latest platform/framework when you actually need to.  Fortunately .NET Core and Standard make it possible to release libraries in .NET Code/Standard without affecting existing client code (for the most part).  I thought I'd detail some of the things I've run into and some guidance to hopefully get you going faster.&lt;/p&gt;
&lt;h3 id="tldr"&gt;tl;dr&lt;/h3&gt;
&lt;p&gt;.NET Core and .NET Standard are the next major advancements (&amp;quot;versions&amp;quot;?) in .NET.  It's like .NET going from .NET 3.5. to .NET 4.0 (which was an upgrade to the CLR rather than an in-place update).  .NET Core is effectively the next edition of the runtime which supports more platforms (Windows, OSX, Linux, without a 3rd party technology like Mono) and .NET Standard is really the next level for .NET Portability (replacement/improvement of PCL).  In order support a broad range of portability, you need to be writing .NET Standard libraries.  To support portable apps, you need to be writing .NET Core applications (that use .NET Standard or .NET Core class libraries).&lt;/p&gt;
&lt;h3 id="what-version-of.net-standard-should-i-use"&gt;What &lt;em&gt;Version&lt;/em&gt; of .NET Standard should I use?&lt;/h3&gt;
&lt;p&gt;I wouldn't be an architect if I didn't respond with &amp;quot;it depends&amp;quot;.  Luckily &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/library"&gt;docs.microsoft.com&lt;/a&gt; does a fine job of explaining things with the lifted table:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;.NET Standard&lt;/th&gt;
&lt;th&gt;&lt;a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.0.md"&gt;1.0&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.1.md"&gt;1.1&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.2.md"&gt;1.2&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.3.md"&gt;1.3&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.4.md"&gt;1.4&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.5.md"&gt;1.5&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.6.md"&gt;1.6&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md"&gt;2.0&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.NET Core&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;2.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.NET Framework (with tooling 1.0)&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;4.5.1&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;4.6.1&lt;/td&gt;
&lt;td&gt;4.6.2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.NET Framework (with tooling 2.0 preview)&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;4.5.1&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;4.6.1&lt;/td&gt;
&lt;td&gt;4.6.1&lt;/td&gt;
&lt;td&gt;4.6.1&lt;/td&gt;
&lt;td&gt;4.6.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mono&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;vNext&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Xamarin.iOS&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;vNext&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Xamarin.Android&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;7.0&lt;/td&gt;
&lt;td&gt;vNext&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Universal Windows Platform&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;10.0&lt;/td&gt;
&lt;td&gt;vNext&lt;/td&gt;
&lt;td&gt;vNext&lt;/td&gt;
&lt;td&gt;vNext&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;8.1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows Phone&lt;/td&gt;
&lt;td&gt;8.1&lt;/td&gt;
&lt;td&gt;8.1&lt;/td&gt;
&lt;td&gt;8.1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows Phone Silverlight&lt;/td&gt;
&lt;td&gt;8.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;The columns represent .NET Standard versions. Each header cell is a link to a document that shows which APIs got added in that version of .NET Standard.&lt;/li&gt;
&lt;li&gt;The rows represent the different .NET platforms.&lt;/li&gt;
&lt;li&gt;The version number in each cell indicates the &lt;em&gt;minimum&lt;/em&gt; version of the platform you'll need to implement that .NET Standard version.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;But, see &lt;a href="#a-note-on-composability"&gt;A Note on Composability&lt;/a&gt; for some guidance on decomposing your types by the minimal footprint they need as well as functional context (i.e. keeping libraries cohesive).&lt;/p&gt;
&lt;h3 id="notable-areas-of-change"&gt;Notable Areas of Change&lt;/h3&gt;
&lt;h4 id="typetypeinfo"&gt;Type→TypeInfo&lt;/h4&gt;
&lt;p&gt;Within &lt;code&gt;System.Reflection&lt;/code&gt; there exists several classes to get meta-information about various identifiers in .NET (like &lt;code&gt;MethodInfo&lt;/code&gt;, &lt;code&gt;EventInfo&lt;/code&gt;, &lt;code&gt;FieldInfo&lt;/code&gt;, &lt;code&gt;PropertyInfo&lt;/code&gt;, &lt;code&gt;ConstructorInfo&lt;/code&gt;, and &lt;code&gt;ParameterInfo&lt;/code&gt;).  The type of information these classes provide (like attributes, names, assembly, access modifiers, etc.), when pertaining to types, have historically been found on &lt;code&gt;System.Type&lt;/code&gt; (which derives from &lt;code&gt;Reflection.MemberInfo&lt;/code&gt;, oddly enough). With .NET Core that is technically corrected for a subset of the platforms by moving the reflection-like members into a new &lt;code&gt;Reflection.TypeInfo&lt;/code&gt; class that is available in all version of .NET Standard and thus available in .NET 4.5 and above.  &lt;code&gt;Type&lt;/code&gt; is still available in all versions of .NET Standard, but the reflection-like members are generally available only in .NET Standard 2.0 (which means .NET Framework and .NET Core 2.0).  I believe there are extension methods to provide that reflection-type functionality off of &lt;code&gt;Type&lt;/code&gt;, but I generally recommend just biting the bullet and use &lt;code&gt;TypeInfo&lt;/code&gt; directly, it's our new overlord (and quite frankly, more sensible).&lt;/p&gt;
&lt;h4 id="configuration"&gt;Configuration&lt;/h4&gt;
&lt;p&gt;.NET has typically been associated with XML configuration when it comes to configuration.  As handy as that may have been, it was a narrow view of how configuration information can be stored and accessed by an application.  While configuration can certainly be stored in &lt;em&gt;app.config&lt;/em&gt;, other configuration information may be provided via the command line, by environment variables, by INI files, etc.  Not to mention, what if you didn't want XML, but JSON config?  And I won't get into what you had to do if you wanted structured information in app.config.&lt;/p&gt;
&lt;p&gt;With .NET Core, all that changes.  Configuration is handled with the &lt;em&gt;Microsoft.Extensions.Configuration&lt;/em&gt; Nuget package.  This basically provides the &lt;code&gt;IConfiguration&lt;/code&gt;, &lt;code&gt;IConfigurationRoot&lt;/code&gt;, and &lt;code&gt;IConfigurationBuilder&lt;/code&gt; interfaces along with a &lt;code&gt;ConfigurationBuilder&lt;/code&gt; implementation that can be extended to support various providers like &lt;code&gt;InMemoryConfigurationProvider&lt;/code&gt;, &lt;code&gt;JsonFileConfigurationProvider&lt;/code&gt;, &lt;code&gt;EnvironmentVariableConfigurationProvider, CommandLineConfigurationProvider&lt;/code&gt;, &lt;code&gt;XmlConfigurationProvider&lt;/code&gt;, and &lt;code&gt;IniConfigurationProvider&lt;/code&gt;; that allow you to build up a single application configuration from various, prioritized, sources.  Your code simply needs to compose the configuration (usually in a &lt;em&gt;composition root&lt;/em&gt;) and depend on the &lt;code&gt;IConfiguration&lt;/code&gt; interface.  &lt;code&gt;IConfiguration&lt;/code&gt; basically provides dictionary-like access (key/value) to configuration information, but provides convention-based mapping to classes to provide structured configuration data (no more writing &lt;code&gt;ConfigurationSection&lt;/code&gt; implementations and the corresponding &lt;code&gt;configSection&lt;/code&gt; element--although .NET Standard brings support for &lt;em&gt;old style&lt;/em&gt; configuration sections).&lt;/p&gt;
&lt;p&gt;Configuration change notification and reloading is also supported.  But, saving updated values is not implemented out of the box (is anyone surprised?); but custom providers can be written to support persistence.&lt;/p&gt;
&lt;p&gt;I recommend reading Mark Michaelis' &lt;em&gt;Essential .NET&lt;/em&gt; column &lt;a href="https://msdn.microsoft.com/en-us/magazine/mt632279.aspx"&gt;Configuration in .NET Core&lt;/a&gt; for a deeper dive.&lt;/p&gt;
&lt;h4 id="remotingserializationworkflowserial-portswin-forms"&gt;Remoting/Serialization/Workflow/Serial Ports/Win Forms&lt;/h4&gt;
&lt;p&gt;.NET Core also admits that .NET Remoting worked as well as the &lt;em&gt;&lt;a href="https://martinfowler.com/bliki/FirstLaw.html"&gt;First Rule of Distributed Object Design&lt;/a&gt;&lt;/em&gt; suggested.  Which means technologies that depend on, or designed to support, .NET Remoting are collateral damage: AppDomains, sandboxing, and binary serialization.  I have to admit that I tried several times to get sandboxing to work and it was either too hard get to work or too hard to keep working as types changed and other people made changes.  You might be thinking &lt;em&gt;but why binary serialization!?&lt;/em&gt;  Unfortunately binary serialization is designed around supporting .NET Remoting, and as such opens some &lt;a href="https://technet.microsoft.com/library/security/ms14-026"&gt;security holes&lt;/a&gt; and is deprecated in favor of other &amp;quot;binary&amp;quot; serialization options like [protobuf] (or just use JSON or XML serialization).&lt;/p&gt;
&lt;p&gt;Also support for Serial Ports hasn't been migrated.  WinForms is obviously Windows-specific and hasn't has the same level of attention in .NET Core.  But, UI hasn't been the focus for .NET Core. WinForms is probably the least portable framework; but conceivably Universal Windows Platform (UWP) support could make its way into .NET Core in the future.  At this time, I'd recommend .NET Standard or Core for code that is loosely coupled and can be composed into multiple applictions via libraries (and thus multiple platforms).&lt;/p&gt;
&lt;h4 id="web-apiwcf"&gt;Web API/WCF&lt;/h4&gt;
&lt;p&gt;I think the remoting issues, support for named pipes, etc. lead to not much priority for WCF in .NET Core.  Recently there has been a bit of work to support it on .NET Core, but only as much as it is supported in Windows Store apps.  With adoption for RESTful APIs and deprecation of .NET Remoting, many parts of WCF fall to the wayside too.  The adoption of RESTful APIs has lead to less support for Web APIs in favor of using ASP.NET MVC and RESTful APIs.  There are &lt;em&gt;compatibility&lt;/em&gt; shims to help you port code over; but let's face facts: it's deprecated in favor of MVC (RESTful&amp;gt;Web Services).  And &amp;quot;Web Services&amp;quot; seem to have colapsed under their own bloat; which leaves not a lot of impetus to migrate WCF to .NET Core.&lt;/p&gt;
&lt;h3 id="builds"&gt;Builds&lt;/h3&gt;
&lt;p&gt;Although you can build in much the same way in Visual Studio, the convention in the command-line has been to use the &lt;code&gt;dotnet&lt;/code&gt; command to &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;restore&lt;/code&gt; Nuget references, perform Nuget &lt;code&gt;pack&lt;/code&gt;ing, etc.&lt;/p&gt;
&lt;h3 id="a-note-on-composability"&gt;A Note on Composability&lt;/h3&gt;
&lt;p&gt;Each new technology seems to simply re-enforce SOLID principles at a broader level.  Take microservices for example.  A microservice is just a service with a narrower functional context to support performance and scalability.  You get that performance and scalability of systems using microservices because of the composability of microservices (and services, for that matter).  That functional context is very much like Single Responsibility and the ability to compose systems from multiple services and microserivces is a combination of Open Closed, Interface Segregation, Dependency Inversion, and even [Liskov]({{ site.baseurl }}{% post_url 2017-06-06-Rethinking Liskov Substitution Principle %}).  Software can support change better when it is more composable. I can re-compose a system with cohesive services in it more than I can with a monolithic system.  The same principle applies to how we design the class libraries that make up our services that make up our applications that make up our systems.  The more composable your class libraries, the more they will be able to accommodate change.  If you put all your code into one class library the more reasons it has to change (Single Responsibility) and affect everything that uses it.&lt;/p&gt;
&lt;p&gt;So, I recommend putting in an equal amount of thought/design to the functional context granularity of your class libraries as you would to your classes and your services.  And like code smells like &lt;em&gt;Long Method&lt;/em&gt; or &lt;em&gt;Large Class&lt;/em&gt;, class libraries that pull in more and more disparate/unrelated dependencies have probably taken on too much &lt;em&gt;responsibility&lt;/em&gt; and should be broken up into smaller libraries.&lt;/p&gt;
&lt;p&gt;So, what's that got to do with .NET Core and Standard?  The &amp;quot;versions&amp;quot; of .NET Standard: each version increment of .NET Standard means it takes on more responsibility.  If you find that in order to migrate your class library to .NET Standard to support .NET Core, you &lt;em&gt;must&lt;/em&gt; support a high .NET Standard version, the library likely has taken on too much responsibility.  POCOs (&lt;em&gt;Plain Old CLR Objects&lt;/em&gt;) (or should that be POSO: Plain Old Standard Object) for example should live in a .NET Standard 1.0 library.  And you should try to break libraries up so that more of code can be put into cohesive .NET Standard libraries closer to version 1.0.&lt;/p&gt;
&lt;p&gt;As 2.0 rolls out it will have the greatest parity with frameworks like .NET Framework 4.6.x, but I still think it's important to design your libraries to be composable and group things in a functional context that allows you to have lower versions of .NET Standard.  This better supports portability, but also better supports change.&lt;/p&gt;
&lt;p&gt;[protobuf]: &lt;a href="https://github.com/mgravell/protobuf-net"&gt;https://github.com/mgravell/protobuf-net&lt;/a&gt; &lt;!-- 2017, June--&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Rethinking the Liskov Substitution  Principle</title>
			<link>http://blog.peterritchie.com/posts/Rethinking%20Liskov%20Substitution%20Principle</link>
			<description>&lt;p&gt;Barbara Liskov's famous principle (named Liskov Substitution Principle by Robert Martin) came out of the area of &lt;a href="http://dl.acm.org/citation.cfm?id=62141"&gt;data abstraction&lt;/a&gt; as it applies to a hierarchy of data types.  At the time (around 1987-1994) the idea was someone absorbed by software language advancements of the day, primarily object-orientation.  The principle got heavily associated with OOD and OOP and many people left it at that. But, I suggest that Liskov Substitution Principle (LSP) is wider appeal than just in the design of objects/classes.&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Rethinking%20Liskov%20Substitution%20Principle</guid>
			<pubDate>Tue, 06 Jun 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Barbara Liskov's famous principle (named Liskov Substitution Principle by Robert Martin) came out of the area of &lt;a href="http://dl.acm.org/citation.cfm?id=62141"&gt;data abstraction&lt;/a&gt; as it applies to a hierarchy of data types.  At the time (around 1987-1994) the idea was someone absorbed by software language advancements of the day, primarily object-orientation.  The principle got heavily associated with OOD and OOP and many people left it at that. But, I suggest that Liskov Substitution Principle (LSP) is wider appeal than just in the design of objects/classes.&lt;/p&gt;
&lt;p&gt;I recently had a conversation about LSP within the SOLID principles as they apply to distributed architecture (Service-Oriented Architecture at the time) where in the back of my head I had discounted LSP and said something along the lines of &amp;quot;SOLID applies, except for maybe Liskov&amp;quot;.  We proceeded to talk about what we should call SOLID with out 'L' and came up with the &amp;quot;I DOS&amp;quot;.&lt;/p&gt;
&lt;p&gt;The more I thought about it, the more I could reconcile LSP with various principles that apply to distributed software design and architecture.  So, I changed my mind.&lt;/p&gt;
&lt;p&gt;As I detailed above, the original idea was around data abstraction and it was absorbed as an &lt;em&gt;OOD principle&lt;/em&gt;.  The original principle is:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&lt;em&gt;Subtype Requirement&lt;/em&gt;: Let Φ(𝔁) be a property provable about objects 𝔁 of type 𝚃. Then Φ(𝔂) should be true for objects 𝔂 of type 𝚂 where 𝚂 is a subtype of 𝚃.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or, as Robert Martin simplifies:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Martin goes on to show the strong resemblance between LSP and Bertrand Meyer's &lt;em&gt;Design by Contract&lt;/em&gt;.  And this is where I think LSP can really be applied to distributed architecture.  For completeness, Meyer associated that contract with human contracts by defining them as:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;ul&gt;
&lt;li&gt;Each party expects some benefits
from the contract and is prepared to
incur some obligations to obtain them.&lt;/li&gt;
&lt;li&gt;These benefits and obligations are
documented in a contract document. [1]&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;By definition, components in a distributed system at some level communicate with other components via the network.  In order for those components to communicate effectively and repeatedly there needs to be a known API or a &amp;quot;contract&amp;quot;.  This &amp;quot;contract&amp;quot; defines the inputs, the outputs, their structure and their constraints (or the obligations and benefits).  Therefore, &lt;em&gt;given two distributed components with the same contract, one should be replaceable with other components with the same contract without altering the correctness of the system&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, I believe LSP to be a very important part of distributed computing as it provides the governor to Dependency Inversion Principle so that no only should things depend upon abstractions, but different implementations of those abstractions should not affect the correctness of the system.&lt;/p&gt;
&lt;p&gt;[1]: B.Meyer, &amp;quot;Applying Design by Contract&amp;quot;, IEEE Computer, Oct.1992, 40-51.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Resetting Build Number in Appveyor</title>
			<link>http://blog.peterritchie.com/posts/Resetting-Build-Number-in-Appveyor</link>
			<description>&lt;p&gt;I've been using &lt;a href="http://ci.appveyor.com"&gt;AppVeyor&lt;/a&gt; for a while now to be my CI platform of choice for my OSS projects.  It's like any other tool.  It works, and does a lot of things very well.  I recently bumped some major version numbers up and realized that some things AppVeyor was automating weren't completely automated.&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Resetting-Build-Number-in-Appveyor</guid>
			<pubDate>Tue, 09 May 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I've been using &lt;a href="http://ci.appveyor.com"&gt;AppVeyor&lt;/a&gt; for a while now to be my CI platform of choice for my OSS projects.  It's like any other tool.  It works, and does a lot of things very well.  I recently bumped some major version numbers up and realized that some things AppVeyor was automating weren't completely automated.&lt;/p&gt;
&lt;p&gt;Build numbers.  AppVeyor takes on the burden of incrementing a build number for you (and updating your AssemblyInfo and Nuget info, if you want).  Unfortunately that's all it does automatically with the build number.  If I change my version number (e.g. from 1.0 to 2.0) then the build number does not reset to zero but continues on with the next version (so I go from 1.0.34 to 2.0.35).  Not what I was expecting.  Not that big a deal; but when it also publishes Nuget packages; kinda leaves you stuck at contining on from that point.&lt;/p&gt;
&lt;p&gt;I've seen a &lt;a href="http://help.appveyor.com/discussions/problems/311-reset-the-build-number-automatically-yml"&gt;couple&lt;/a&gt; &lt;a href="http://help.appveyor.com/discussions/suggestions/730-support-next-build-number-0-zero"&gt;threads&lt;/a&gt; on the topic, but the result always seemed to get pointed to the API to reset the build number.  I kinda think this violated the Principle of Least Surprise, so I decided to dig in a bit to avoid the surprise the future.&lt;/p&gt;
&lt;p&gt;The problem turned out to be fairly easy to solve (easier if you're an expert in PowerShell).  Basically, the way I approached it was to add a script in the &lt;em&gt;Init script&lt;/em&gt; section of the configuration to get the last build version via the &lt;a href="https://www.appveyor.com/docs/api/projects-builds/#get-project-last-build"&gt;API&lt;/a&gt; and compare the components of that version to the current build verison found in the &lt;a href="https://www.appveyor.com/docs/environment-variables/"&gt;environment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is the result:&lt;/p&gt;
&lt;script src="https://gist.github.com/peteraritchie/3643ba729e20d5d0b1b2f817ed00ce6b.js"&gt;&lt;/script&gt;
</content:encoded>
		</item>
		<item>
			<title>Introduction to messaging primitives</title>
			<link>http://blog.peterritchie.com/posts/Introduction-to-messaging-primitives</link>
			<description>&lt;p&gt;&lt;a href="http://pr-blog.azurewebsites.net/2016/09/30/introduction-to-messaging-primitives/" title="Permalink to Introduction to messaging primitives"&gt;Source&lt;/a&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/Introduction-to-messaging-primitives</guid>
			<pubDate>Fri, 30 Sep 2016 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;a href="http://pr-blog.azurewebsites.net/2016/09/30/introduction-to-messaging-primitives/" title="Permalink to Introduction to messaging primitives"&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="introduction-to-messaging-primitives"&gt;Introduction to messaging primitives&lt;/h1&gt;
&lt;p&gt;One of the most flexible design/architecture techniques is event-driven/message-oriented design. It offers unparalleled ability to loosely couple, accomplish Dependency Inversion, facilitates composability, etc. Message-oriented systems are by nature asynchronous. This means that a message is sent and the process that sent the message continues on to do other processing without knowing whether the message was received by the other end. Think of it like sending an email. You send an email, close your email client, and go on to do something else. Later, you may return to your email program and notice that the email you sent bounced. But, you had to return to your email program to see that because you where asynchronously doing something else.&lt;/p&gt;
&lt;p&gt;I've been working on an OSS project for a while that provides a framework for simple (once you wrap your head around the degree of loose coupling and asynchronousness) and flexible message-oriented design. This framework is based on a small set of types that I call primitives. Before going into what you can do with the framework, this post will first cover the primitives.&lt;/p&gt;
&lt;p&gt;If you're used to message-oriented systems, some of this may be very understandable. For those new to message-orientation, you'll understand why I started with the primitives.&lt;/p&gt;
&lt;p&gt;The message primitives source code is on &lt;a href="https://github.com/peteraritchie/Messaging.Primitives"&gt;GitHub&lt;/a&gt; and can be added to your Visual Studio project/solution from &lt;a href="https://www.nuget.org/packages/PRI.Messaging.Primitives/"&gt;NuGet&lt;/a&gt; (but you may want to wait to add this package to your project/solution until a future post, as it's a dependency of the framework, so you don't need to add this package manually (i.e. it's referenced and NuGet will automatically get it for you).&lt;/p&gt;
&lt;p&gt;The primitives are based on the most simple messaging building blocks (or patterns, which are well-defined in the book &lt;a href="http://amazon.com/o/asin/0321200683/ref=nosim/enterpriseint-20"&gt;Enterprise Integration Patterns&lt;/a&gt; but can also be seen on &lt;a href="http://www.enterpriseintegrationpatterns.com/"&gt;enterpriseintegrationpatterns.com/&lt;/a&gt;) and consist of a generic &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/Message.html"&gt;Message&lt;/a&gt;, a generic message Consumer, a generic message Producer, a generic &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/PipesAndFilters.html"&gt;Pipe&lt;/a&gt;, a generic &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/CommandMessage.html"&gt;Command&lt;/a&gt; message (a specialized Message), a generic &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/EventMessage.html"&gt;Event&lt;/a&gt; message (a specialized Message), and a &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/ControlBus.html"&gt;Bus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;##Message&lt;br /&gt;
The Message pattern is modeled in the Primitives via the &lt;code&gt;IMessage&lt;/code&gt; interface, detailed as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    public interface IMessage
    {
        string CorrelationId { get; set; }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea is that the message you want to send/receive implements this interface and you add the properties you need to contain the data. The interface contains a property &lt;code&gt;CorrelationId&lt;/code&gt; to provide a first-class ability to correlate multiple messages together involved in a particular interaction, transaction, or saga. But, for the most part, you should use either Command or Event instead.&lt;br /&gt;
##Command&lt;br /&gt;
As mentioned above, you don't normally implement &lt;code&gt;IMessage&lt;/code&gt; directly, you derive from one of two types of &lt;code&gt;IMessage&lt;/code&gt;-derived interfaces. The first interface I'll talk about is the &lt;code&gt;ICommand&lt;/code&gt; interface. This is a marker interface to add compile-time checked semantics that I'll detail in a future post, and detailed as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    public interface ICommand : IMessage
    {
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Marker_interface_pattern"&gt;marker interface pattern&lt;/a&gt; is a pattern that allows associating metadata with a type. In this case the metadata is the ability to differentiate at compile-time that a particular type is a Command.&lt;br /&gt;
The Command message pattern allows you to encapsulate all the information required to request a handler perform a command, or otherwise change state. The type of command to be performed is the type of the &lt;code&gt;ICommand&lt;/code&gt;-implementating class. Message handlers should typically have no run-time state, so everything the command handler needs to perform the command should be included within the &lt;code&gt;ICommand&lt;/code&gt; type. For example, if I want to make a request to a handler to create a client, I may have a &lt;code&gt;CorrectClientAddressCommand&lt;/code&gt; with the following detail:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  [Serializable]
  public class CorrectClientAddressCommand : ICommand
  {
    public string CorrelationId { get; set; }
    public string ClientId { get; set; }
    public Address PriorAddress { get; set; }
    public Address Address { get; set; }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with marker interfaces, we have the ability to introduce metadata when we're defining our messages. Just like something can be known as a Command because it implements &lt;code&gt;ICommand&lt;/code&gt;, we can introduce more depth of intent in our messages. For example, if a client moves, their address changes, but using a command like CorrectClientAddress does not include that intent. We could create a new, identical command named &amp;quot;MoveClientCommand&amp;quot; that is effectively identical to &lt;code&gt;CorrectClientAddressCommand&lt;/code&gt; in content (or even derive from the same base class). And that way we can include semantic intent with the message. Why would you want to do that? In the address change example, when a client corrects their address they may never have received important mailings. In the case of a correction, the organization can re-send important mailings. In the MoveClientCommand you may not want to re-send all that information (waste of money, annoys clients, etc.) and instead send a card welcoming them to their new home and taking advantage of an opportunity to impress the clients.&lt;br /&gt;
##Event&lt;br /&gt;
The second message type pattern is an Event. And just like an event we deal with in day-to-day life: it's a moment in time and information about that moment in time. From the standpoint of messages, we say that an event is moment of time in the &lt;em&gt;past&lt;/em&gt;, otherwise known as a fact. It's important to remember that it's a past fact and really should be considered as immutable data. Typically events model the details about a change in state. We model events in Primitives with the &lt;code&gt;IEvent&lt;/code&gt; interface, with the following details:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    public interface IEvent : IMessage
    {
        DateTime OccurredDateTime { get; set; }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that we force implementation of &lt;code&gt;IMessage&lt;/code&gt; (that is, include &lt;code&gt;CorrelationId&lt;/code&gt;) and add an &lt;code&gt;OccurredDateTime&lt;/code&gt; property.&lt;br /&gt;
When we want to communicate an event, we call sending an event &amp;quot;publishing&amp;quot; the event. This concept is considered &amp;quot;pub/sub&amp;quot; (or publish/subscribe) where something that publishes an event never knows how many subscribers (or if any) are subscribed to receive an event. When utilizing event-driven in this way, we're very loosely coupled and any number of things can subscribe to these events and extend without affecting the sender (i.e. code changes or availability).&lt;br /&gt;
Typically, when we talk about what we model with events, or facts about the past, we model state changes and include information about that state change. To correlate to the &lt;code&gt;CorrectClientAddressCommand&lt;/code&gt;; upon a successful address change, the handler of that message may publish a &lt;code&gt;ClientAddressCorrectedEvent&lt;/code&gt;. Which may look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  [Serializable]
  public class ClientAddressCorrectedEvent : IEvent
  {
    public string CorrelationId { get; set; }
    public DateTime OccurredDateTime { get; set; }
    public string ClientId { get; set; }
    public Address PriorAddress { get; set; }
    public Address Address { get; set; }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Circling back to the CorrelationId concept, the event includes the &lt;code&gt;CorrelationId&lt;/code&gt; field. If the event is published due to the processing of another message then we would copy that &lt;code&gt;CorrelationId&lt;/code&gt; value into the event. That way, when something receives the event (remember that messaging is asynchronous) it can correlate it back to another message, likely one that &lt;em&gt;it&lt;/em&gt; sent.&lt;br /&gt;
##Consumer&lt;br /&gt;
Now that we have a grasp on some basic message types and concepts, lets talk about how we use those messages.&lt;br /&gt;
The thing that performs consumption or handling of a message is a Consumer. It is modeled in the Primitives via the &lt;code&gt;IConsumer&lt;/code&gt; interface, detailed as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    public interface IConsumer&amp;lt;in T&amp;gt; where T:IMessage
    {
        void Handle(T message);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that it's a generic interface and the generic type must implement &lt;code&gt;IMessage&lt;/code&gt;. The implementer of &lt;code&gt;IConsumer&amp;lt;in T&amp;gt;&lt;/code&gt; must also implement a Handle method that takes in the an instance of the message that the class would process. So, if I wanted to create a class to implement a handler for the &lt;code&gt;CorrectClientAddressCommand&lt;/code&gt; command, it may look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class CorrectClientAddressCommandHandler: IConsumer&amp;lt;CorrectClientAddressCommand&amp;gt;
  {
    public void Handle(CorrectClientAddressCommand message)
    {
      // ...
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, since we're using interfaces, a class can implement more than one handler. For example, if I also wanted to process the ClientAddressCorrectedEvent, I may update my class to be something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class CorrectClientAddressCommandHandler : IConsumer&amp;lt;CorrectClientAddressCommand&amp;gt;, IConsumer&amp;lt;ClientAddressChangedEvent&amp;gt;
  {
    public void Handle(CorrectClientAddressCommand message)
    {
      // ...
    }
    public void Handle(ClientAddressChangedEvent message)
    {
      // ...
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But, as you can tell from the type of the handler class (&lt;code&gt;CorrectClientAddressCommandHandler&lt;/code&gt;) that it's named very specifically to be a &lt;code&gt;CorrectClientAddressCommand&lt;/code&gt; handler. I typically use that convention and have one handler per class, which offers a greater flexibility in terms of loosely coupled and composability. But, in the end, it's up to you what convention you'd like to use.&lt;br /&gt;
To write code to handle a particular message you simply implement &lt;code&gt;IConsumer&amp;lt;int T&amp;gt;&lt;/code&gt; for one or more types of messages&lt;br /&gt;
##Producer&lt;br /&gt;
The thing that performs production of a message is called a Producer, and is model in Primitives as &lt;code&gt;IProducer&amp;lt;out T&amp;gt;&lt;/code&gt;, detailed as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    public interface IProducer&amp;lt;out T&amp;gt; where T:IMessage
    {
        void AttachConsumer(IConsumer&amp;lt;T&amp;gt; consumer);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar to &lt;code&gt;IConsumer&amp;lt;in T&amp;gt;&lt;/code&gt;, except for the fact the generic type is covariant instead of contravariant, the generic type must implement &lt;code&gt;IMessage&lt;/code&gt;.&lt;br /&gt;
Now this is where the loose coupling and composability takes us into an advanced realm. You'll notice that the &lt;code&gt;IProducer&lt;/code&gt; has a single method &lt;code&gt;AttachConsumer&lt;/code&gt; that accepts an &lt;code&gt;IConsumer&amp;lt;in T&amp;gt;&lt;/code&gt; where T is the same generic type as the producer. This is probably very different from a typical imperative design that might have a method that returns a message. We don't do it in an imperative way because 1) we have message consumption abstraction (&lt;code&gt;IConsumer&lt;/code&gt;) and 2) the fundamental asynchronousness of messaging. The production and consumption of messages does not occur in a consistent, sequential fashion such that we would know where to place a call to a method that returns a message. Instead, we tell the producer who can consume the message and whenever the producer gets around the producing that message, it passes it right along to the consumer.&lt;br /&gt;
We may have a class that is a producer of &lt;code&gt;CorrectClientAddressCommand&lt;/code&gt; and could define it as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  CorrectClientAddressController : IProducer&amp;lt;CorrectClientAddressCommand&amp;gt;
  {
    private IConsumer&amp;lt;CorrectClientAddressCommand&amp;gt; consumer;

    public void AttachConsumer(IConsumer&amp;lt;CorrectClientAddressCommand&amp;gt; consumer)
    {
      this.consumer = consumer;
    }

    public void CorrectClientAddress(Client client, Address newAddress)
    {
      if(consumer == null)
        throw new InvalidOperationException(
          &amp;quot;&amp;#64;nameof(consumer) was null during invocation of CorrectClientAddress&amp;quot;);

      var command = new CorrectClientAddressCommand()
      {
        CorrelationId = Guid.NewGuid().ToString(&amp;quot;N&amp;quot;);
        ClientId = client.Id;
        PriorAddress = client.Address;
        Address = newAddress;
      }
      consumer.Handle(command);
    }
    //...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice an application-/domain-specific method &lt;code&gt;CorrectClientAddress&lt;/code&gt; that contains all the information required to send a &lt;code&gt;CorrectClientAddressCommand&lt;/code&gt; (and the &lt;code&gt;CorrectClientAddressCommand&lt;/code&gt; handler would perform the heavy lifting asynchronously and potentially in another thread/process/node, if you're looking for scalability).&lt;br /&gt;
You could use this class like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  var controller = new CorrectClientAddressController();
  controller.AttachConsumer(new CorrectClientAddressCommandHandler());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then when the &lt;code&gt;CorrectClientAddress&lt;/code&gt; method is called, the consumer is invoked.&lt;br /&gt;
##Pipe&lt;br /&gt;
The last Primitive type is the Pipe. The pipe is a general abstraction to model anything that is both a consumer and producer. And, in fact, is just an interface that implements &lt;code&gt;IConsumer&lt;/code&gt; and &lt;code&gt;IProducer&lt;/code&gt;, detailed as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    public interface IPipe&amp;lt;in TIn, out TOut&amp;gt;
      : IConsumer&amp;lt;TIn&amp;gt;, IProducer&amp;lt;TOut&amp;gt;
        where TIn : IMessage where TOut : IMessage
    {
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;IPipe&lt;/code&gt; the consumer has a different generic type name than the producer, but, a single type could be used for both (&lt;code&gt;IPipe&amp;lt;MyMessage, MyMessage&amp;gt;&lt;/code&gt;) to model a true pipe.&lt;br /&gt;
Typically though, we use &lt;code&gt;IPipe&lt;/code&gt; to model various other messaging patterns like &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/Filter.html"&gt;Filters&lt;/a&gt; (something that would ignore a message based on content) or &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageTranslator.html"&gt;Translators&lt;/a&gt; (something that converts one message type into another message type).&lt;br /&gt;
##Bus&lt;br /&gt;
The next message pattern is the Bus. A bus is modeled with the &lt;code&gt;IBus&lt;/code&gt; type. This bus model is basically facilitates implementing a Control Bus. The Control Bus facilitates connecting message producers with message consumers in a more loosely coupled way.&lt;br /&gt;
Remember the &lt;code&gt;CorrectClientAddressController&lt;/code&gt; &lt;code&gt;IProducer&lt;/code&gt; example? The code was tightly coupled to both &lt;code&gt;CorrectClientAddressController&lt;/code&gt; and &lt;code&gt;CorrectClientAddressCommandHandler&lt;/code&gt; and we had to new-up both in order to hook them up. If I'm writing code that produces a message like &lt;code&gt;CorrectClientAddressCommand&lt;/code&gt;, I don't want it to be directly coupled to one particular handler. After all, we're looking for loosely coupled and asynchronous. With tight coupling like that I might as well just do all the work in the &lt;code&gt;CorrectClientAddress&lt;/code&gt; method and skip all the messaging.&lt;br /&gt;
A bus allows us to build up something at runtime that does that connection. It will keep track of a variety handlers and invoke the correct handler when it consumes a message.&lt;br /&gt;
As you probably guessed, the &lt;code&gt;IBus&lt;/code&gt; is a consumer and thus implements &lt;code&gt;IConsumer&amp;lt;in T&amp;gt;&lt;/code&gt;. But, a bus can handle a variety of different messages, so it uses &lt;code&gt;IMessage&lt;/code&gt; for its type parameter, as detailed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    public interface IBus : IConsumer&amp;lt;IMessage&amp;gt;
    {
        void AddTranslator&amp;lt;TIn, TOut&amp;gt;(IPipe&amp;lt;TIn, TOut&amp;gt; pipe)where TIn : IMessage where TOut : IMessage;
        void AddHandler&amp;lt;TIn&amp;gt;(IConsumer&amp;lt;TIn&amp;gt; consumer) where TIn : IMessage;
        void RemoveHandler&amp;lt;TMessage&amp;gt;(IConsumer&amp;lt;TMessage&amp;gt; consumer) where TMessage : IMessage;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see from the definition of &lt;code&gt;IBus&lt;/code&gt; is also allows the connection of pipes or translators.&lt;br /&gt;
So, if I wanted the type &lt;code&gt;CorrectClientAddressCommandHandler&lt;/code&gt; to handle a &lt;code&gt;CorrectClientAddressCommand&lt;/code&gt; (and produce a &lt;code&gt;ClientAddressCorrectedEvent&lt;/code&gt; and a &lt;code&gt;ClientAddressCorrectedEventHandler&lt;/code&gt; type to handle a &lt;code&gt;ClientAddressCorrectedEvent&lt;/code&gt; message, could use a mythical bus implementation &lt;code&gt;Bus&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  var bus = new Bus();
  bus.AddHandler(new CorrectClientAddressCommandHandler());
  //...
  bus.AddHandler(new ClientAddressCorrectedEventHandler());
  //...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I could then send the command to the bus and have the command handler handle the message and the event handler handle event, without ever specifically attaching one handler to the producer. Sending that command could be done as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  bus.Send(new CorrectClientAddressCommand());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;quot;So?&amp;quot;, you may be thinking. Remember when I spoke about how events are subscribed to, and how there may be more than one subscriber to an event? I have a command handler than can only attach to one consumer, how would I be able to do that? That's one of the benefits of the Bus, it deals with that for you. If I added another event handler, I may create my bus as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  var bus = new Bus();
  bus.AddHandler(new CorrectClientAddressCommandHandler());
  //...
  bus.AddHandler(new ClientAddressCorrectedEventHandler());
  //...
  bus.AddHandler(new ClientAddressCorrectedEventHandler2());
  ///
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Bus would then handle forwarding the event to both of the event handlers, avoiding the need to write a different &lt;code&gt;IConsumer&lt;/code&gt; implementation that would manually do that (e.g. a &lt;a href="https://en.wikipedia.org/wiki/Tee_(command)"&gt;Tee&lt;/a&gt;).&lt;br /&gt;
These are examples of composing in-memory buses. That is, they process messages within the same process (and in a specific order).&lt;/p&gt;
&lt;p&gt;There's a couple of important concepts that relate to messaging. Immutability and Idempotency.&lt;br /&gt;
##Immutability&lt;br /&gt;
I've already touched on immutability. But, it's important to remember that due to the asychronous nature of messaging that you should consider the messages you send to be immutable. That is, you should't change them. For example, I could write some error-prone code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  var command = new CorrectClientAddressCommand();
  //...
  bus.Send(command);
  command.ClientId = 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the case of a message that is physically sent to a queue (covered in a future post) that message has been serialized to the queue and has left this process. Making a change to the &lt;code&gt;command&lt;/code&gt; object cannot be seen by the consumer of that message. If we're talking about an in-memory bus, it could be the same situation, but the time &lt;code&gt;Send&lt;/code&gt; returns the message has already been processed. If any of the message handlers are multi-threaded then the &lt;code&gt;command&lt;/code&gt; object may or may not be already handled by the time &lt;code&gt;Send&lt;/code&gt; returns. In any case, it's best to view sent messages as immutable to avoid these race conditions.&lt;br /&gt;
##Idempotency&lt;br /&gt;
Another concept that often comes up in messaging is &lt;a href="https://en.wikipedia.org/wiki/Idempotence"&gt;Idempotency&lt;/a&gt;. Idempotency is the quality of a message consumer to produce the same side-effects with the same parameters, no matter how many times it is invoked.&lt;br /&gt;
What I've detailed so far with in-memory buses is effectively Reliable Messaging. If &lt;code&gt;IBus.Send&lt;/code&gt; returns, the message was reliably processed. When we start to include message queues and accept messages over the wire, running on multiple computers, we have to deal with the possibility that another server or process might fail and might have to re-send a message. This typically only happens when the reliability settings of the Queue are not set to the highest level (for example &amp;quot;at-least-once delivery&amp;quot;, where we trade performance for the potential that a message may be sent more once. In situations like this you may want to send a message that allows the consumer be an &lt;a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/IdempotentReceiver.html"&gt;Idempotent Receiver&lt;/a&gt;.&lt;br /&gt;
In our &lt;code&gt;CorrectClientAddressCommand&lt;/code&gt; we've effectively facilitated a Idempotent Receiver, no matter how many times I send a &lt;code&gt;CorrectClientAddressCommand&lt;/code&gt; the resulting client address will be the same. Other types of messages make it difficult to have an Idempotent Receiver. For example, if I had an &lt;code&gt;IncreaseClientAgeCommand&lt;/code&gt;, processing it would always increase an &lt;code&gt;Age&lt;/code&gt; property of a client. If at-least-once-delivery was configured for the queue, this could occasionally lead to incorrect ages. You may want to either have a command like &lt;code&gt;SetClientAgeCommand&lt;/code&gt; or better yet (avoid pedantry) and have a &lt;code&gt;CorrectClientBirthDateCommand&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And with that, we have a good introduction of messaging and an intro to the messaging primitives library. In a future post I'll detail the implementation of these primitives: the patterns library.&lt;/p&gt;
</content:encoded>
		</item>
	</channel>
</rss>