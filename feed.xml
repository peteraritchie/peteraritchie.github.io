<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Peter Ritchie's Blog</title>
		<link>http://blog.peterritchie.com/</link>
		<description>Peter Ritchie</description>
		<copyright>2025</copyright>
		<pubDate>Fri, 08 Aug 2025 18:51:00 GMT</pubDate>
		<lastBuildDate>Fri, 08 Aug 2025 18:51:00 GMT</lastBuildDate>
		<item>
			<title>Things That Caught My Attention Last Week - August 4</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-august-3</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-august-3</guid>
			<pubDate>Mon, 04 Aug 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;!-- ## Open-source
 --&gt;
&lt;h2 id="architecture"&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/cosmosdb/scaling-multi-tenant-go-applications-choosing-the-right-database-partitioning-approach/"&gt;Scaling multi-tenant Go applications: Choosing the right database partitioning approach&lt;/a&gt; by Azure Cosmos DB Blog&lt;/p&gt;
&lt;!-- ## Presenting
 --&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.dennisdoomen.com/2025/06/library-starter-kit.html"&gt;Kickstarting your libraries with the .NET Library Starter Kit&lt;/a&gt; by Dennis Doomen&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2025/07/15/dotinsights-july-2025/"&gt;dotInsights | July 2025 | The .NET Tools Blog&lt;/a&gt; by Rachel Appel&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.woodruff.dev/day-18-mapping-cities-visualizing-tsp-evolution-in-net/"&gt;Day 18: Mapping Cities: Visualizing TSP Evolution in .NET&lt;/a&gt; by Chris Woody Woodruff&lt;/p&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/exploring-dotnet-10-preview-features-5-running-one-off-dotnet-tools-with-dnx/"&gt;Running one-off .NET tools with dnx&lt;/a&gt; by Andrew Lock&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;davidfowl/aspire-a-modern-devops-toolchain-fa5aac019d64"&gt;Aspire: A Modern DevOps Toolchain&lt;/a&gt; by David Fowler&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2025/07/27/metadata-tracking-improvements-in-marten/"&gt;Metadata Tracking Improvements in Marten&lt;/a&gt; by Jeremy D. Miller&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.milanjovanovic.tech/blog/how-to-keep-your-data-boundaries-intact-in-a-modular-monolith"&gt;How to Keep Your Data Boundaries Intact in a Modular Monolith&lt;/a&gt; by Milan Jovanović&lt;/p&gt;
&lt;!-- ## Domain Driven Design

## DevOps

## Software Design

## Mobile
 --&gt;
&lt;h2 id="agilework-life"&gt;Agile/Work Life&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://safedelusion.com/"&gt;SAFe Delusion&lt;/a&gt; by Naked Agility&lt;/p&gt;
&lt;h2 id="restapis"&gt;REST/APIs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20250728-00/?p=111415"&gt;API design note: Don't make up multiple names for the same thing&lt;/a&gt; by Raymond Chen&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apisyouwonthate.com/blog/top-5-best-api-docs-tools/"&gt;The 5 Best API Docs Tools in 2025&lt;/a&gt; by Phil Sturgeon, Alexander Karan&lt;/p&gt;
&lt;h2 id="azure"&gt;Azure&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/azure-sdk/azure-sdk-release-july-2025/"&gt;Azure SDK Release (July 2025)&lt;/a&gt; by Azure SDK Blog&lt;/p&gt;
&lt;h2 id="software-development"&gt;Software Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20250801-00/?p=111427"&gt;Two related questions about keeping track of PIDs of IPC clients&lt;/a&gt; by Raymond Chen&lt;/p&gt;
&lt;!-- ## Windows

## Security
 --&gt;
&lt;h2 id="ai"&gt;AI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.theregister.com/2025/07/25/opinion_column_vibe_coding/"&gt;Vibe coding might cause problems down the road&lt;/a&gt; by Steven J. Vaughan-Nichols&lt;/p&gt;
&lt;p&gt;&lt;a href="https://preslav.me/2025/07/26/claude-code-token-burn-slow-down-hooks/"&gt;Hitting the Brakes on Claude Code&lt;/a&gt; by Preslav Rachev&lt;/p&gt;
&lt;!-- ## Social Media

## Online Tools

## Databases

## Cloud

## Computing

## Podcasts
 --&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - July 27</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-july-27</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-july-27</guid>
			<pubDate>Mon, 28 Jul 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;!-- ## Open-source

## Architecture

## Presenting
 --&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.milanjovanovic.tech/blog/named-query-filters-in-ef-10-multiple-query-filters-per-entity"&gt;Named Query Filters in EF 10 (multiple query filters per entity)&lt;/a&gt; by Milan Jovanović&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2025/07/27/metadata-tracking-improvements-in-marten/"&gt;Metadata Tracking Improvements in Marten&lt;/a&gt; by Jeremy D. Miller&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.ploeh.dk/2025/07/21/song-recommendations-with-c-reactive-extensions/"&gt;Song recommendations with C# Reactive Extensions&lt;/a&gt; by Mark Seemann&lt;/p&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/exploring-dotnet-10-preview-features-4-solving-the-source-generator-marker-attribute-problem-in-dotnet-10/"&gt;Solving the source generator 'marker attribute' problem in .NET 10&lt;/a&gt; by Andrew Lock&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codeblog.jonskeet.uk/2025/07/19/unexpected-inconsistency-in-records/"&gt;Unexpected inconsistency in records&lt;/a&gt; by Jon Skeet&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-and-dotnet-framework-july-2025-servicing-updates/"&gt;.NET and .NET Framework July 2025 servicing releases updates&lt;/a&gt; by .NET Team&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.neowin.net/news/microsoft-is-planning-a-huge-upgrade-for-visual-studio/"&gt;Microsoft is planning a huge upgrade for Visual Studio&lt;/a&gt; by Usama Jawad&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.jetbrains.com/dotnet/2025/07/15/dotinsights-july-2025/"&gt;dotInsights | July 2025 | The .NET Tools Blog&lt;/a&gt; by Rachel Appel&lt;/p&gt;
&lt;h2 id="domain-driven-design"&gt;Domain Driven Design&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.osedea.com/insight/how-eventstorming-facilitated-knowledge-transfer-and-discovery"&gt;EventStorming: enhancing knowledge transfer in complex domains&lt;/a&gt; by Alizée Gottardo&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.nimblepros.com/blogs/building-your-first-resilience-pipeline/"&gt;Microsoft Resiliency Extensions and Polly Part 1 - Building Your First Resilience Pipeline&lt;/a&gt; by Jeff Zuerlein&lt;/p&gt;
&lt;h2 id="devops"&gt;DevOps&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.codemag.com/Article/2507021/Git-Branching-Strategies"&gt;Git Branching Strategies&lt;/a&gt; by Sahil Malik&lt;/p&gt;
&lt;!-- ## Software Design

## Mobile
 --&gt;
&lt;h2 id="agilework-life"&gt;Agile/Work Life&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://sadukie.com/2025/07/24/lightning-talk-on-kindness.html"&gt;The Lightning Talk on Kindess&lt;/a&gt; by Sarah Dutkiewicz&lt;/p&gt;
&lt;h2 id="restapis"&gt;REST/APIs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://apievangelist.com/2025/07/22/the-intersection-of-api-rate-limits-plans-pricing-and-marketplace-working-things-out/"&gt;The Intersection of API Rate Limits, Plans &amp;amp; Pricing, and Marketplace Working Things Out&lt;/a&gt; by Kin Lane&lt;/p&gt;
&lt;h2 id="azure"&gt;Azure&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/cosmosdb/integration-testing-for-go-applications-using-testcontainers-and-containerized-databases/"&gt;Integration testing for Go applications using Testcontainers and containerized databases&lt;/a&gt; by Azure Cosmos DB Blog&lt;/p&gt;
&lt;h2 id="software-development"&gt;Software Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://medium.com/aia-sg-techblog/refactor-if-elseif-elseif-using-strategy-design-pattern-80c51913a539"&gt;Refactor if/elseif/elseif using Strategy Design Pattern&lt;/a&gt; by Sandesh Gaonkar&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.blog/changelog/2025-07-23-github-spark-in-public-preview-for-copilot-pro-subscribers/"&gt;GitHub Spark in public preview for Copilot Pro+ subscribers&lt;/a&gt; by Github Changelog&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20250724-00/?p=111406"&gt;How can I wait until a named object (say a mutex) is created?&lt;/a&gt; by Raymond Chen&lt;/p&gt;
&lt;h2 id="windows"&gt;Windows&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://ardalis.com/install-nerd-fonts-terminal-icons-pwsh-7-win-11/"&gt;How to Install Nerd Fonts and Icons in PowerShell 7 on Windows 11&lt;/a&gt; by Steve Smith&lt;/p&gt;
&lt;!-- ## Security
 --&gt;
&lt;h2 id="ai"&gt;AI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.theregister.com/2025/07/25/opinion_column_vibe_coding/"&gt;Vibe coding might cause problems down the road&lt;/a&gt; by Steven J. Vaughan-Nichols&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.theregister.com/2025/07/22/ai_anxiety_us_workers/"&gt;One in six US workers pretends to use AI to please bosses ΓÇó The Register&lt;/a&gt; by Danny Bradbury&lt;/p&gt;
&lt;!-- ## Social Media

## Online Tools

## Databases

## Cloud

## Computing
 --&gt;
&lt;h2 id="podcasts"&gt;Podcasts&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.dotnetrocks.com/details/1960"&gt;AI Concerns with Mark Seemann&lt;/a&gt; by .NET Rocks&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - July 20</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-july-20</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-july-20</guid>
			<pubDate>Mon, 21 Jul 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;h2 id="open-source"&gt;Open-source&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2025/07/20/how-i-prioritize-oss-bugs/"&gt;How I Prioritize OSS Bugs&lt;/a&gt; by Jeremy D. Miller&lt;/p&gt;
&lt;!-- ## Architecture

## Presenting
 --&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://blog.nimblepros.com/blogs/building-your-first-resilience-pipeline/"&gt;Microsoft Resiliency Extensions and Polly Part 1 - Building Your First Resilience Pipeline&lt;/a&gt; by Jeff Zuerlein&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codeblog.jonskeet.uk/2025/07/19/unexpected-inconsistency-in-records/"&gt;Unexpected inconsistency in records&lt;/a&gt; by Jon Skeet&lt;/p&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/exploring-dotnet-10-preview-features-3-csharp-14-extensions-members/"&gt;C# 14 extension members; AKA extension everything&lt;/a&gt; by Andrew Lock&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.josephguadagno.net/2025/07/19/aspire-dashboard"&gt;Aspire Dashboard&lt;/a&gt; by Joseph Guadagno&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.milanjovanovic.tech/blog/pdf-reporting-in-dotnet-with-html-templates-and-puppeteersharp"&gt;PDF Reporting in .NET With HTML Templates and PuppeteerSharp (and it's free)&lt;/a&gt; by Milan Jovanović&lt;/p&gt;
&lt;h2 id="domain-driven-design"&gt;Domain Driven Design&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.osedea.com/insight/how-eventstorming-facilitated-knowledge-transfer-and-discovery"&gt;EventStorming: enhancing knowledge transfer in complex domains&lt;/a&gt; by Alizée Gottardo&lt;/p&gt;
&lt;!-- ## DevOps

## Software Design

## Mobile
 --&gt;
&lt;h2 id="agilework-life"&gt;Agile/Work Life&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.techradar.com/pro/microsoft-says-ai-saved-it-usd500-million-despite-it-also-confirming-massive-job-cuts"&gt;Microsoft says AI saved it $500 million - despite it also confirming massive job cuts&lt;/a&gt; by Craig Hale&lt;/p&gt;
&lt;p&gt;&lt;a href="https://sadukie.com/2025/07/18/a-week-of-mondays.html"&gt;A Week of Mondays&lt;/a&gt; by Sarah Dutkiewicz&lt;/p&gt;
&lt;h2 id="restapis"&gt;REST/APIs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://apisyouwonthate.com/newsletter/openapi-3-2-is-here/"&gt;OpenAPI Spec 3.2 is coming&lt;/a&gt; by Alexander Karan&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nordicapis.com/10-signs-you-might-need-api-governance/"&gt;10+ Signs You Might Need API Governance&lt;/a&gt; by Bill Doerrfeld&lt;/p&gt;
&lt;p&gt;&lt;a href="https://architecturalbytes.substack.com/p/why-ownership-is-the-key-to-successful?subscribe_prompt=free"&gt;Why ownership is the key to successful APIs&lt;/a&gt; by Daniel Kocot&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mamund.substack.com/p/focusing-on-capabilities-is-a-win"&gt;Focusing on Capabilities Is a Win&lt;/a&gt; by Mike Amundsen&lt;/p&gt;
&lt;h2 id="azure"&gt;Azure&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/cosmosdb/build-reliable-go-applications-configuring-azure-cosmos-db-go-sdk-for-real-world-scenarios/"&gt;Build reliable Go applications: Configuring Azure Cosmos DB Go SDK for real-world scenarios&lt;/a&gt; by Azure Cosmos DB Blog&lt;/p&gt;
&lt;!-- ## Software Development
 --&gt;
&lt;h2 id="windows"&gt;Windows&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20140905-00/?p=63"&gt;You can use a file as a synchronization object, too&lt;/a&gt; by Raymond Chen&lt;/p&gt;
&lt;!-- ## Security
 --&gt;
&lt;h2 id="ai"&gt;AI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.infoworld.com/article/4020931/ai-coding-tools-can-slow-down-seasoned-developers-by-19.html"&gt;AI coding tools can slow down seasoned developers by 19%&lt;/a&gt; by Gyana Swain&lt;/p&gt;
&lt;!-- ## Social Media

## Online Tools

## Databases

## Cloud
 --&gt;
&lt;h2 id="computing"&gt;Computing&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20250718-00/?p=111390"&gt;The case of the invalid instruction exception on an instruction that should never have executed&lt;/a&gt; by Raymond Chen&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kristoff.it/blog/asynchrony-is-not-concurrency/"&gt;Asynchrony is not Concurrency&lt;/a&gt; by Loris Cro&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - July 13</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-july-13</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-july-13</guid>
			<pubDate>Mon, 14 Jul 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;!-- ## Open-source
 --&gt;
&lt;h2 id="architecture"&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://academy.nimblepros.com/p/documenting-decisions-a-practical-guide-to-architecture-decision-records"&gt;Documenting Decisions: A Practical Guide to (Architecture) Decision&lt;/a&gt; by NimblePros&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.architecture-weekly.com/p/dealing-with-eventual-consistency"&gt;Dealing with Eventual Consistency, and Causal Consistency using Predictable Identifiers&lt;/a&gt; by Oskar Dudycz&lt;/p&gt;
&lt;!-- ## Presenting
 --&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.jimmybogard.com/automapper-and-mediatr-roadmaps/"&gt;AutoMapper and MediatR Roadmaps&lt;/a&gt; by Jimmy Bogard&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.josephguadagno.net/2025/07/08/simplify-your-dot-net-development-with-aspire"&gt;Simplify Your .NET Development with Aspire&lt;/a&gt; by Joseph Guadagno&lt;/p&gt;
&lt;p&gt;&lt;a href="https://antondevtips.com/roadmap/dotnet?utm_source=linkedin&amp;amp;utm_medium=social&amp;amp;utm_campaign=dotnet-roadmap-2025"&gt;The Ultimate .NET 2025 Roadmap&lt;/a&gt; by Anton Martyniuk&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2025/07/11/critter-stack-futures-for-the-rest-of-2025/"&gt;Critter Stack Futures for the rest of 2025&lt;/a&gt; by Jeremy D. Miller&lt;/p&gt;
&lt;p&gt;&lt;a href="https://sadukie.com/2025/07/11/vibe-coding-bingo.html"&gt;Vibe Coding a BINGO Caller&lt;/a&gt; by Sarah Dutkiewicz&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.milanjovanovic.tech/blog/using-dotnet-aspire-with-the-docker-publisher"&gt;Using .NET Aspire With the Docker Publisher&lt;/a&gt; by Milan Jovanović&lt;/p&gt;
&lt;!-- ## Domain Driven Design

## DevOps
 --&gt;
&lt;h2 id="software-design"&gt;Software Design&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://blog.nimblepros.com/blogs/ddd-vs-sql/"&gt;How SQL is screwing up your DDD&lt;/a&gt; by Author image.
Philippe Vaillancourt&lt;/p&gt;
&lt;!-- ## Mobile

## Agile/Work Life
 --&gt;
&lt;h2 id="restapis"&gt;REST/APIs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://architecturalbytes.substack.com/p/why-ownership-is-the-key-to-successful?subscribe_prompt=free"&gt;Why ownership is the key to successful APIs&lt;/a&gt; by Daniel Kocot&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mamund.substack.com/p/when-api-clients-have-a-mind-of-their"&gt;When API Clients Have a Mind of Their Own&lt;/a&gt; by Mike Amundsen&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apievangelist.com/2025/07/07/there-is-only-api-consumption/"&gt;There Is Only API Consumption&lt;/a&gt; by Kin Lane&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apisyouwonthate.com/newsletter/design-for-caching-up-front/"&gt;Caching, up-front&lt;/a&gt; by Alexander Karan&lt;/p&gt;
&lt;h2 id="azure"&gt;Azure&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/devops/markdown-support-arrives-for-work-items/"&gt;Markdown Support Arrives for Work Items&lt;/a&gt; by Azure DevOps Blog&lt;/p&gt;
&lt;h2 id="software-development"&gt;Software Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://jsdate.wtf/"&gt;The JavaScript Date Quiz&lt;/a&gt; by Sam Rose&lt;/p&gt;
&lt;!-- ## Windows

## Security
 --&gt;
&lt;h2 id="ai"&gt;AI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://theconversation.com/does-ai-actually-boost-productivity-the-evidence-is-murky-260690"&gt;Does AI actually boost productivity? The evidence is murky&lt;/a&gt; by Kim Honey&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.techradar.com/pro/microsoft-says-ai-saved-it-usd500-million-despite-it-also-confirming-massive-job-cuts"&gt;Microsoft says AI saved it $500 million - despite it also confirming massive job cuts&lt;/a&gt; by&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=shOLHtyUaFg"&gt;Rethinking the AI coding payoff - YouTube&lt;/a&gt; by CNBC Television&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.infoworld.com/article/4020931/ai-coding-tools-can-slow-down-seasoned-developers-by-19.html"&gt;AI coding tools can slow down seasoned developers by 19%&lt;/a&gt; by Gyana Swain&lt;/p&gt;
&lt;p&gt;&lt;a href="https://martinfowler.com/articles/2025-nature-abstraction.html"&gt;LLMs bring new nature of abstraction&lt;/a&gt; by Martin Fowler&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.wildermuth.com/2025/07/01/pondering-about-using-ai-for-coding/"&gt;Pondering About Using AI for Coding&lt;/a&gt; by Shawn Wildermuth&lt;/p&gt;
&lt;!-- ## Social Media

## Online Tools

## Databases
 --&gt;
&lt;h2 id="cloud"&gt;Cloud&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/cosmosdb/building-event-driven-go-applications-with-azure-cosmos-db-and-azure-functions/"&gt;Building Event-Driven Go applications with Azure Cosmos DB and Azure Functions&lt;/a&gt; by Azure Cosmos DB Blog&lt;/p&gt;
&lt;h2 id="computing"&gt;Computing&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20250708-00/?p=111357"&gt;A walkthrough of the original Microsoft Building 3&lt;/a&gt; by Raymond Chen&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - July 6</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-july-6</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-july-6</guid>
			<pubDate>Mon, 07 Jul 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;h2 id="open-source"&gt;Open-source&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.clearlydefined.io/docs/resources/faq"&gt;FAQ | ClearlyDefined Docs&lt;/a&gt; by ClearlyDefined&lt;/p&gt;
&lt;!-- ## Architecture

## Presenting
 --&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.meziantou.net/how-to-find-public-symbols-that-can-be-internal-using-roslyn.htm"&gt;How to Find Public Symbols That Can Be Internal Using Roslyn&lt;/a&gt; by Gérald Barré&lt;/p&gt;
&lt;p&gt;&lt;a href="https://barretblake.dev/posts/development/2025/06/importing-json-files-into-csharp/"&gt;Importing JSON Files Into A C# Project&lt;/a&gt; by Barret Blake&lt;/p&gt;
&lt;h2 id="domain-driven-design"&gt;Domain Driven Design&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.linkedin.com/posts/hemal-varambhia-a4a81822_chatgpt-translation-layer-placement-in-activity-7346669860241719296-7abf"&gt;Inspired by Alistair Cockburn and Juan Manuel Garrido de Paz's book &amp;quot;Hexagonal Architecture Explained,&amp;quot; I thought I'd converse with ChatGPT about where a DDD translation layer could live&lt;/a&gt; by Hemal Varambhia&lt;/p&gt;
&lt;!-- ## DevOps

## Software Design

## Mobile
 --&gt;
&lt;h2 id="agilework-life"&gt;Agile/Work Life&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://sloanreview.mit.edu/article/how-leaders-fight-back-against-overwork/"&gt;How Leaders Fight Back Against Overwork&lt;/a&gt; by Melissa Swift&lt;/p&gt;
&lt;p&gt;&lt;a href="https://particular.net/blog/antirequirements"&gt;Using anti-requirements to find system boundaries&lt;/a&gt; by Andreas Öhlund and David Boike&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jdmeier.com/sara-ford-learning-agile/"&gt;Sara Ford on Learning Agile at Microsoft&lt;/a&gt; by JD Meier&lt;/p&gt;
&lt;!-- ## REST/APIs

## Azure
 --&gt;
&lt;h2 id="software-development"&gt;Software Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://mbrizic.com/blog/react-is-insane/"&gt;React Still Feels Insane And No One Is Talking About It&lt;/a&gt; by Mario Brizic&lt;/p&gt;
&lt;!-- ## Windows
 --&gt;
&lt;h2 id="security"&gt;Security&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://newsletter.shehackspurple.ca/c/secure-coding-guideline"&gt;Secure Coding Guideline&lt;/a&gt; by Tanya Janca&lt;/p&gt;
&lt;h2 id="ai"&gt;AI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://shayne.dev/blog/end-of-code/"&gt;The End of Code as We Know It&lt;/a&gt; by Shayne Sweeney&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gizmodo.com/free-lunch-is-over-for-the-ai-that-broke-the-web-2000623837"&gt;Free Lunch Is Over for the AI That Broke the Web&lt;/a&gt; by Luc Olinga&lt;/p&gt;
&lt;p&gt;&lt;a href="https://futurism.com/openai-forensic-psychiatrist"&gt;OpenAI Says It's Hired a Forensic Psychiatrist as Its Users Keep Sliding Into Mental Health Crises&lt;/a&gt; by Frank Landymore&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.aol.com/asked-chatgpt-avoid-being-replaced-180058408.html"&gt;I Asked ChatGPT How I Can Avoid Being Replaced by AI - It Gave Me 4 Great Tips&lt;/a&gt; by Nicole Spector&lt;/p&gt;
&lt;p&gt;&lt;a href="https://appetals.com/promptguide/"&gt;The Missing Guide to Prompt Engineering&lt;/a&gt; by Ishwar Jwa&lt;/p&gt;
&lt;p&gt;&lt;a href="https://metapress.com/chatgpt-vs-claude-vs-gemini-i-used-all-three-to-save-10-hours-a-week-heres-what-actually-worked/"&gt;ChatGPT vs Claude vs Gemini: I Used All Three to Save 10 Hours a Week - Here's What Actually Worked&lt;/a&gt; by Lakisha Davis&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.windowscentral.com/software-apps/microsoft-has-a-new-way-to-use-ai-in-onenote-but-a-dumb-feature-excites-me-more"&gt;Microsoft has a new way to use AI in OneNote ' but a &amp;quot;dumb&amp;quot; feature excites me more&lt;/a&gt; by Sean Endicott&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.bbc.com/news/articles/cyvm1dyp9v2o"&gt;I'm being paid to fix issues caused by AI&lt;/a&gt; by Suzanne Bearne&lt;/p&gt;
&lt;!-- ## Social Media

## Online Tools
 --&gt;
&lt;h2 id="databases"&gt;Databases&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://techcommunity.microsoft.com/blog/adforpostgresql/announcing-a-new-ide-for-postgresql-in-vs-code-from-microsoft/4414648"&gt;Announcing a new IDE for PostgreSQL in VS Code from Microsoft&lt;/a&gt; by JoshMSFT&lt;/p&gt;
&lt;!-- ## Cloud
 --&gt;
&lt;h2 id="computing"&gt;Computing&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://itnext.io/cs-treatment-of-void-is-not-broken-b1d44b6dd576"&gt;C's treatment of &lt;code&gt;void *&lt;/code&gt; is not broken&lt;/a&gt; by Christopher Bazley&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sciencealert.com/a-strange-phrase-keeps-turning-up-in-scientific-papers-but-why"&gt;A Strange Phrase Keeps Turning Up in Scientific Papers, But Why?&lt;/a&gt; by Aaron J. Snoswell et al&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - June 29</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-june-29</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-june-29</guid>
			<pubDate>Mon, 30 Jun 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;h2 id="open-source"&gt;Open-source&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ShareX/ShareX?tab=readme-ov-file"&gt;ShareX/ShareX: ShareX is a free and open-source application that enables users to capture or record any area of their screen with a single keystroke. It also supports uploading images, text, and various file types to a wide range of destinations.&lt;/a&gt; by ShareX&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/apple/container"&gt;apple/container: A tool for creating and running Linux containers using lightweight virtual machines on a Mac. It is written in Swift, and optimized for Apple silicon.&lt;/a&gt; by Apple&lt;/p&gt;
&lt;p&gt;&lt;a href="https://alexthemark.substack.com/p/direct-file-is-open-source"&gt;Direct File is Open Source!&lt;/a&gt; by Alex Mark&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2025/06/23/oss-project-lessons-learned-with-david-giard/"&gt;OSS Project Lessons Learned with David Giard&lt;/a&gt; by Jeremy D. Miller&lt;/p&gt;
&lt;h2 id="architecture"&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.infoq.com/articles/decentralized-architecture-advice-process/"&gt;Decentralized Architecture Needs More Than Autonomy&lt;/a&gt; by Lindsey Tibbitts&lt;/p&gt;
&lt;!-- ## Presenting
 --&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.woodruff.dev/day-12-genetic-algorithms-elitism-for-evolution-survival-of-the-fittest/"&gt;Day 12: Genetic Algorithms' Elitism for Evolution Survival of the Fittest&lt;/a&gt; by Chris Woody Woodruff&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ardalis.com/tools-used/"&gt;Steve Smith's Tools Used&lt;/a&gt; by Steve Smith&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.c-sharpcorner.com/article/health-checks-in-net-8-web-api-a-comprehensive-guide/"&gt;Health Checks in .NET 8  Web API: A Comprehensive Guide&lt;/a&gt; by Ayush Gupta&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.linkedin.com/pulse/understanding-wolverine-aggregatehandler-workflow-martin-major-8qlnf/"&gt;Understanding Wolverine: AggregateHandler Workflow&lt;/a&gt; by Martin Major&lt;/p&gt;
&lt;p&gt;&lt;a href="https://isaacl.dev/gmy"&gt;Upgrade Your Application and Prepare for the Future with .NET Aspire&lt;/a&gt; by Mike Yeager&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/CsWin32?tab=readme-ov-file"&gt;microsoft/CsWin32: A source generator to add a user-defined set of Win32 P/Invoke methods and supporting types to a C# project.&lt;/a&gt; by Microsoft&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-in-dev-container/"&gt;Exploring new .NET releases with Dev Containers&lt;/a&gt; by .NET Team&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2024/06/10/sneak-peek-of-strong-typed-identifiers-in-marten/"&gt;Sneak Peek of Strong Typed Identifiers in Marten&lt;/a&gt; by Jeremy D. Miller&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.milanjovanovic.tech/blog/testcontainers-best-practices-dotnet-integration-testing"&gt;Testcontainers Best Practices for .NET Integration Testing&lt;/a&gt; by Milan Jovanović&lt;/p&gt;
&lt;!-- ## Domain Driven Design

## DevOps
 --&gt;
&lt;h2 id="software-design"&gt;Software Design&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://draft.io/example/example-mapping"&gt;Example Mapping&lt;/a&gt; by Gojko Adzic&lt;/p&gt;
&lt;!-- ## Mobile
 --&gt;
&lt;h2 id="agilework-life"&gt;Agile/Work Life&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.linkedin.com/pulse/introducing-her-executive-ascent-built-women-who-done-lori-lalonde-rlxkc/"&gt;Introducing Her Executive Ascent: Built for Women Who Are Done Waiting&lt;/a&gt; by Lori Lalonde&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.psychologytoday.com/ca/blog/well-being-is-foundational-of-leadership/202506/how-to-reinvent-meeting-culture-from-draining"&gt;How to Reinvent Meeting Culture: From Draining to Energizing&lt;/a&gt; by Jamie Shapiro Ph.D.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.dotnetrocks.com/details/1955"&gt;Frictionless Development with Nicole Forsgren&lt;/a&gt; by .NET Rocks&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ashley.dev/posts/the-high-cost-of-being-low-maintenance/"&gt;The High Cost of Being Low Maintenance&lt;/a&gt; by Ashley Willis&lt;/p&gt;
&lt;!-- ## REST/APIs
 --&gt;
&lt;h2 id="azure"&gt;Azure&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/azure-sdk/introducing-the-azure-storage-connector-for-pytorch/"&gt;Introducing the Azure Storage Connector for PyTorch&lt;/a&gt; by Azure SDK Blog&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/devops/removing-azure-resource-manager-reliance-on-azure-devops-sign-ins/"&gt;Removing Azure Resource Manager reliance on Azure DevOps sign-ins&lt;/a&gt; by Azure DevOps Blog&lt;/p&gt;
&lt;h2 id="software-development"&gt;Software Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://spectrum.ieee.org/nist-quantum-random-number-generator"&gt;NIST's Quantum Random Number Generator Is Free to Use&lt;/a&gt; by Edd Gent&lt;/p&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/working-with-stacked-branches-in-git-part-2/"&gt;Working with stacked branches in git (Part 2)&lt;/a&gt; by Andrew Lock&lt;/p&gt;
&lt;h2 id="windows"&gt;Windows&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.meziantou.net/how-to-exclude-your-windows-app-from-screen-capture-and-recall.htm"&gt;How to Exclude Your Windows App from Screen Capture and Recall&lt;/a&gt; by Gérald Barré&lt;/p&gt;
&lt;!-- ## Security
 --&gt;
&lt;h2 id="ai"&gt;AI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.reuters.com/legal/litigation/anthropic-wins-key-ruling-ai-authors-copyright-lawsuit-2025-06-24/"&gt;Anthropic wins key US ruling on AI training in authors' copyright lawsuit&lt;/a&gt; by Blake Brittain&lt;/p&gt;
&lt;p&gt;&lt;a href="https://analyticsindiamag.com/ai-news-updates/vibe-coder-gets-legal-notice-from-docusign/"&gt;Vibe Coder Gets Legal Notice From DocuSign&lt;/a&gt; by Supreeth Koundinya&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tidyfirst.substack.com/p/augmented-coding-beyond-the-vibes"&gt;Augmented Coding: Beyond the Vibes&lt;/a&gt; by Kent Beck&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.groktop.us/duolingos-ai-first-disaster-a-cautionary-tale-of-what-happens-when-you-replace-rather-than-partner/"&gt;Duolingo's $7B AI Disaster: Enterprise Lessons for AI Implementation&lt;/a&gt; by Magnus Hedemark&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mamund.substack.com/p/from-sheet-music-to-source-code"&gt;From sheet music to source code&lt;/a&gt; by Mike Amundsen&lt;/p&gt;
&lt;!-- ## Social Media

## Online Tools

## Databases

## Cloud
 --&gt;
&lt;h2 id="computing"&gt;Computing&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.quantamagazine.org/how-does-graph-theory-shape-our-world-20250626/"&gt;How Does Graph Theory Shape Our World?&lt;/a&gt; by Janna Levin, Steve Strogatz&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.tomshardware.com/software/png-has-been-updated-for-the-first-time-in-22-years-new-spec-supports-hdr-and-animation"&gt;PNG has been updated for the first time in 22 years&lt;/a&gt; by Jowi Morale&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - June 15</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-june-22</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-june-22</guid>
			<pubDate>Mon, 23 Jun 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;!-- ## Open-source
 --&gt;
&lt;!-- ## Architecture
 --&gt;
&lt;!-- ## Presenting
 --&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=lgacB-sfCMg"&gt;Was I Wrong About Blazor?&lt;/a&gt; by Shaun Wildermuth&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dev.to/entomy/real-traits-in-c-4fpk"&gt;Real Traits in C#&lt;/a&gt; by Patrick Kelly&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.devleader.ca/how-to-tame-async-void-in-c-93fffd557729"&gt;How to Tame “async void” in C#&lt;/a&gt; by Dev Leader&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.nimblepros.com/blogs/task-whenall-vs-parallel-foreach/"&gt;Task.WhenAll or Parallel.ForEach?&lt;/a&gt; by Fati Iseni&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.woodruff.dev/day-9-using-genetic-algorithms-uniform-crossover-in-c/"&gt;Day 9: Using Genetic Algorithm's Uniform Crossover in C#&lt;/a&gt; by Chris Woody Woodruff&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.josephguadagno.net/2025/06/22/using-certificates-for-authentication-with-microsoft-identity-library"&gt;Using Certificates for Authentication with Microsoft Identity Library&lt;/a&gt; by Joe Guadagno&lt;/p&gt;
&lt;p&gt;&lt;a href="https://duendesoftware.com/blog/20250617-what-is-an-oauth-20-and-openid-connect-client"&gt;What is an OAuth 2.0 and OpenID Connect Client?&lt;/a&gt; by Khalid Abuhakmeh&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2025/06/22/wire-up-xunit-logging-for-crazy-integration-testing/"&gt;Wire Up XUnit Logging for Crazy Integration Testing&lt;/a&gt; by Jeremy D. Miller&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.milanjovanovic.tech/blog/monitoring-dotnet-applications-with-opentelemetry-and-grafana"&gt;Monitoring .NET Applications with OpenTelemetry and Grafana&lt;/a&gt; by Milan Jovanović&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/visualstudio/agent-mode-is-now-generally-available-with-mcp-support/"&gt;Agent mode is now generally available with MCP support&lt;/a&gt; by Rhea Patel, Filisha Shah, and Allie Barry&lt;/p&gt;
&lt;h2 id="domain-driven-design"&gt;Domain Driven Design&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=rPNdlLwBnW4"&gt;What we learned about event sourcing and DDD while building a bank&lt;/a&gt; by Thomas Bøgh Fangel&lt;/p&gt;
&lt;!-- ## DevOps
 --&gt;
&lt;h2 id="software-design"&gt;Software Design&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://blog.bytebytego.com/p/oop-design-patterns-and-anti-patterns"&gt;OOP Design Patterns and Anti-Patterns: What Works and What Fails&lt;/a&gt; by ByteByteGo&lt;/p&gt;
&lt;!-- ## Mobile

## Agile/Work Life

## REST/APIs
 --&gt;
&lt;h2 id="azure"&gt;Azure&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/devops/azure-devops-mcp-server-public-preview/"&gt;Azure DevOps MCP Server, Public Preview&lt;/a&gt; by Azure DevOps Blog&lt;/p&gt;
&lt;h2 id="software-development"&gt;Software Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20250619-00/?p=111285"&gt;Learning to read C++ compiler errors: Ambiguous symbol errors after including a header file&lt;/a&gt; by Raymond Chen&lt;/p&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/working-with-stacked-branches-in-git-part-1/"&gt;Working with stacked branches in git (Part 1)&lt;/a&gt; by Andrew Lock&lt;/p&gt;
&lt;!-- ## Windows

## Security
 --&gt;
&lt;h2 id="ai"&gt;AI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://apisyouwonthate.com/newsletter/openapi-openmcp/"&gt;OpenAPI 🤝 OpenMCP&lt;/a&gt; by Alexander Karan&lt;/p&gt;
&lt;!-- ## Social Media

## Online Tools

## Databases

## Cloud
 --&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - June 15</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-june-15</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-june-15</guid>
			<pubDate>Mon, 16 Jun 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;!-- ## Open-source
 --&gt;
&lt;!-- ## Architecture
 --&gt;
&lt;!-- ## Presenting
 --&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://softdevbytes.com/aspnet-pdf-guide-building-an-invoice-app-with-questpdf/"&gt;ASP.NET PDF Guide: Building an Invoice App with QuestPDF&lt;/a&gt; by Adesina Omoniyi&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dnfprojects.org/"&gt;Projects - .NET Foundation Project Trends&lt;/a&gt; by .NET Foundation&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.woodruff.dev/day-7-putting-it-together-simulating-your-first-ga-cycle-in-net/"&gt;Day 7: Putting It Together: Simulating Your First GA Cycle in .NET&lt;/a&gt; by Chris Woody Woodruff&lt;/p&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/converting-an-xna-game-to-monogame/"&gt;Converting a Microsoft XNA 3.1 game to MonoGame&lt;/a&gt; by Andrew Lock&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.milanjovanovic.tech/blog/run-csharp-scripts-with-dotnet-run-app-no-project-files-needed"&gt;Run C# Scripts With dotnet run app.cs (No Project Files Needed)&lt;/a&gt; by Milan Jovanović&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.duendesoftware.com/posts/20250610-monitoring-duende-identityserver-license-usage-with-aspnet-core-health-checks/"&gt;Monitoring Duende IdentityServer License Usage with ASP.NET Core Health Checks&lt;/a&gt; by Maarten Balliauw&lt;/p&gt;
&lt;!-- ## Domain Driven Design

## DevOps

## Design

## Mobile
 --&gt;
&lt;h2 id="agilework-life"&gt;Agile/Work Life&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://sadukie.com/2025/06/14/why-engineers-need-more-than-one-road.html"&gt;Why Engineers Need More Than One Road | The Adventures of Sadukie&lt;/a&gt; by Sarah Dutkiewicz&lt;/p&gt;
&lt;h2 id="restapis"&gt;REST/APIs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://apievangelist.com/2025/06/11/can-we-have-a-converstion-about-api-discovery-integration-and-consumption/"&gt;Can We Have a Conversation About API Discovery, Integration, and Consumption?&lt;/a&gt; by Kin Lane&lt;/p&gt;
&lt;h2 id="azure"&gt;Azure&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/devops/june-patches-for-azure-devops-server-4/"&gt;June Patches for Azure DevOps Server&lt;/a&gt; by Azure DevOps Blog&lt;/p&gt;
&lt;!-- ## Software Development
 --&gt;
&lt;h2 id="windows"&gt;Windows&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=NfBXDEgm6VY"&gt;Windows Kernel Programming with Rust&lt;/a&gt; by Matthias Heiden&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20250613-00/?p=111268"&gt;Thread pool threads are like preschool: Leave things the way you found them&lt;/a&gt; by Raymond Chen&lt;/p&gt;
&lt;!-- ## Security
## AI

 --&gt;
&lt;!-- 
## Social Media --&gt;
&lt;!-- ## Online Tools

## Databases
 --&gt;
&lt;h2 id="cloud"&gt;Cloud&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.bleepingcomputer.com/news/google/google-links-massive-cloud-outage-to-api-management-issue/"&gt;Google links massive cloud outage to API management issue&lt;/a&gt; by Sergiu Gatlan&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - June 8</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-june-8</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-june-8</guid>
			<pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;!-- ## Open-source
 --&gt;
&lt;!-- ## Architecture
 --&gt;
&lt;!-- ## Presenting
 --&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=52b-StTWuCY"&gt;AspiriFridays with David, Damian, and Maddy - Sean from SCT Software&lt;/a&gt; by .NET Team&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/catching-up-on-microsoft-build-2025-essential-sessions-for-dotnet-developers/?utm_source=paulomorgado.net&amp;amp;utm_medium=bluesky"&gt;Catch Up on Microsoft Build 2025: Essential Sessions for .NET Developers&lt;/a&gt; by .NET Team&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ssqGEBW-gpo&amp;amp;t=15s"&gt;What's Next in C#&lt;/a&gt; by Mads Torgersen and Dustin Campbell&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.woodruff.dev/day-1-the-survival-of-the-fittest-code-why-learn-genetic-algorithms-in-c/"&gt;Day 1: The Survival of the Fittest Code: Why Learn Genetic Algorithms in C#?&lt;/a&gt; by Chris Woody Woodruff&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.ploeh.dk/2025/06/09/song-recommendations-from-combinators/"&gt;Song recommendations from combinators&lt;/a&gt; by Mark Seemann&lt;/p&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/creating-your-first-sample-game-with-monogame/"&gt;Creating your first sample game with MonoGame&lt;/a&gt; by Andrew Lock&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.duendesoftware.com/posts/20250603-testing-duende-identityserver-login-flow-with-a-net-10-dotnet-run-appcs/"&gt;Testing Duende IdentityServer Login Flow With a .NET 10 dotnet run app.cs&lt;/a&gt; by Khalid Abuhakmeh&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2025/06/05/low-ceremony-railway-programming-with-wolverine/"&gt;Low Ceremony Railway Programming with Wolverine&lt;/a&gt; by Jeremy D. Miller&lt;/p&gt;
&lt;!-- ## Domain Driven Design

## DevOps

## Design

## Mobile
 --&gt;
&lt;h2 id="agilework-life"&gt;Agile/Work Life&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://tahahussain.substack.com/p/how-to-survive-and-thrive-in-a-toxic?triedRedirect=true"&gt;How to Survive (and Thrive) in a Toxic Workplace.&lt;/a&gt; by Taha Hussain&lt;/p&gt;
&lt;h2 id="restapis"&gt;REST/APIs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://nordicapis.com/10-signs-you-might-need-api-governance/"&gt;10+ Signs You Might Need API Governance&lt;/a&gt; by Bill Doerrfeld&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.apimatic.io/blog/mastering-api-governance"&gt;Mastering API Governance for Digital Transformation&lt;/a&gt; by Sid Maestre&lt;/p&gt;
&lt;h2 id="azure"&gt;Azure&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/azure-sdk/azure-sdk-release-may-2025/"&gt;Azure SDK Release (May 2025)&lt;/a&gt; by Azure SDK Blog&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/cosmosdb/building-a-modern-python-api-with-azure-cosmos-db-a-5-part-video-series/"&gt;Building a Modern Python API with Azure Cosmos DB: A 5-Part Video Series&lt;/a&gt; by Azure Cosmos DB Blog&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/devops/restricting-pat-creation-in-azure-devops-is-now-in-preview/"&gt;Restricting PAT Creation in Azure DevOps Is Now in Preview&lt;/a&gt; by Azure DevOps Blog&lt;/p&gt;
&lt;h2 id="software-development"&gt;Software Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20250606-00/?p=111254"&gt;Why does C++ think my class is copy-constructible when it can't be copy-constructed?&lt;/a&gt; by Raymond Chen&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;timkleier/vertical-and-horizontal-slices-45b7d435ac35"&gt;Vertical AND Horizontal Slices in Agile Software Development&lt;/a&gt; by Tim Kleier&lt;/p&gt;
&lt;!-- ## Windows
 --&gt;
&lt;!-- ## Security
 --&gt;
&lt;h2 id="ai"&gt;AI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://samestuffdifferentday.net/2025/06/02/ai-learning-plan/"&gt;Copilot Helped Me Create an AI Learning Plan&lt;/a&gt; by Micheal Eaton&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ardalis.com/genai-is-the-new-offshoring/"&gt;GenAI is the new Offshoring&lt;/a&gt; by Steve Smith&lt;/p&gt;
&lt;!-- 
## Social Media --&gt;
&lt;h2 id="online-tools"&gt;Online Tools&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pocketcal.com/#N4IgziBcIEwAwwKwFo4DZUEYQBoQHMoBtUAYyjjwCdiiAOHOgXR3p0xiaYF8eg"&gt;PocketCal&lt;/a&gt; by Cassidy Williams&lt;/p&gt;
&lt;h2 id="databases"&gt;Databases&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.milanjovanovic.tech/blog/debunking-the-filter-early-join-later-sql-performance-myth"&gt;Debunking the &amp;quot;Filter Early, JOIN Later&amp;quot; SQL Performance Myth&lt;/a&gt; by Milan Jovanović&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - June 1</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-june-1</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-june-1</guid>
			<pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;!-- ## Open-source
 --&gt;
&lt;h2 id="architecture"&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://dev.to/shayy/the-serverless-dream-is-dead-2945"&gt;The Serverless Dream Is Dead&lt;/a&gt; by Shayan&lt;/p&gt;
&lt;!-- ## Presenting
 --&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.meziantou.net/automating-null-forgiving-operator-removal-in-csharp-projects.htm"&gt;Automating Null-Forgiving Operator Removal in C# Projects&lt;/a&gt; by Gérald Barré&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devclass.com/2025/05/29/microsoft-designates-blazor-as-its-main-future-investment-in-web-ui-for-net/"&gt;Microsoft designates Blazor as its main future investment in Web UI for .NET&lt;/a&gt; by Tim Anderson&lt;/p&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/converting-a-docker-compose-file-to-aspire/"&gt;Converting a docker-compose file to .NET Aspire&lt;/a&gt; by Andrew Lock&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.duendesoftware.com/posts/20250527-the-role-of-authenticationproperties-in-aspnet-core/"&gt;The role of AuthenticationProperties in ASP.NET Core&lt;/a&gt; by Maarten Balliauw&lt;/p&gt;
&lt;!-- ## Domain Driven Design

## DevOps

## Design

## Mobile
 --&gt;
&lt;h2 id="agilework-life"&gt;Agile/Work Life&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.financialexpress.com/life/technology-microsoft-ceo-satya-nadella-reveals-why-6000-employees-were-laid-off-chief-product-officer-shares-key-advice-for-coders-3862902/"&gt;Microsoft CEO Satya Nadella reveals why 6,000 employees were laid off, Chief Product Officer shares key advice for coders&lt;/a&gt; by The Financial Express&lt;/p&gt;
&lt;h2 id="restapis"&gt;REST/APIs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://apievangelist.com/2025/05/30/ontological-vs-epistemological-api-governance/"&gt;Ontological vs Epistemological API Governance&lt;/a&gt; by Kin Lane&lt;/p&gt;
&lt;h2 id="azure"&gt;Azure&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/cosmosdb/powering-real-time-messaging-at-scale-with-azure-cosmos-db/"&gt;Powering Real-Time Messaging at Scale with Azure Cosmos DB &lt;/a&gt; by Azure Cosmos DB Blog&lt;/p&gt;
&lt;!-- ## Software Development
 --&gt;
&lt;h2 id="windows"&gt;Windows&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20250526-00/?p=111218"&gt;Why does EnumProcessModules report no modules on a process that was created suspended? &lt;/a&gt; by The Old New Thing&lt;/p&gt;
&lt;!-- ## Security
 --&gt;
&lt;h2 id="ai"&gt;AI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/devops/azure-devops-with-github-repositories-your-path-to-agentic-ai/"&gt;Azure DevOps with GitHub Repositories - Your path to Agentic AI&lt;/a&gt; by Azure DevOps Blog&lt;/p&gt;
&lt;p&gt;&lt;a href="https://vladikk.com/2025/05/26/with-ai-everything-is-complicated/"&gt;With AI, everything is so complicated... and this is great news!&lt;/a&gt; by Vlad Khononov&lt;/p&gt;
&lt;!-- 
## Social Media --&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - May 25</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-may-25</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-may-25</guid>
			<pubDate>Mon, 26 May 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;!-- ## Open-source
 --&gt;
&lt;h2 id="architecture"&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://dev.to/shayy/the-serverless-dream-is-dead-2945"&gt;The Serverless Dream Is Dead - DEV Community&lt;/a&gt; by Shayan&lt;/p&gt;
&lt;p&gt;&lt;a href="https://event-driven.io/en/event_stores_are_key_value_stores/"&gt;Event stores are key-value databases, and why that matters&lt;/a&gt; by Oskar Dudycz&lt;/p&gt;
&lt;p&gt;&lt;a href="https://microservices.io/post/architecture/2025/03/23/andrew-harmel-law-architecture-advice-process.html"&gt;Harmel-Law's architecture advice process and fast flow&lt;/a&gt; by Chris Richardson&lt;/p&gt;
&lt;!-- ## Presenting
 --&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=W-f9MHB-5TQ&amp;amp;list=PLdo4fOcmZ0oXeSG8BgCVru3zQtw_K4ANY&amp;amp;index=71"&gt;Advanced Pattern Matching in C#&lt;/a&gt; by Oliver Sturm&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2025/05/21/message-concurrency-parallelism-and-ordering-with-wolverine/"&gt;Message Concurrency, Parallelism, and Ordering with Wolverine&lt;/a&gt; by Jeremy D. Miller&lt;/p&gt;
&lt;p&gt;&lt;a href="https://steven-giesel.com/blogPost/e2552b7a-293a-4f46-892f-95a0cd677e4d?utm_source=paulomorgado.net&amp;amp;utm_medium=bluesky"&gt;Writing new guards with extensions in C# 14&lt;/a&gt; by Steve Giesel&lt;/p&gt;
&lt;p&gt;&lt;a href="https://woodruff.dev/evolve-your-c-code-with-ai-a-5-week-genetic-algorithms-bootcamp-for-developers/"&gt;Evolve Your C# Code with AI: A 5-Week Genetic Algorithms Bootcamp for Developers&lt;/a&gt; by Chris Woody Woodruff&lt;/p&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/server-sent-events-in-aspnet-core-and-dotnet-10"&gt;Server-Sent Events in ASP.NET Core and .NET 10&lt;/a&gt; by  Khalid Abuhakme&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2025/05/22/critter-stack-release-plans/"&gt;Critter Stack Release Plans&lt;/a&gt; by Jeremy D. Miller&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.milanjovanovic.tech/blog/building-a-custom-domain-events-dispatcher-in-dotnet"&gt;Building a Custom Domain Events Dispatcher in .NET&lt;/a&gt; by Milan Jovanović&lt;/p&gt;
&lt;h2 id="domain-driven-design"&gt;Domain Driven Design&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.milanjovanovic.tech/blog/from-anemic-models-to-behavior-driven-models-a-practical-ddd-refactor-in-csharp?utm_source=LinkedIn&amp;amp;utm_medium=social&amp;amp;utm_campaign=19.05.2025"&gt;From Anemic Models to Behavior-Driven Models: A Practical DDD Refactor in C#&lt;/a&gt; by Milan Jovanović&lt;/p&gt;
&lt;!-- ## DevOps

## Design

## Mobile
 --&gt;
&lt;h2 id="agilework-life"&gt;Agile/Work Life&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.therecord.com/news/waterloo-region/iron-ring-turns-100/article_f5953e86-e1b4-5bc2-aac7-82595524f814.html"&gt;Iron Ring symbolizes for engineers&lt;/a&gt; by The Record&lt;/p&gt;
&lt;h2 id="restapis"&gt;REST/APIs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://apisyouwonthate.com/blog/api-design-reviews-dont-have-to-be-hard/"&gt;API Design Reviews Don't Have to be Hard&lt;/a&gt; by Phil Sturgeon&lt;/p&gt;
&lt;h2 id="azure"&gt;Azure&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/cosmosdb/confluent-cloud-releases-managed-v2-kafka-connector-for-azure-cosmos-db/"&gt;Confluent Cloud Releases Managed V2 Kafka Connector for Azure Cosmos DB&lt;/a&gt; by Azure Cosmos DB Blog&lt;/p&gt;
&lt;h2 id="software-development"&gt;Software Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/resharper/vscode/?utm_campaign=resharper&amp;amp;utm_content=link&amp;amp;utm_medium=social&amp;amp;utm_source=bluesky&amp;amp;utm_term=rs-vsc-launch"&gt;ReSharper for Visual Studio Code&lt;/a&gt; by Jetbrains&lt;/p&gt;
&lt;h2 id="windows"&gt;Windows&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.forbes.com/sites/zakdoffman/2025/05/19/microsoft-confirms-emergency-update-for-windows-users/"&gt;Microsoft Confirms Emergency Update For Windows Users&lt;/a&gt; by Forbes&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20250523-00/?p=111216"&gt;How can I detect if one of my helper processes is launching child processes?&lt;/a&gt; by The Old New Thing&lt;/p&gt;
&lt;!-- ## Security
 --&gt;
&lt;h2 id="ai"&gt;AI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.psychologytoday.com/us/blog/the-algorithmic-mind/202505/ai-weakens-critical-thinking-and-how-to-rebuild-it"&gt;AI Weakens Critical Thinking. This Is How to Rebuild It | Psychology Today&lt;/a&gt; by Psychology Today&lt;/p&gt;
&lt;p&gt;&lt;a href="https://theconversation.com/evidence-shows-ai-systems-are-already-too-much-like-humans-will-that-be-a-problem-256980"&gt;Evidence shows AI systems are already too much like humans. Will that be a problem?&lt;/a&gt; by The Conversation&lt;/p&gt;
&lt;p&gt;&lt;a href="https://futurism.com/the-byte/klarna-ceo-bragged-replacing-workers-ai-losses"&gt;CEO Who Bragged About Replacing Human Workers With AI Realizes He Made a Terrible Mistake&lt;/a&gt; by Futurism&lt;/p&gt;
&lt;p&gt;&lt;a href="https://thenewstack.io/ai-driven-software-why-a-strong-ci-cd-foundation-is-essential/"&gt;AI-Driven Software: Why a Strong CI/CD Foundation Is Essential&lt;/a&gt; by The New Stack&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.linkedin.com/pulse/mcp-windows-new-com-andrew-clinick-fcwxc/"&gt;MCP on Windows: The New COM?&lt;/a&gt; by Andrew Clinick&lt;/p&gt;
&lt;h2 id="social-media"&gt;Social Media&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://techcrunch.com/2025/05/22/bluesky-will-begin-verifying-notable-users/"&gt;Bluesky will begin verifying 'notable' users&lt;/a&gt; by TechCrunch&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - May 18</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-may-18</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-may-18</guid>
			<pubDate>Mon, 19 May 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;!-- ## Open-source --&gt;
&lt;h2 id="architecture"&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.milanjovanovic.tech/blog/cqrs-pattern-the-way-it-should-have-been-from-the-start"&gt;CQRS Pattern the Way It Should've Been From the Start&lt;/a&gt; by Milan Jovanović&lt;/p&gt;
&lt;!-- ## Presenting
 --&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://blog.duendesoftware.com/posts/20250513-duende-identityserver-and-otel-metrics-traces-and-logs-in-the-net-aspire-dashboard/"&gt;Duende IdentityServer and OTel Metrics, Traces, and Logs in the .NET Aspire Dashboard&lt;/a&gt; by Khalid Abuhakmeh&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;davidfowl/taming-manifest-sprawl-with-aspire-1ad938379433"&gt;Taming Manifest Sprawl with Aspire | by David Fowler | May, 2025 | Medium&lt;/a&gt; by David Fowl&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2025/05/15/wolverine-4-is-bringing-multi-tenancy-to-ef-core/"&gt;Wolverine 4 is Bringing Multi-Tenancy to EF Core&lt;/a&gt; by Jeremy Miller&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ardalis.com/ardalis-specification-v9-release/"&gt;Ardalis Specification v9 Released&lt;/a&gt; by Steve Smith&lt;/p&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/using-the-new-ai-template-to-create-a-chatbot-about-a-website/"&gt;Using the new AI template to create a chatbot about a website&lt;/a&gt; by Andrew Lock&lt;/p&gt;
&lt;!-- ## Domain Driven Design
 --&gt;
&lt;!-- ## DevOps
 ## Design

## Mobile--&gt;
&lt;h2 id="agilework-life"&gt;Agile/Work Life&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://queen-of-questions.kit.com/posts/my-team-member-is-suffering-how-can-i-help"&gt;My team member is suffering. How can I help??&lt;/a&gt; by Clare Sudbery&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apievangelist.com/2025/05/12/embracing-rather-than-overcoming-team-boundaries/"&gt;Embracing Rather Than Overcoming Team Boundaries&lt;/a&gt; by Kin Lane&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.cnbc.com/2025/05/13/microsoft-is-cutting-3percent-of-workers-across-the-software-company.html"&gt;Microsoft laying off about 6,000 people, or 3% of its workforce&lt;/a&gt; by CNBC&lt;/p&gt;
&lt;!-- ## REST/APIs
 --&gt;
&lt;h2 id="azure"&gt;Azure&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/cosmosdb/build-2025-preview-transform-your-ai-apps-and-agents-with-azure-cosmos-db/"&gt;Build 2025 Preview: Transform Your AI Apps and Agents with Azure Cosmos DB&lt;/a&gt; by Azure Cosmos DB Blog&lt;/p&gt;
&lt;h2 id="software-development"&gt;Software Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://deviq.com/practices/code-readability"&gt;Code Readability&lt;/a&gt; by DevIQ&lt;/p&gt;
&lt;p&gt;&lt;a href="https://woodruff.dev/iterators-and-functional-combinators/"&gt;Rust Iterators and Functional Combinators&lt;/a&gt; by Chris Woody Woodruff&lt;/p&gt;
&lt;h2 id="windows"&gt;Windows&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20250514-00/?p=111178"&gt;If I mark my thread pool callback as long-running, does it still count toward the thread pool thread limit?&lt;/a&gt; by Raymond Chen&lt;/p&gt;
&lt;!-- ## Security
 --&gt;
&lt;h2 id="ai"&gt;AI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://martinfowler.com/articles/exploring-gen-ai/software-supply-chain-attack-surface.html"&gt;Coding Assistants Threaten the Software Supply Chain&lt;/a&gt; by Jim Gumbley, Lilly Ryan&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - May 11</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-may-11</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-may-11</guid>
			<pubDate>Sun, 11 May 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;!-- ## Open-source --&gt;
&lt;h2 id="architecture"&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.milanjovanovic.tech/blog/from-anemic-models-to-behavior-driven-models-a-practical-ddd-refactor-in-csharp"&gt;From Anemic Models to Behavior-Driven Models: A Practical DDD Refactor in C#&lt;/a&gt; by Milan Jovanović&lt;/p&gt;
&lt;!-- ## Presenting
 --&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/exploring-the-new-ai-chat-template/"&gt;Exploring the new AI chat template&lt;/a&gt; by Andrew Lock&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;davidfowl/intent-vs-mechanics-the-power-of-abstraction-in-aspire-d14a33aab6bb"&gt;Intent vs. Mechanics: The Power of Abstraction in Aspire&lt;/a&gt; by David Fowler&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2025/05/11/managing-auto-creation-of-database-or-message-broker-resources-in-the-critter-stack-vnext/"&gt;Managing Auto Creation of Database or Message Broker Resources in the Critter Stack vNext&lt;/a&gt; by Jeremy Miller&lt;/p&gt;
&lt;h2 id="domain-driven-design"&gt;Domain Driven Design&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=rPNdlLwBnW4"&gt;What we learned about event sourcing and DDD while building a bank&lt;/a&gt; by Thomas Bøgh Fangel&lt;/p&gt;
&lt;!-- ## DevOps --&gt;
&lt;!-- ## Design

## Mobile

## Agile/Work Life --&gt;
&lt;h2 id="restapis"&gt;REST/APIs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://leanpub.com/api-extension-patterns"&gt;Handy API Extension Patterns [Leanpub PDF/iPad/Kindle]&lt;/a&gt; by Mike Amundsen&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tyk.io/blog/how-do-you-futureproof-an-enterprise-api-landscape/"&gt;How do you futureproof an enterprise API landscape?&lt;/a&gt; by Tyk API Gateway&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apievangelist.com/2025/05/09/governaing-api-authentication/"&gt;Governing API Authentication&lt;/a&gt; by Kin Lane&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apisyouwonthate.com/blog/use-openapi-overlays-today/"&gt;Use OpenAPI Overlays Today&lt;/a&gt; by Phil Sturgeon&lt;/p&gt;
&lt;h2 id="azure"&gt;Azure&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/azure-sdk/azure-developer-cli-azd-may-2025/"&gt;Azure Developer CLI (azd) - May 2025&lt;/a&gt; by Azure SDK Blog&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/cosmosdb/fabric-mirroring-for-azure-cosmos-db-public-preview-refresh-now-live-with-new-features/"&gt;Fabric Mirroring for Azure Cosmos DB: Public Preview Refresh Now Live with New Features&lt;/a&gt; by Azure Cosmos DB Blog&lt;/p&gt;
&lt;h2 id="software-development"&gt;Software Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://blog.nimblepros.com/blogs/pull-request-etiquette/"&gt;Pull Request Etiquette&lt;/a&gt; by Scott DePouw&lt;/p&gt;
&lt;p&gt;&lt;a href="https://woodruff.dev/traits-in-rust-interfaces-that-do-more/"&gt;Traits in Rust: Interfaces That Do More&lt;/a&gt; by Chris Woody Woodruff&lt;/p&gt;
&lt;h2 id="windows"&gt;Windows&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20250508-00/?p=111162"&gt;Why doesn't Clipboard History capture rapid changes to clipboard contents?&lt;/a&gt; by The Old New Thing&lt;/p&gt;
&lt;h2 id="security"&gt;Security&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.troyhunt.com/passkeys-for-normal-people/"&gt;Passkeys for Normal People&lt;/a&gt; by Troy Hunt&lt;/p&gt;
&lt;h2 id="ai"&gt;AI&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://ashley.dev/posts/what-even-is-vibe-coding/"&gt;What Even Is Vibe Coding?&lt;/a&gt; by ashley.dev&lt;/p&gt;
&lt;p&gt;&lt;a href="https://agilepainrelief.com/blog/is-ai-making-your-organization-fragile-or-more-resilient/"&gt;Is AI Making Your Organization Fragile or More Resilient&lt;/a&gt; by Mark Levison&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - May 4</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-may-4</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-may-4</guid>
			<pubDate>Sun, 04 May 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;!-- ## Open-source --&gt;
&lt;h2 id="architecture"&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://medium.com/javarevisited/unleashing-the-power-of-event-storming-e475be7826cc"&gt;Unleashing the Power of Event Storming&lt;/a&gt; by Noah Hsu&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mamund.substack.com/p/stateless-parts-stateful-wholes"&gt;Stateless Parts, Stateful Wholes&lt;/a&gt; by Mike Amundsen&lt;/p&gt;
&lt;p&gt;&lt;a href="https://kalele.io/vaughn-vernon-on-why-the-outbox-pattern-falls-short-and-the-smarter-alternative-for-event-driven-systems/"&gt;Vaughn Vernon on Why the Outbox Pattern Falls Short – And the Smarter Alternative for Event-Driven Systems&lt;/a&gt; by Nicole Andrade&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.milanjovanovic.tech/blog/event-driven-architecture-in-dotnet-with-rabbitmq"&gt;Event-Driven Architecture in .NET with RabbitMQ&lt;/a&gt; by Milan Jovanović&lt;/p&gt;
&lt;h2 id="presenting"&gt;Presenting&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://gamma.app/"&gt;Gamma is your AI design partner for effortless presentations, websites, social media posts, and more—so you can focus on what you do best.&lt;/a&gt; by Gamma&lt;/p&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2025/04/21/c-13-advanced-features"&gt;Some more C# 13&lt;/a&gt; by Tom Deseyn&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2EGzAPhz2nE"&gt;Turbocharged: Writing High-Performance C# and .NET Code - Steve Gordon - NDC Porto 2024&lt;/a&gt; by Steve Gordon&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dotnet.github.io/dotNext/"&gt;.NEXT 5.x&lt;/a&gt; by .NEXT&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.ploeh.dk/2025/05/05/song-recommendations-as-a-c-impureim-sandwich/"&gt;Song recommendations as a C# Impureim Sandwich&lt;/a&gt; by Mark Seemann&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.duendesoftware.com/posts/20250430-managing-openapi-specifications-with-backend-for-frontend-and-swagger-ui"&gt;Managing OpenAPI Specifications with Backend For Frontend and Swagger UI&lt;/a&gt; by Khalid Abuhakmeh and Erwin van der Valk&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jeremydmiller.com/2025/04/30/huge-wolverine-3-13-release/"&gt;Huge Wolverine 3.13 Release&lt;/a&gt; by Jeremy Miller&lt;/p&gt;
&lt;h2 id="domain-driven-design"&gt;Domain Driven Design&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=4UHhaOCjMgY&amp;amp;list=WL&amp;amp;index=16"&gt;How to understand almost anything - Markus Völter - DDD Europe&lt;/a&gt; by Markus Völter&lt;/p&gt;
&lt;p&gt;&lt;a href="https://vladikk.com/2025/04/05/f1-ddd/"&gt;F1 + DDD: All Models are Wrong, Some are Dangerous&lt;/a&gt; by Vlad Khononov&lt;/p&gt;
&lt;h2 id="devops"&gt;DevOps&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/devops/introducing-azure-devops-id-token-refresh-and-terraform-task-version-5/"&gt;Introducing Azure DevOps ID Token Refresh and Terraform Task Version 5&lt;/a&gt; by Jared Holgate and Eric van Wijk&lt;/p&gt;
&lt;!-- ## Design

## Mobile

## Agile/Work Life --&gt;
&lt;h2 id="restapis"&gt;REST/APIs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://apievangelist.com/2025/05/02/api-governance-rules-from-the-netherlands/"&gt;API Governance Rules from the Netherlands&lt;/a&gt; by API Evangelist&lt;/p&gt;
&lt;!-- ## Azure --&gt;
&lt;h2 id="software-development"&gt;Software Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://woodruff.dev/panic-vs-exceptions-stop-the-world-or-handle-it/"&gt;Panic! vs Exceptions: Stop the World or Handle It?&lt;/a&gt; by Chris Woody Woodruff&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.prairiedevcon.com/"&gt;Prairie Dev Con Winnipeg&lt;/a&gt; by Prairie Dev Con&lt;/p&gt;
&lt;p&gt;&lt;a href="https://sadukie.com/2025/05/04/stir-trek-2025-recap.html"&gt;Stir Trek 2025 recap&lt;/a&gt; by Sarah &amp;quot;Sadukie&amp;quot; Dutkiewicz&lt;/p&gt;
&lt;h2 id="windows"&gt;Windows&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/oldnewthing/20250505-00/?p=111143"&gt;What were the intended uses of those icons in moricons.dll?&lt;/a&gt; by Raymond Chen&lt;/p&gt;
&lt;!-- ## Security --&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - April 29</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-april-29</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-april-29</guid>
			<pubDate>Tue, 29 Apr 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;!-- ## Open-source

## Architecture --&gt;
&lt;h2 id="presenting"&gt;Presenting&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://sadukie.com/2025/04/23/why-i-do-both-written-content-and-videos.html"&gt;Why I Do Both Written Content and Videos&lt;/a&gt; by Sarah &amp;quot;Sadukie&amp;quot; Dutkiewicz&lt;/p&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://newsletter.techworld-with-milan.com/p/why-csharp"&gt;Why C#?&lt;/a&gt; by Dr Milan Milanović&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=6KUheTnNY3M"&gt;How Does a Domain Model Serialize Itself? IT DOES NOT!&lt;/a&gt; by Zoran on C#&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Hxfu_KEa4uA"&gt;Why is .NET so Insanely Fast? with Stephen Toub&lt;/a&gt; by Keep Coding Podcast&lt;/p&gt;
&lt;p&gt;&lt;a href="https://khalidabuhakmeh.com/server-sent-events-in-aspnet-core-and-dotnet-10"&gt;Server-Sent Events in ASP.NET Core and .NET 10&lt;/a&gt; by Khalid Abuhakmeh&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;davidfowl/model-run-ship-the-new-way-to-build-distributed-apps-48d67286a665"&gt;Model. Run. Ship. The New Way to Build Distributed Apps&lt;/a&gt; by David Fowler&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.duendesoftware.com/posts/20250422-authorization-policy-tag-helper-aspnetcore-razor-view/"&gt;Authorization Policy TagHelpers for ASP.NET Core Razor Views&lt;/a&gt; by Duende Software&lt;/p&gt;
&lt;p&gt;&lt;a href="https://andrewlock.net/going-beyond-singleton-scoped-and-transient-lifetimes/"&gt;Going beyond singleton, scoped, and transient lifetimes—tenant, pooled, and drifter&lt;/a&gt; by Andrew Lock | .NET Escapades&lt;/p&gt;
&lt;h2 id="domain-driven-design"&gt;Domain Driven Design&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.milanjovanovic.tech/blog/refactoring-overgrown-bounded-contexts-in-modular-monoliths"&gt;Refactoring Overgrown Bounded Contexts in Modular Monoliths&lt;/a&gt; by Milan Jovanović&lt;/p&gt;
&lt;!--## DevOps

## Design

## Mobile
--&gt;
&lt;h2 id="agilework-life"&gt;Agile/Work Life&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://reflection.ed.ac.uk/reflectors-toolkit/reflecting-on-experience/four-f"&gt;The four F's of active reviewing&lt;/a&gt; by The University of Edinburgh&lt;/p&gt;
&lt;h2 id="restapis"&gt;REST/APIs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://mamund.substack.com/p/the-growing-medium-for-api-ecosystems"&gt;The Growing Medium for API Ecosystems - Why shared state matters more than ever&lt;/a&gt; by Mike Amundsen&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apievangelist.com/2025/04/28/no-auth-on-initial-mcp-was-not-a-bug-it-was-a-feature/"&gt;No Auth on Initial MCP Was Not A Bug, It Was A Feature&lt;/a&gt; by API Evangelist (Kin Lane)&lt;/p&gt;
&lt;h2 id="software-development"&gt;Software Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://woodruff.dev/rust-structs-vs-c-classes-less-is-more/"&gt;Rust Structs vs C# Classes: Less is More&lt;/a&gt; by Chris Woody Woodruff&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.neowin.net/news/jetbrains-sunsets-another-product-citing-lower-than-expected-adoption-rates/"&gt;JetBrains sunsets another product citing lower than expected adoption rates&lt;/a&gt; by Neowin&lt;/p&gt;
&lt;!-- ## Windows --&gt;
&lt;h2 id="security"&gt;Security&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.howtogeek.com/how-i-lie-to-secure-my-online-accounts/"&gt;How I Secure My Online Accounts By Telling Lies&lt;/a&gt; by How-To Geek&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.theregister.com/2025/04/22/ssl_com_validation_flaw/"&gt;Bug hunter tricked SSL.com into issuing cert for Alibaba Cloud domain in 5 steps&lt;/a&gt; by The Register&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - April 22</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-april-22</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-april-22</guid>
			<pubDate>Tue, 22 Apr 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;!-- ## Open-source
 --&gt;
&lt;h2 id="architecture"&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://blog.wildermuth.com/2025/03/17/build-or-adopt--stop-building-your-own-plumbing/"&gt;Build or Adopt: Stop Building Your Own Plumbing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.blog/ai-and-ml/llms/what-the-heck-is-mcp-and-why-is-everyone-talking-about-it/"&gt;What the heck is MCP and why is everyone talking about it?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="devops"&gt;DevOps&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://nuke.build/"&gt;Smart automation for DevOps teams and CI/CD pipelines&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/shouldly/shouldly"&gt;Shouldy - The way assertions should be.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/module-initializers"&gt;Module Initializers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=xcpgTVueu-A"&gt;The End of .NET Free Open-Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=s7vSG5IFn74"&gt;Test out .NET 10 Previews in Dev Containers &amp;amp; Codespaces in Minutes!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/dotnet-10-preview-3/"&gt;.NET 10 Preview 3 is now available!&lt;/a&gt;&lt;/p&gt;
&lt;!-- ## Design

## Mobile
 --&gt;
&lt;h2 id="agilework-life"&gt;Agile/Work Life&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://ronjeffries.com/articles/019-01ff/story-points/Index.html#"&gt;Story Points Revisited&lt;/a&gt;&lt;/p&gt;
&lt;!-- ## Windows

## Security
 --&gt;
&lt;h2 id="software-development"&gt;Software Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://woodruff.dev/ownership-in-rust-the-most-c-ish-thing-ive-loved-and-i-mean-that-in-a-good-way/"&gt;Ownership in Rust: The Most C++-ish Thing I’ve Loved (and I Mean That in a Good Way)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commits&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://philiplaine.com/posts/getting-forked-by-microsoft/"&gt;Getting Forked by Microsoft&lt;/a&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Things That Caught My Attention Last Week - April 14</title>
			<link>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-april-14</link>
			<description>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/things-that-caught-my-attention-last-week-april-14</guid>
			<pubDate>Mon, 14 Apr 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/caught-i.png" class="img-fluid" alt="caught-my-i" /&gt;&lt;/p&gt;
&lt;h2 id="open-source"&gt;Open-source&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/NihalJain/opensource-contributions-tracker/?tab=readme-ov-file"&gt;OpenSource Contributions Tracker&lt;/a&gt; by Nihal Jain&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.blog/open-source/maintainers/5-github-actions-every-maintainer-needs-to-know/"&gt;5 GitHub Actions every maintainer needs to know&lt;/a&gt; by Klint Finley &amp;amp; Gwen Davis&lt;/p&gt;
&lt;h2 id="architecture"&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://theburningmonk.com/2025/04/event-versioning-strategies-for-event-driven-architectures/"&gt;Event versioning strategies for event-driven architectures&lt;/a&gt; by Yan Cui&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.ploeh.dk/2025/04/01/ports-and-fat-adapters/"&gt;Ports and fat adapters&lt;/a&gt; by Mark Seemann&lt;/p&gt;
&lt;p&gt;&lt;a href="https://apievangelist.com/2025/04/09/adopting-mcp-is-a-bad-idea/"&gt;Adopting MCP is a Bad Idea&lt;/a&gt; by Kin Lane&lt;/p&gt;
&lt;h2 id="net"&gt;.NET&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://blog.duendesoftware.com/posts/20250325-understanding-antiforgery-in-aspnetcore/"&gt;Understanding Anti-Forgery in ASP.NET Core&lt;/a&gt; by Maarten Balliauw&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/core/blob/main/release-notes%2F10.0%2Fpreview%2Fpreview3%2Fcsharp.md"&gt;C# 14 updates in .NET 10 Preview 3 - Release Notes&lt;/a&gt; by various&lt;/p&gt;
&lt;p&gt;&lt;a href="https://woodruff.dev/dotnet-new-meet-cargo-new-a-tale-of-two-clis/"&gt;dotnet new, Meet cargo new: A Tale of Two CLIs&lt;/a&gt; by Chris Woody Woodruff&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtube.com/watch?v=ta08IEQcyxU"&gt;Back to Basics: Debugging in Visual Studio | Coding Shorts 117&lt;/a&gt; by Shawn Wildermuth&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/&amp;#64;davidfowl/modeling-your-environment-with-aspire-24e986752485"&gt;Modeling Your Environment with Aspire&lt;/a&gt; by David Fowler&lt;/p&gt;
&lt;!--## Design

## Mobile
--&gt;
&lt;h2 id="agilework-life"&gt;Agile/Work Life&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://samestuffdifferentday.net/2025/03/24/standup-revisited/"&gt;My New Favorite Question for the Daily Standup&lt;/a&gt; by Mike Eaton&lt;/p&gt;
&lt;h2 id="windows"&gt;Windows&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.josephguadagno.net/2025/03/27/working-with-dotnet-10-without-mucking-up-your-machine"&gt;Working with dotnet 10 Without Mucking Up Your Machine&lt;/a&gt; by Joe Guadagno&lt;/p&gt;
&lt;h2 id="security"&gt;Security&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.quad9.net/"&gt;Quad9 - A public and free DNS service for a better security and privacy&lt;/a&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Announcing CommandLineExtensions, a .NET DI Compatible System.CommandLine Facade</title>
			<link>http://blog.peterritchie.com/posts/announcing-commandlineextensions</link>
			<description>&lt;p&gt;&lt;img src="../assets/CommandLineExtensions-example.png" class="img-fluid" alt="CommandLineExtensions"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/announcing-commandlineextensions</guid>
			<pubDate>Mon, 07 Apr 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/CommandLineExtensions-example.png" class="img-fluid" alt="CommandLineExtensions" /&gt;&lt;/p&gt;
&lt;h2 id="mission-inspiration"&gt;Mission, Inspiration&lt;/h2&gt;
&lt;p&gt;The mission of CommandLineExtensions is to help make command-line argument parsing simpler while leveraging Microsoft-supported &lt;code&gt;System.CommandLine&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The inspiration for CommandLineExtensions spawns from ConsoleApplicationBuilder, which makes it easier to create console applications that utilize modern .NET patterns and practices like Dependency Injection, Configuration, etc. Console applications revolve around command-line options and arguments, and more easily integrating them with modern .NET patterns and practices is essential.&lt;/p&gt;
&lt;p&gt;ConsoleApplicationBuilder is a .NET Dependency Injection (&lt;code&gt;IServiceCollection&lt;/code&gt;) extension with a fluent interface to give console application startup a similar fluent experience as other .NET frameworks. CommandLineExtensions continues that goal by providing fluent .NET Dependency Injection interface extensions to define options and arguments for console applications.&lt;/p&gt;
&lt;h2 id="why-use-commandlineextensions"&gt;Why Use CommandLineExtensions&lt;/h2&gt;
&lt;p&gt;If what ConsoleApplicationBuilder does doesn't interest you, neither will CommandLineExtensions. Without ConsoleApplicationBuilder CommandLineExtensions is just a builder pattern facade over System.CommandLine that requires a &lt;code&gt;IServiceCollection&lt;/code&gt; implementation. System.CommandLine is an established library and provides a ton of value to .NET console application developers. A builder facade that enables support for DI might only be a subtle improvement for many. I get that; I started this because it interested me.&lt;/p&gt;
&lt;p&gt;If integrating with modern .NET practices like DI, configuration, and application settings is important to you, here are some benefits of using CommandLineExtensions to define command-line options and arguments (or &amp;quot;parameters&amp;quot;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simplified configuration into &amp;quot;parts&amp;quot; or &amp;quot;phases&amp;quot; as contextual guardrails to enforce constraints like type safety&lt;/li&gt;
&lt;li&gt;integration with established .NET patterns and practices&lt;/li&gt;
&lt;li&gt;multi-step, piecemeal definition of command-line parameters improving readability.&lt;/li&gt;
&lt;li&gt;Semantically independent of System.CommandLine API, allowing you to focus on the configurability important to your app&lt;/li&gt;
&lt;li&gt;fluency of the interface frees you from instantiating multiple framework objects unrelated to your app&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="simple-multi-step-piecemeal-definition-of-parameters"&gt;Simple Multi-step, Piecemeal Definition of Parameters&lt;/h3&gt;
&lt;p&gt;CommandLineExtensions provides fluent interface to configure command-line parameters in a sequence of phases or steps. A simple example of configuring the root command to take a file option and configure a handler delegate. The &lt;code&gt;WithOption&lt;/code&gt; call begins a context (phase) that configures the current strongly-typed option. Within this context, the call to &lt;code&gt;WithHandler&lt;/code&gt; is strongly-typed to the single option type of &lt;code&gt;FileInfo?&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;builder.Services.AddCommand()
    .WithDescription(&amp;quot;Sample app for System.CommandLine&amp;quot;)
    .WithOption&amp;lt;FileInfo?&amp;gt;(&amp;quot;--file&amp;quot;, &amp;quot;The file to read and display on the console.&amp;quot;)
    .WithHandler(file =&amp;gt; 
    {
        ReadFile(file!);
    });
return builder.Build&amp;lt;RootCommand&amp;gt;.Invoke(args);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To do same thing with only System.CommandLine is possible with an explicitly instantiated &lt;code&gt;Option&amp;lt;FileInfo?&amp;gt;&lt;/code&gt; re-used in the call to &lt;code&gt;SetHandler&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var fileOption = new Option&amp;lt;FileInfo?&amp;gt;(
    name: &amp;quot;--file&amp;quot;,
    description: &amp;quot;The file to read and display on the console.&amp;quot;);

var rootCommand = new RootCommand(&amp;quot;Sample app for System.CommandLine&amp;quot;);
rootCommand.AddOption(fileOption);

rootCommand.SetHandler((file) =&amp;gt; 
    { 
        ReadFile(file!); 
    },
    fileOption);

return await rootCommand.InvokeAsync(args);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The phased or stepwise approach might be more apparent when dealing with multiple commands or subcommands:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = ConsoleApplication.CreateBuilder(args);
builder.Services.AddCommand() // 👈 Start root command context
	.WithSubcommand&amp;lt;ReadCommand&amp;gt;()  // 👈 start read subcommand context
		.WithArgument&amp;lt;FileInfo&amp;gt;(&amp;quot;file&amp;quot;, &amp;quot;file path to process&amp;quot;)
		.WithSubcommandHandler(file =&amp;gt; Console.WriteLine($&amp;quot;read &amp;lt;file&amp;gt; argument = {file.Name}&amp;quot;))
	.WithSubcommand&amp;lt;WriteCommand&amp;gt;()  // 👈 start write subcommand context
		.WithArgument&amp;lt;FileInfo&amp;gt;(&amp;quot;file&amp;quot;, &amp;quot;file path to process.&amp;quot;)
		.WithArgument&amp;lt;string&amp;gt;(&amp;quot;text&amp;quot;, &amp;quot;text to write to file, quoted.&amp;quot;)
		.WithSubcommandHandler((file, text) =&amp;gt; Console.WriteLine($&amp;quot;write &amp;lt;file&amp;gt; argument = {file.Name} with text '{text}'.&amp;quot;))
	.WithHandler(() =&amp;gt; Console.WriteLine(&amp;quot;Please choose read or write subcommand.&amp;quot;));

return builder.Build&amp;lt;RootCommand&amp;gt;().Invoke(args);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first call to &lt;code&gt;WithSubcommandHandler&lt;/code&gt; has the context of a single parameter of type &lt;code&gt;FileInfo&lt;/code&gt; and expects a delegate that takes a single argument of type &lt;code&gt;FileInfo&lt;/code&gt;. The only thing that will compile here is a delegate with a single parameter. The second independent call to &lt;code&gt;WithSubcommandHandler&lt;/code&gt; has a different context, one with two parameters: one of type &lt;code&gt;FileInfo&lt;/code&gt; and one of type &lt;code&gt;string&lt;/code&gt;. There is no way to mix up assigning a delegate to the wrong subcommand.&lt;/p&gt;
&lt;h3 id="example-dependency-injection"&gt;Example: Dependency Injection&lt;/h3&gt;
&lt;p&gt;CommandLineExtensions can do what it does through dependency injection--building up a configuration context to the point where a command is built and the required dependencies are resolved and instantiated. Put another way: all the types you use with CommandLineExtensions are resolved via the dependency injection container. If you want to use &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; in a command handler, simply include it as a constructor parameter, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class LoggingCommandHandler(ILogger&amp;lt;LoggingCommandHandler&amp;gt; logger) : ICommandHandler&amp;lt;FileInfo&amp;gt;
{
    public int Execute(FileInfo fileInfo)
    {
        Console.WriteLine(
            $&amp;quot;File {fileInfo.Name} is {fileInfo.Length} bytes in size and was created on {fileInfo.CreationTime}.&amp;quot;));
        return 0;
    }
}
//...
public class Program
{
    public int Main(string[] args)
    {
        var builder = ConsoleApplication.CreateBuilder(args);
        builder.Services.AddCommand()
            .WithDescription(&amp;quot;Dependency Injection sample&amp;quot;)
            .WithOption&amp;lt;FileInfo&amp;gt;(&amp;quot;--file&amp;quot;, &amp;quot;An option whose argument is parsed as a FileInfo&amp;quot;)
            .WithHandler&amp;lt;LoggingCommandHandler&amp;gt;();
        return builder.Build&amp;lt;RootCommand&amp;gt;().Invoke(args);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A similar&lt;super&gt;*&lt;/super&gt; thing in System.CommandLine would require code like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Program
{
    public int Main(string[] args)
    {
        var fileOption = new Option&amp;lt;FileInfo?&amp;gt;(
            name: &amp;quot;--file&amp;quot;,
            description: &amp;quot;An option whose argument is parsed as a FileInfo&amp;quot;);

        var rootCommand = new RootCommand(&amp;quot;Dependency Injection sample&amp;quot;);
        rootCommand.Add(fileOption);

        rootCommand.SetHandler((fileOptionValue, logger) =&amp;gt;
            {
                DoRootCommand(fileOptionValue!, logger);
            },
            fileOption, new MyCustomBinder());

        rootCommand.Invoke(args);

        return 0;
    }
    static void DoRootCommand(FileInfo aFile, ILogger logger)
    {
        Console.WriteLine($&amp;quot;File = {aFile?.FullName}&amp;quot;);
        logger.LogCritical(&amp;quot;Test message&amp;quot;);
    }
}

public class MyCustomBinder : BinderBase&amp;lt;ILogger&amp;gt;
{
    protected override ILogger GetBoundValue(
        BindingContext bindingContext) =&amp;gt; GetLogger(bindingContext);

    ILogger GetLogger(BindingContext bindingContext)
    {
        using ILoggerFactory loggerFactory = LoggerFactory.Create(
            builder =&amp;gt; builder.AddConsole());
        ILogger logger = loggerFactory.CreateLogger(&amp;quot;LoggerCategory&amp;quot;);
        return logger;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;*: &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; injection is accomplished, but without using Microsoft.Extensions.DependencyInjection.&lt;/p&gt;
&lt;h2 id="caveats"&gt;Caveats&lt;/h2&gt;
&lt;p&gt;This is an MVP to gauge interest and to get feedback. It's functional, but minimal in a few ways.&lt;/p&gt;
&lt;h3 id="limited-optionsarguments"&gt;Limited Options/Arguments&lt;/h3&gt;
&lt;p&gt;Parameters are limited to two per command. Two is much lower than the System.CommandLine's limit of eight. Support for more than two will be added in the near future.&lt;/p&gt;
&lt;h3 id="default-value-factories"&gt;Default Value Factories&lt;/h3&gt;
&lt;p&gt;Default value factories are not supported. System.CommandLine supports default values for options via a factory method, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var fileOption = new Option&amp;lt;FileInfo?&amp;gt;(
    name: &amp;quot;--file&amp;quot;,
    description: &amp;quot;An option whose argument is parsed as a FileInfo&amp;quot;);
fileOption.SetDefaultValueFactory(() =&amp;gt; $&amp;quot;{DateTime.Now:MMMM}&amp;quot;); // 👈 delegate to create a new value
var rootCommand = new RootCommand(&amp;quot;Do something with a file.&amp;quot;);
rootCommand.Add(fileOption);

rootCommand.SetHandler(fileOptionValue =&amp;gt;
    {
        Console.WriteLine($&amp;quot;Received {fileOptionValue} for file name.&amp;quot;);
    },
    fileOption);

return rootCommand.Invoke(args);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Default values for options &lt;em&gt;are&lt;/em&gt; supported.  For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = ConsoleApplication.CreateBuilder(args);
builder.Services.AddCommand()
    .WithOption&amp;lt;FileInfo?&amp;gt;(&amp;quot;--file&amp;quot;, &amp;quot;An option whose argument is parsed as a FileInfo&amp;quot;)
    .WithDefault($&amp;quot;{DateTime.Now:MMMM}&amp;quot;) // 👈 create default value here
    .WithHandler(fileOptionValue =&amp;gt;
        {
            Console.WriteLine($&amp;quot;Received {fileOptionValue} for file name.&amp;quot;);
        });
return builder.Build&amp;lt;RootCommand&amp;gt;.Invoke(args);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The vision is that CommandLineExtensions be very loosely coupled to System.CommandLine--in most cases, it is coupled only to &lt;em&gt;concepts&lt;/em&gt; (like &lt;em&gt;by name&lt;/em&gt;--sometimes referred to as Connascence of Name). Toward that vision, the CommandLineExtensions fluent interface doesn't use System.CommandLine types directly, so there is no way to use pre-defined types like closed-generic types implementing &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;. I've considered that, and if you feel that's important, please thumb up this issue: &lt;a href="https://github.com/peteraritchie/ConsoleApplicationBuilder/issues/13"&gt;&lt;code&gt;Consider supporting Option&amp;lt;T&amp;gt;-derived types.&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="getting-started"&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Getting started with CommandLineExtensions is very easy. It begins with either creating a console application with ConsoleApplicationBuilder dotnet new template or adding the ConsoleApplicationBuilder NuGet package to an existing console application. (For more information, please see &lt;a href="https://blog.peterritchie.com/posts/announcing-consoleapplicationbuilder"&gt;Announcing ConsoleApplicationBuilder, DI in console applications, simply&lt;/a&gt;.) Then add the &lt;a href="https://www.nuget.org/packages/PRI.CommandLineExtensions"&gt;PRI.CommandLineExtensions&lt;/a&gt; NuGet package.&lt;/p&gt;
&lt;p&gt;Configuring command-line parameters starts by adding a command; if you don't have a &amp;quot;command,&amp;quot; the implied command is a &lt;em&gt;root command&lt;/em&gt; added with the bare &lt;code&gt;AddCommand()&lt;/code&gt; extension method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = ConsoleApplication.CreateBuilder(args);
builder.Services.AddCommand() // 👈 step 1, configure a command
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you can start adding options (named parameters) or arguments (unnamed parameters). For example, if you want to accept a required file name on the command-line with a command-line option of &lt;code&gt;--file&lt;/code&gt;, you could do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = ConsoleApplication.CreateBuilder(args);
builder.Services.AddCommand()
    .WithRequiredOption&amp;lt;FileInfo&amp;gt;(&amp;quot;--file&amp;quot;, &amp;quot;file path to process&amp;quot;) // 👈 step 2, add an option
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, you need to configure what you want to process the parameter value with--a command handler:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = ConsoleApplication.CreateBuilder(args);
builder.Services.AddCommand()
    .WithRequiredOption&amp;lt;FileInfo&amp;gt;(&amp;quot;--file&amp;quot;, &amp;quot;file path to process&amp;quot;)
    .WithHandler(fileInfo =&amp;gt; // 👈 step 3, configure the handler, accepting the parameter value
        Console.WriteLine(
            $&amp;quot;File {fileInfo.Name} is {fileInfo.Length} bytes in size and was created on {fileInfo.CreationTime}.&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configuring a handler completes the configuration of that command.&lt;/p&gt;
&lt;p&gt;And finally, you build or resolve the command and execute it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var builder = ConsoleApplication.CreateBuilder(args);
builder.Services.AddCommand()
    .WithRequiredOption&amp;lt;FileInfo&amp;gt;(&amp;quot;--file&amp;quot;, &amp;quot;file path to process&amp;quot;)
    .WithHandler(fileInfo =&amp;gt;
        Console.WriteLine(
            $&amp;quot;File {fileInfo.Name} is {fileInfo.Length} bytes in size and was created on {fileInfo.CreationTime}.&amp;quot;));
return builder.Build&amp;lt;RootCommand&amp;gt;().Invoke(args); // 👈 step 4, invoke the handler with the command-line arguments
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;CommandLineExtensions creates a fluent interface for System.CommandLine, offering a simpler way to define and support command-line options and arguments. CommandLineExtensions doesn't support all the features of System.CommandLine but provides support for defining command-line options and arguments for all but very complex scenarios.&lt;/p&gt;
&lt;p&gt;For more information and examples, please see &lt;a href="https://github.com/peteraritchie/ConsoleApplicationBuilder/blob/main/src/CommandLineExtensions/README.md"&gt;CommandLineExtensions README.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For support, please see &lt;a href="https://github.com/peteraritchie/ConsoleApplicationBuilder/issues"&gt;ConsoleApplicationBuilder GitHub issues&lt;/a&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Announcing ConsoleApplicationBuilder, DI in console applications, simply</title>
			<link>http://blog.peterritchie.com/posts/announcing-consoleapplicationbuilder</link>
			<description>&lt;p&gt;&lt;img src="../assets/announcing-ConsoleApplicationBuilder.png" class="img-fluid" alt="Configurable Console Application"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/announcing-consoleapplicationbuilder</guid>
			<pubDate>Fri, 17 Jan 2025 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/announcing-ConsoleApplicationBuilder.png" class="img-fluid" alt="Configurable Console Application" /&gt;&lt;/p&gt;
&lt;p&gt;A recent interaction reminded me that using things like &lt;code&gt;IServiceCollection&lt;/code&gt; to get dependency injection or &lt;code&gt;ConfigurationManager&lt;/code&gt; to use appsettings.json and &lt;code&gt;IOptions&amp;lt;T&amp;gt;&lt;/code&gt; in a .NET console application is a lot of work. You can use things like &lt;a href="https://learn.microsoft.com/en-us/dotnet/core/extensions/workers"&gt;console worker project&lt;/a&gt;, but if you're implementing a simple console application, a background process seems over the top and unnatural.&lt;/p&gt;
&lt;p&gt;I've added DI and configuration to console applications in the past, but it has always been troublesome and problematic. I had considered just documenting that process but thought the amount of work to simply create a NuGet package to do it for me seemed like it was about the same amount of work. A couple of weeks ago I started creating &lt;code&gt;ConsoleApplicationBuilder&lt;/code&gt;—a type that implements similar functionality to &lt;code&gt;WebApplicationBuilder&lt;/code&gt; and &lt;code&gt;HostApplicationBuilder&lt;/code&gt; (that &lt;code&gt;WebApplicationBuilder&lt;/code&gt; leverages). This post announces the result of that effort.&lt;/p&gt;
&lt;p&gt;TL;DR: &lt;code&gt;ConsoleApplicationBuilder&lt;/code&gt; and the associated &lt;code&gt;dotnet new&lt;/code&gt; project template enable the use of DI in console applications simply and succinctly:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Program(ILogger&amp;lt;Program&amp;gt; logger)
{
    static void Main(string[] args)
    {
        var builder = ConsoleApplication.CreateBuilder(args);
        var program = builder.Build&amp;lt;Program&amp;gt;();
        program.Run();
    }

    private void Run()
    {
        logger.LogInformation(&amp;quot;Hello, World!&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ConsoleApplicationBuilder&lt;/code&gt; is open-source and available on &lt;a href="https://github.com/peteraritchie/ConsoleApplicationBuilder"&gt;GitHub&lt;/a&gt;; you can find similar details there.&lt;/p&gt;
&lt;p&gt;What prompted my latest foray into DI in a non-background console application was to inject a configured &lt;code&gt;HttpClient&lt;/code&gt; into the application. &lt;code&gt;ConsoleApplicationBuilder&lt;/code&gt; supports this easily and naturally:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Program(ILogger&amp;lt;Program&amp;gt; logger, HttpClient httpClient)
{
    static async Task Main(string[] args)
    {
        var builder = ConsoleApplication.CreateBuilder(args);
        builder.Services.AddHttpClient&amp;lt;Program&amp;gt;(httpClient =&amp;gt;
        {
            httpClient.BaseAddress = new Uri(&amp;quot;https://jsonplaceholder.typicode.com&amp;quot;);
        });
        var program = builder.Build&amp;lt;Program&amp;gt;();
        await program.Run();
    }

    private async Task Run()
    {
        logger.LogInformation(&amp;quot;Hello, World!&amp;quot;);
        logger.LogInformation(await httpClient.GetStringAsync(&amp;quot;todos/3&amp;quot;));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="dotnet-new-project-template"&gt;&lt;code&gt;dotnet new&lt;/code&gt; Project Template&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;dotnet new consoleapp&lt;/code&gt; project template supports appsettings out of the box and is installed like other &lt;code&gt;dotnet new&lt;/code&gt; project templates:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;dotnet new install PRI.ConsoleApplicationBuilder.Templates
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to create a new console application that supports DI, Configuration, appsettings, etc., is as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;dotnet new consoleapp -o Peter.ConsoleApp
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="consoleapplicationbuilder-without-dotnet-new-consoleapp-project-template"&gt;&lt;code&gt;ConsoleApplicationBuilder&lt;/code&gt; Without &lt;code&gt;dotnet new consoleapp&lt;/code&gt; Project Template&lt;/h2&gt;
&lt;p&gt;When I implemented the &lt;code&gt;dotnet new consoleapp&lt;/code&gt; project template, I wanted to make the created &lt;code&gt;Program&lt;/code&gt; class as simple as possible, so I chose to re-use the Program class and build an instance of that class to inject services like &lt;code&gt;ILogger&amp;lt;Program&amp;gt;&lt;/code&gt;. However, you don't need to use the template to use &lt;code&gt;ConsoleApplicationBuilder&lt;/code&gt;, and you don't need to re-use &lt;code&gt;Program&lt;/code&gt; as the type that it will build. You can add a reference to the &lt;code&gt;PRI.ConsoleApplicationBuilder&lt;/code&gt; NuGet package and build a different type. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Program
{
    static async Task Main(string[] args)
    {
        var builder = ConsoleApplication.CreateBuilder(args);
        builder.Services.AddHttpClient&amp;lt;ToDoAdapter&amp;gt;(httpClient =&amp;gt;
        {
	        httpClient.BaseAddress = new Uri(&amp;quot;https://jsonplaceholder.typicode.com&amp;quot;);
        });
        var adapter = builder.Build&amp;lt;ToDoAdapter&amp;gt;();
		var todoText = await adapter.GetToDo(1);
	}
}

internal sealed class ToDoAdapter(ILogger&amp;lt;ToDoAdapter&amp;gt; logger, HttpClient httpClient)
{
	public async Task&amp;lt;string&amp;gt; GetToDo(int id)
	{
		if(logger.IsEnabled(LogLevel.Information))
		{
			logger.LogInformation(&amp;quot;Getting todo with id {Id}&amp;quot;, id);
		}
		var response = await httpClient.GetAsync($&amp;quot;todos/{id}&amp;quot;);
		response.EnsureSuccessStatusCode();
		string responseText = await response.Content.ReadAsStringAsync();
		if (logger.IsEnabled(LogLevel.Information))
		{
			logger.LogInformation(&amp;quot;Got response {ResponseText}&amp;quot;, responseText);
		}
		return responseText;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, instead of building a &lt;code&gt;Program&lt;/code&gt; instance, we're building a &lt;code&gt;ToDoAdapter&lt;/code&gt; instance that is injected with a configured logger and an specific HTTP client. Be sure to also add a reference to &lt;code&gt;Microsoft.Extensions.Http&lt;/code&gt; if you want to use that code.&lt;/p&gt;
&lt;p&gt;So, as you can see, &lt;code&gt;ConsoleApplicationBuilder&lt;/code&gt; is very flexible.&lt;/p&gt;
&lt;h2 id="feedback"&gt;Feedback&lt;/h2&gt;
&lt;p&gt;I'd love to hear your feedback, good or bad. I've modeled &lt;code&gt;ConsoleApplicationBuilder&lt;/code&gt; as closely as possible to &lt;code&gt;WebApplicationBuilder&lt;/code&gt; and &lt;code&gt;HostApplicationBuilder&lt;/code&gt; so it follows their conventions, and usage should feel natural. But I'm open to suggestions on how to improve it. You can log questions and issues on &lt;a href="https://github.com/peteraritchie/ConsoleApplicationBuilder/issues"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Working With DTO Auto Translators -- Mapperly</title>
			<link>http://blog.peterritchie.com/posts/working-with-dto-auto-translators--mapperly</link>
			<description>&lt;p&gt;&lt;img src="../assets/mapping-translation.png" class="img-fluid" alt="Complicated translation"&gt;&lt;/p&gt;</description>
			<guid>http://blog.peterritchie.com/posts/working-with-dto-auto-translators--mapperly</guid>
			<pubDate>Thu, 07 Nov 2024 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="../assets/mapping-translation.png" class="img-fluid" alt="Complicated translation" /&gt;&lt;/p&gt;
&lt;!-- Mapping/Translation series intro boilerplate --&gt;
&lt;p&gt;Modern software applications heavily rely on external services, making data transfer a crucial aspect of application functionality. Invariably, data transfer involves translating an internal representation of information to data compatible with a particular communication channel. High-level programming languages empower programmers to model abstractions in high-level types independent of lower-level implementation details. This internal representation of data is sometimes called &lt;em&gt;abstract syntax&lt;/em&gt;, which is purposely devoid of the specifics (&lt;em&gt;concrete syntax&lt;/em&gt;) required by the channel and, or the receiver. Translation from one syntax to another must first map source data elements to target data elements. That mapping includes the necessary translation method/function.&lt;/p&gt;
&lt;!-- Data Transfer Object boilerplate pull quote/box copy --&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Transfer Objects&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Defining concrete syntax in high-level languages is so essential that a design pattern is devoted to it. The Data Transfer Object&lt;sup&gt;[&lt;a href="https://amzn.to/3SR8c73"&gt;ppoe&lt;/a&gt;]&lt;/sup&gt; design pattern describes declaring high-level types to describe aspects of concrete syntax.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This installment details the mapping and translation of Data Transfer Objects with a package named &lt;a href="https://github.com/riok/mapperly"&gt;&lt;code&gt;Mapperly&lt;/code&gt;&lt;/a&gt; (&lt;a href="https://www.nuget.org/packages/Riok.Mapperly/"&gt;Riok.Mapperly&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Mapperly accomplishes translation by being a .NET Source Generator, meaning the translation code is generated and exists when your application is compiled. The translation code, therefore, does not need to jump through a bunch of hoops by evaluating expressions and dynamically generating types and methods. Being a Source Generator makes Mapperly pleasantly different from other mappers like AutoMapper and Mapster. You have to declare the intent to translate from one type to another by declaring a partial method (in a partial class decorated with the &lt;code&gt;MapperAttribute&lt;/code&gt;) that tells Mapperly what the source and destination types are (the method that returns the &lt;em&gt;destination&lt;/em&gt; type and accepts the &lt;em&gt;source&lt;/em&gt; type as an argument.) The name of the class method is up to you. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Mapper]
public partial class AccountTranslator
{
	public partial AccountDto AccountToAccountDto(Account account);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mapperly determines how to translate each property based on their names and types (the default &lt;em&gt;convention&lt;/em&gt;). In our simple case, it would generate a method similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;{
    public partial class AccountTranslator
    {
        [global::System.CodeDom.Compiler.GeneratedCode(&amp;quot;Riok.Mapperly&amp;quot;, &amp;quot;4.1.0.0&amp;quot;)]
        public partial global::MapperlyTests.Application.AccountDto AccountToAccountDto(global::MapperlyTests.Domain.Account account)
        {
            var target = new global::MapperlyTests.Application.AccountDto();
            target.Id = account.Id;
            target.Name = account.Name;
            target.CreationDate = account.CreationDate;
            return target;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mapperly supports immutable record types, so if you wanted to use &lt;code&gt;record&lt;/code&gt; with &lt;code&gt;AccountDto&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public record AccountDto(Guid Id, DateOnly CreationDate, string Name);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with those immutable record types Mapperly will generate code that passes arguments to the constructor:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;        [global::System.CodeDom.Compiler.GeneratedCode(&amp;quot;Riok.Mapperly&amp;quot;, &amp;quot;4.1.0.0&amp;quot;)]
        public partial global::MapperlyTests.Application.AccountDto AccountToAccountDto(global::MapperlyTests.Domain.Account account)
        {
            var target = new global::MapperlyTests.Application.AccountDto(account.Id, account.CreationDate, account.Name);
            return target;
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Say goodbye to &lt;code&gt;ConstructUsing&lt;/code&gt; (as well as &lt;code&gt;ForMember&lt;/code&gt;, et al.)&lt;/p&gt;
&lt;h2 id="mapping-by-convention"&gt;Mapping by Convention&lt;/h2&gt;
&lt;p&gt;The raison d'etre of mapping/translation frameworks is to make translating one data type to another as simple as possible. A key feature of these frameworks is to map by convention, which automatically maps fields or properties based on criteria like name and data type. As we can see from the generated code above, Mapperly, by convention, figures out the source and target properties to translate. What's nice about Mapperly is that you can see the results of applying that convention by looking at the generated code (Ctrl-click the &lt;code&gt;partial&lt;/code&gt; method name to go to the generated code.)&lt;/p&gt;
&lt;h2 id="custom-mapping"&gt;Custom Mapping&lt;/h2&gt;
&lt;p&gt;When we start (greenfield) development, our DTOs are usually closely aligned with our domain objects, so by-convention mapping is our friend. However, an important reason for having two abstractions is that they can evolve independently. Eventually, as we gain a better understanding of the domain or clients of the communication channel, we will need to make changes that cause our DTO and Domain Objects to diverge. We can manage that divergence by extending the by-convention mapping to include custom mapping on a per-property basis. Mapperly supports this through members of the &lt;code&gt;Mapper&lt;/code&gt;-decorated class.&lt;/p&gt;
&lt;p&gt;For example, we've gained a better understanding of the domain, and an Account doesn't necessarily have a &amp;quot;name&amp;quot; but has an associated account holder with a given and family name. That understanding may make its way into the domain like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Account(Guid id, DateOnly creationDate, string accountHolderGivenName, string accountHolderFamilyName)
{
	public Guid Id { get; } = id;
	public string AccountHolderGivenName { get; private set; } = accountHolderGivenName;
	public string AccountHolderFamilyName { get; private set; } = accountHolderFamilyName;
	public DateOnly CreationDate { get; } = creationDate;

	public void ChangeName(string accountHolderGivenName, string accountHolderFamilyName)
	{
		AccountHolderGivenName = accountHolderGivenName;
		AccountHolderFamilyName = accountHolderFamilyName;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Receivers of our &lt;code&gt;AccountDto&lt;/code&gt; might be unable to accommodate that change immediately, so we may deal with that by mapping properties differently. Instead of including &lt;code&gt;FamilyName&lt;/code&gt; and &lt;code&gt;GivenName&lt;/code&gt; in this version of &lt;code&gt;AccountDto&lt;/code&gt;, we may concatenate the given and family name and assign it to &lt;code&gt;AccountDto.Name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can configure this type of two properties to one property conversion with the &lt;code&gt;MapPropertyFromSource&lt;/code&gt; attribute. More than just the name of the two properties is needed for Mapperly to automatically figure out what to do (concatenate, concatenate with delimiter, etc.). So, we use &lt;code&gt;MapPropertyFromSource&lt;/code&gt; to point to a method that takes the source type and returns an instance of a type assignable to the destination property.  In this example, a &lt;code&gt;MapGivenFamilyNames&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Mapper]
public partial class AccountTranslator
	: IAccountTranslator
{
	[MapPropertyFromSource(target: nameof(AccountDto.Name), Use = nameof(MapGivenFamilyNames))]
	public partial AccountDto AccountToAccountDto(Account account);
	private string MapGivenFamilyNames(Account account)
	{
		return account.AccountHolderGivenName + ' ' + account.AccountHolderFamilyName;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mapperly supports arrays of strings for &lt;code&gt;target&lt;/code&gt; so you can map to nested properties of properties.&lt;/p&gt;
&lt;p&gt;Mapperly also supports property-to-property mapping of properties that a simple matching strategy wouldn't match.  Given the same client application constraints and the domain understanding uncovered that the &lt;code&gt;Name&lt;/code&gt; property doesn't fit in the ubiquitous language but &lt;code&gt;FullName&lt;/code&gt; does, we would use &lt;code&gt;MapPropertyAttribute&lt;/code&gt; to tell Mapperly how to assign the &lt;code&gt;AccountDto.Name&lt;/code&gt; property:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Mapper]
public partial class AccountTranslator
	: IAccountTranslator
{
	[MapProperty(source: nameof(AccountDto.Name), target: nameof(Account.FullName))]
	public partial AccountDto AccountToAccountDto(Account account);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;NOTE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;The constructor for &lt;code&gt;MapPropertyFromSourceAttribute&lt;/code&gt; has only one parameter, the &lt;code&gt;target&lt;/code&gt;.  The constructor for &lt;code&gt;MapPropertyAttribute&lt;/code&gt; has two, the &lt;code&gt;source&lt;/code&gt; and the &lt;code&gt;target&lt;/code&gt;, so it &lt;em&gt;may look like&lt;/em&gt; the parameters are in a different order. C#'s &lt;em&gt;named arguments&lt;/em&gt; shines here to clarify intent.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Technically, attributes like &lt;code&gt;MapPropertyFromSourceAttribute&lt;/code&gt; and &lt;code&gt;MapPropertyAttribute&lt;/code&gt; work with string names of classes and members. Use the &lt;code&gt;name of&lt;/code&gt; expression so that identifiers get used at compile-time, as seen in the above example.&lt;/p&gt;
&lt;h2 id="but-wait-theres-more"&gt;But Wait, There's More&lt;/h2&gt;
&lt;p&gt;A benefit of being a Source Generator is that Mapperly can generate compiler/analyzer warnings when not all properties are mapped from or to.  If you're following along and you updated &lt;code&gt;Account&lt;/code&gt;, renaming &lt;code&gt;Name&lt;/code&gt; to &lt;code&gt;FullName&lt;/code&gt;, you would have noticed RMG020 and RMG012 warnings:&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/mapperly-unmapped-member-warning.png" class="img-fluid" alt="RMG020 and RMG012 warnings" /&gt;&lt;/p&gt;
&lt;h2 id="dependency-injections-with-mapperly"&gt;Dependency Injections with Mapperly&lt;/h2&gt;
&lt;p&gt;Other mappers have initialization and startup requirements making their use in Dependency Injection more than just registering an implementation of an interface (&lt;code&gt;services.AddScoped&amp;lt;ITheInterface, TheImplementation&amp;gt;();&lt;/code&gt;) and require an &lt;code&gt;Add{Technology}()&lt;/code&gt; method call (like &lt;code&gt;AddMapster&lt;/code&gt; or &lt;code&gt;AddAutoMapper&lt;/code&gt;.) Since Mapperly generates the translation code at compilation, you only have to register the translating type (e.g., &lt;code&gt;services.AddScoped&amp;lt;AccountTranslator&amp;gt;()&lt;/code&gt;) and declare the dependency in the constructors of types that need to invoke translators (e.g., &lt;code&gt;public class AccountService(AccountTranslator accountTranslator){/*...*/}&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;If you're interface-obsessed when it comes to Dependency Injection, you're free to create an interface to use and configure your services appropriately, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public interface IAccountTranslator
{
	public AccountDto AccountToAccountDto(Account account);
}
//...
[Mapper]
public partial class AccountTranslator
	: IAccountTranslator
{
	public partial AccountDto AccountToAccountDto(Account account);
}
//...
services.AddScoped&amp;lt;IAccountTranslator, AccountTranslator&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then declare the dependency in the constructors of types that need to invoke translators (e.g., &lt;code&gt;public class AccountService(IAccountTranslator accountTranslator){/*...*/}&lt;/code&gt;.)&lt;/p&gt;
&lt;h2 id="where-does-mapping-and-translation-occur"&gt;Where Does Mapping and Translation Occur?&lt;/h2&gt;
&lt;p&gt;Data transfer can occur in different layers. Data transfer triggers a website or API (presentation layer); the application layer requests external services via an infrastructure layer to transfer data to and from. I'm often asked where that mapping and translation source code should exist and in which project in the solution. It's important to remember that we're dealing with multiple layers. The presentation layer is typically where the process entry point is, so initialization (DI container configuration) occurs here. That initialization depends at least indirectly on the translation code to configure services that perform the translation.&lt;/p&gt;
&lt;p&gt;Translation of web/API models exist in the presentation layer because that's where &lt;em&gt;that&lt;/em&gt; data transfer occurs. It can get complex when more layers are in their own project or are their own artifact. I recommend that DTOs live in the project where the data transfer occurs because they should be viewed as an implementation detail of the facade/adapter performing the data transfer. This typically means that the translation codes lives along side the DTOs because you want to keep implementation details encapsulated. The translation should be made available through an interface that is configured by your Dependency Injection container. I'll leave the complexity of doing that in the context of project-scoped layers for another post.&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;NOTE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;Regardless of whether you have multiple presentation layers or an independent application layer, translation logic &lt;em&gt;should not&lt;/em&gt; be a responsibility in the Domain layer.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content:encoded>
		</item>
	</channel>
</rss>